{
  "address": "0xa2EE532d8e0ee90D2d8aF0fEc3E166242BCaad30",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_launchpegFactory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_batchReveal",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "LaunchpegLens__InvalidContract",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "batchReveal",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "flatLaunchpegInterface",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_type",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_number",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_limit",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getAllLaunchpegsFromType",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "id",
              "type": "address"
            },
            {
              "internalType": "enum LaunchpegLens.LaunchpegType",
              "name": "launchType",
              "type": "uint8"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "symbol",
                  "type": "string"
                },
                {
                  "internalType": "uint256",
                  "name": "collectionSize",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "maxBatchSize",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "totalSupply",
                  "type": "uint256"
                },
                {
                  "internalType": "string",
                  "name": "unrevealedURI",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "baseURI",
                  "type": "string"
                }
              ],
              "internalType": "struct LaunchpegLens.CollectionData",
              "name": "collectionData",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "amountForAuction",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amountForAllowlist",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amountForDevs",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "auctionSaleStartTime",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "allowlistStartTime",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "publicSaleStartTime",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "auctionStartPrice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "auctionEndPrice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "auctionSaleDuration",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "auctionDropInterval",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "auctionDropPerStep",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "allowlistDiscountPercent",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "publicSaleDiscountPercent",
                  "type": "uint256"
                },
                {
                  "internalType": "enum IBaseLaunchpeg.Phase",
                  "name": "currentPhase",
                  "type": "uint8"
                },
                {
                  "internalType": "uint256",
                  "name": "auctionPrice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "allowlistPrice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "publicSalePrice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amountMintedDuringAuction",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "lastAuctionPrice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amountMintedDuringAllowlist",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amountMintedDuringPublicSale",
                  "type": "uint256"
                }
              ],
              "internalType": "struct LaunchpegLens.LaunchpegData",
              "name": "launchpegData",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "enum IBaseLaunchpeg.Phase",
                  "name": "currentPhase",
                  "type": "uint8"
                },
                {
                  "internalType": "uint256",
                  "name": "amountForAllowlist",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amountForDevs",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "allowlistStartTime",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "publicSaleStartTime",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "allowlistPrice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "salePrice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amountMintedDuringAllowlist",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amountMintedDuringPublicSale",
                  "type": "uint256"
                }
              ],
              "internalType": "struct LaunchpegLens.FlatLaunchpegData",
              "name": "flatLaunchpegData",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "revealBatchSize",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "lastTokenRevealed",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "revealStartTime",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "revealInterval",
                  "type": "uint256"
                }
              ],
              "internalType": "struct LaunchpegLens.RevealData",
              "name": "revealData",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "balanceOf",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "numberMinted",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "allowanceForAllowlistMint",
                  "type": "uint256"
                }
              ],
              "internalType": "struct LaunchpegLens.UserData",
              "name": "userData",
              "type": "tuple"
            }
          ],
          "internalType": "struct LaunchpegLens.LensData[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_launchpeg",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getLaunchpegData",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "id",
              "type": "address"
            },
            {
              "internalType": "enum LaunchpegLens.LaunchpegType",
              "name": "launchType",
              "type": "uint8"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "symbol",
                  "type": "string"
                },
                {
                  "internalType": "uint256",
                  "name": "collectionSize",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "maxBatchSize",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "totalSupply",
                  "type": "uint256"
                },
                {
                  "internalType": "string",
                  "name": "unrevealedURI",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "baseURI",
                  "type": "string"
                }
              ],
              "internalType": "struct LaunchpegLens.CollectionData",
              "name": "collectionData",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "amountForAuction",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amountForAllowlist",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amountForDevs",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "auctionSaleStartTime",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "allowlistStartTime",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "publicSaleStartTime",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "auctionStartPrice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "auctionEndPrice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "auctionSaleDuration",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "auctionDropInterval",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "auctionDropPerStep",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "allowlistDiscountPercent",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "publicSaleDiscountPercent",
                  "type": "uint256"
                },
                {
                  "internalType": "enum IBaseLaunchpeg.Phase",
                  "name": "currentPhase",
                  "type": "uint8"
                },
                {
                  "internalType": "uint256",
                  "name": "auctionPrice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "allowlistPrice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "publicSalePrice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amountMintedDuringAuction",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "lastAuctionPrice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amountMintedDuringAllowlist",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amountMintedDuringPublicSale",
                  "type": "uint256"
                }
              ],
              "internalType": "struct LaunchpegLens.LaunchpegData",
              "name": "launchpegData",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "enum IBaseLaunchpeg.Phase",
                  "name": "currentPhase",
                  "type": "uint8"
                },
                {
                  "internalType": "uint256",
                  "name": "amountForAllowlist",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amountForDevs",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "allowlistStartTime",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "publicSaleStartTime",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "allowlistPrice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "salePrice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amountMintedDuringAllowlist",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amountMintedDuringPublicSale",
                  "type": "uint256"
                }
              ],
              "internalType": "struct LaunchpegLens.FlatLaunchpegData",
              "name": "flatLaunchpegData",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "revealBatchSize",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "lastTokenRevealed",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "revealStartTime",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "revealInterval",
                  "type": "uint256"
                }
              ],
              "internalType": "struct LaunchpegLens.RevealData",
              "name": "revealData",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "balanceOf",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "numberMinted",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "allowanceForAllowlistMint",
                  "type": "uint256"
                }
              ],
              "internalType": "struct LaunchpegLens.UserData",
              "name": "userData",
              "type": "tuple"
            }
          ],
          "internalType": "struct LaunchpegLens.LensData",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_contract",
          "type": "address"
        }
      ],
      "name": "getLaunchpegType",
      "outputs": [
        {
          "internalType": "enum LaunchpegLens.LaunchpegType",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "launchpegFactory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "launchpegInterface",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x6ace83b3087070d41fa2bba0e8d78e3cc67e5aeba5e540bb7839d6e6d563f1d3",
  "receipt": {
    "to": null,
    "from": "0x9fB97989E2A68e03Adb172Fd62D31d9896A67AC4",
    "contractAddress": "0xa2EE532d8e0ee90D2d8aF0fEc3E166242BCaad30",
    "transactionIndex": 0,
    "gasUsed": "2051245",
    "logsBloom": "0x
    "blockHash": "0x92c59e18b6eebe9f8ada18785b2b9d9bed025d5f838ad43fddd640ec8bff3be0",
    "transactionHash": "0x6ace83b3087070d41fa2bba0e8d78e3cc67e5aeba5e540bb7839d6e6d563f1d3",
    "logs": [],
    "blockNumber": 13843465,
    "cumulativeGasUsed": "2051245",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0d22EF1C5372677c8680fb485c6A1Ce43eA58eaF",
    "0xc6B3ccaEE924F20dD0E11429c7B983BC2BB22155"
  ],
  "numDeployments": 10,
  "solcInputHash": "17eec7c82eebfc51760fc925f206e66d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_launchpegFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_batchReveal\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"LaunchpegLens__InvalidContract\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"batchReveal\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flatLaunchpegInterface\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_type\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_number\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getAllLaunchpegsFromType\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"},{\"internalType\":\"enum LaunchpegLens.LaunchpegType\",\"name\":\"launchType\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"collectionSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxBatchSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"unrevealedURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"}],\"internalType\":\"struct LaunchpegLens.CollectionData\",\"name\":\"collectionData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountForAuction\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountForAllowlist\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountForDevs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionSaleStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allowlistStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"publicSaleStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionStartPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionEndPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionSaleDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionDropInterval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionDropPerStep\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allowlistDiscountPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"publicSaleDiscountPercent\",\"type\":\"uint256\"},{\"internalType\":\"enum IBaseLaunchpeg.Phase\",\"name\":\"currentPhase\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"auctionPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allowlistPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"publicSalePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountMintedDuringAuction\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastAuctionPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountMintedDuringAllowlist\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountMintedDuringPublicSale\",\"type\":\"uint256\"}],\"internalType\":\"struct LaunchpegLens.LaunchpegData\",\"name\":\"launchpegData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"enum IBaseLaunchpeg.Phase\",\"name\":\"currentPhase\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amountForAllowlist\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountForDevs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allowlistStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"publicSaleStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allowlistPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountMintedDuringAllowlist\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountMintedDuringPublicSale\",\"type\":\"uint256\"}],\"internalType\":\"struct LaunchpegLens.FlatLaunchpegData\",\"name\":\"flatLaunchpegData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"revealBatchSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastTokenRevealed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"revealStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"revealInterval\",\"type\":\"uint256\"}],\"internalType\":\"struct LaunchpegLens.RevealData\",\"name\":\"revealData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"balanceOf\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numberMinted\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allowanceForAllowlistMint\",\"type\":\"uint256\"}],\"internalType\":\"struct LaunchpegLens.UserData\",\"name\":\"userData\",\"type\":\"tuple\"}],\"internalType\":\"struct LaunchpegLens.LensData[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_launchpeg\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getLaunchpegData\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"},{\"internalType\":\"enum LaunchpegLens.LaunchpegType\",\"name\":\"launchType\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"collectionSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxBatchSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"unrevealedURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"}],\"internalType\":\"struct LaunchpegLens.CollectionData\",\"name\":\"collectionData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountForAuction\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountForAllowlist\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountForDevs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionSaleStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allowlistStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"publicSaleStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionStartPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionEndPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionSaleDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionDropInterval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionDropPerStep\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allowlistDiscountPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"publicSaleDiscountPercent\",\"type\":\"uint256\"},{\"internalType\":\"enum IBaseLaunchpeg.Phase\",\"name\":\"currentPhase\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"auctionPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allowlistPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"publicSalePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountMintedDuringAuction\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastAuctionPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountMintedDuringAllowlist\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountMintedDuringPublicSale\",\"type\":\"uint256\"}],\"internalType\":\"struct LaunchpegLens.LaunchpegData\",\"name\":\"launchpegData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"enum IBaseLaunchpeg.Phase\",\"name\":\"currentPhase\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amountForAllowlist\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountForDevs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allowlistStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"publicSaleStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allowlistPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountMintedDuringAllowlist\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountMintedDuringPublicSale\",\"type\":\"uint256\"}],\"internalType\":\"struct LaunchpegLens.FlatLaunchpegData\",\"name\":\"flatLaunchpegData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"revealBatchSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastTokenRevealed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"revealStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"revealInterval\",\"type\":\"uint256\"}],\"internalType\":\"struct LaunchpegLens.RevealData\",\"name\":\"revealData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"balanceOf\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numberMinted\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allowanceForAllowlistMint\",\"type\":\"uint256\"}],\"internalType\":\"struct LaunchpegLens.UserData\",\"name\":\"userData\",\"type\":\"tuple\"}],\"internalType\":\"struct LaunchpegLens.LensData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"getLaunchpegType\",\"outputs\":[{\"internalType\":\"enum LaunchpegLens.LaunchpegType\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchpegFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchpegInterface\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Trader Joe\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"LaunchpegLens constructor\",\"params\":{\"_batchReveal\":\"BatchReveal address\",\"_launchpegFactory\":\"LaunchpegFactory address\"}},\"getAllLaunchpegsFromType(uint8,uint256,uint256,address)\":{\"params\":{\"_limit\":\"Last Launchpeg index to fetch\",\"_number\":\"Number of Launchpeg to fetch\",\"_type\":\"Type of Launchpeg to consider\",\"_user\":\"Address to consider for NFT balances and allowlist allocations\"},\"returns\":{\"_0\":\"LensDataList List of contracts datas, in descending order\"}},\"getLaunchpegData(address,address)\":{\"params\":{\"_launchpeg\":\"Contract address to consider\",\"_user\":\"Address to consider for NFT balances and allowlist allocations\"},\"returns\":{\"_0\":\"LensData Contract data\"}},\"getLaunchpegType(address)\":{\"params\":{\"_contract\":\"Contract address to consider\"},\"returns\":{\"_0\":\"LaunchpegType Type of Launchpeg implementation (Dutch Auction / Flat / Unknown)\"}}},\"title\":\"Launchpeg Lens\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"batchReveal()\":{\"notice\":\"BatchReveal address\"},\"flatLaunchpegInterface()\":{\"notice\":\"IFlatLaunchpegInterface identifier\"},\"getAllLaunchpegsFromType(uint8,uint256,uint256,address)\":{\"notice\":\"Fetch Launchpeg data\"},\"getLaunchpegData(address,address)\":{\"notice\":\"Fetch Launchpeg data from the provided address\"},\"getLaunchpegType(address)\":{\"notice\":\"Gets the type of Launchpeg\"},\"launchpegFactory()\":{\"notice\":\"LaunchpegFactory address\"},\"launchpegInterface()\":{\"notice\":\"ILaunchpegInterface identifier\"}},\"notice\":\"Helper contract to fetch launchpegs data\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LaunchpegLens.sol\":\"LaunchpegLens\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x2f359f9d5c56394e60d74401487ab55d8ef0012907b07c9abbb8f998bf5ddfec\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x714a33fd66816f608f6eda908da24eb6009eee50adf4062c86639d4fe508a7b6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x95a471796eb5f030fdc438660bebec121ad5d063763e64d92376ffb4b5ce8b70\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x398d3323c1932a5986bf36be7c57593e121e69d5db5b6574b4ee0d031443de37\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"contracts/LaunchpegLens.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"./interfaces/IBaseLaunchpeg.sol\\\";\\nimport \\\"./interfaces/IFlatLaunchpeg.sol\\\";\\nimport \\\"./interfaces/ILaunchpeg.sol\\\";\\nimport \\\"./interfaces/IBatchReveal.sol\\\";\\nimport \\\"./interfaces/ILaunchpegFactory.sol\\\";\\nimport \\\"erc721a-upgradeable/contracts/ERC721AUpgradeable.sol\\\";\\n\\nerror LaunchpegLens__InvalidContract();\\n\\n/// @title Launchpeg Lens\\n/// @author Trader Joe\\n/// @notice Helper contract to fetch launchpegs data\\ncontract LaunchpegLens {\\n    struct CollectionData {\\n        string name;\\n        string symbol;\\n        uint256 collectionSize;\\n        uint256 maxBatchSize;\\n        uint256 totalSupply;\\n        string unrevealedURI;\\n        string baseURI;\\n    }\\n\\n    struct LaunchpegData {\\n        uint256 amountForAuction;\\n        uint256 amountForAllowlist;\\n        uint256 amountForDevs;\\n        uint256 auctionSaleStartTime;\\n        uint256 allowlistStartTime;\\n        uint256 publicSaleStartTime;\\n        uint256 auctionStartPrice;\\n        uint256 auctionEndPrice;\\n        uint256 auctionSaleDuration;\\n        uint256 auctionDropInterval;\\n        uint256 auctionDropPerStep;\\n        uint256 allowlistDiscountPercent;\\n        uint256 publicSaleDiscountPercent;\\n        ILaunchpeg.Phase currentPhase;\\n        uint256 auctionPrice;\\n        uint256 allowlistPrice;\\n        uint256 publicSalePrice;\\n        uint256 amountMintedDuringAuction;\\n        uint256 lastAuctionPrice;\\n        uint256 amountMintedDuringAllowlist;\\n        uint256 amountMintedDuringPublicSale;\\n    }\\n\\n    struct FlatLaunchpegData {\\n        ILaunchpeg.Phase currentPhase;\\n        uint256 amountForAllowlist;\\n        uint256 amountForDevs;\\n        uint256 allowlistStartTime;\\n        uint256 publicSaleStartTime;\\n        uint256 allowlistPrice;\\n        uint256 salePrice;\\n        uint256 amountMintedDuringAllowlist;\\n        uint256 amountMintedDuringPublicSale;\\n    }\\n\\n    struct RevealData {\\n        uint256 revealBatchSize;\\n        uint256 lastTokenRevealed;\\n        uint256 revealStartTime;\\n        uint256 revealInterval;\\n    }\\n\\n    struct UserData {\\n        uint256 balanceOf;\\n        uint256 numberMinted;\\n        uint256 allowanceForAllowlistMint;\\n    }\\n\\n    /// Global struct that is returned by getAllLaunchpegs()\\n    struct LensData {\\n        address id;\\n        LaunchpegType launchType;\\n        CollectionData collectionData;\\n        LaunchpegData launchpegData;\\n        FlatLaunchpegData flatLaunchpegData;\\n        RevealData revealData;\\n        UserData userData;\\n    }\\n\\n    enum LaunchpegType {\\n        Unknown,\\n        Launchpeg,\\n        FlatLaunchpeg\\n    }\\n\\n    /// @notice ILaunchpegInterface identifier\\n    bytes4 public immutable launchpegInterface;\\n\\n    /// @notice IFlatLaunchpegInterface identifier\\n    bytes4 public immutable flatLaunchpegInterface;\\n\\n    /// @notice LaunchpegFactory address\\n    address public immutable launchpegFactory;\\n\\n    /// @notice BatchReveal address\\n    address public immutable batchReveal;\\n\\n    /// @dev LaunchpegLens constructor\\n    /// @param _launchpegFactory LaunchpegFactory address\\n    /// @param _batchReveal BatchReveal address\\n    constructor(address _launchpegFactory, address _batchReveal) {\\n        launchpegInterface = type(ILaunchpeg).interfaceId;\\n        flatLaunchpegInterface = type(IFlatLaunchpeg).interfaceId;\\n        launchpegFactory = _launchpegFactory;\\n        batchReveal = _batchReveal;\\n    }\\n\\n    /// @notice Gets the type of Launchpeg\\n    /// @param _contract Contract address to consider\\n    /// @return LaunchpegType Type of Launchpeg implementation (Dutch Auction / Flat / Unknown)\\n    function getLaunchpegType(address _contract)\\n        public\\n        view\\n        returns (LaunchpegType)\\n    {\\n        if (IBaseLaunchpeg(_contract).supportsInterface(launchpegInterface)) {\\n            return LaunchpegType.Launchpeg;\\n        } else if (\\n            IBaseLaunchpeg(_contract).supportsInterface(flatLaunchpegInterface)\\n        ) {\\n            return LaunchpegType.FlatLaunchpeg;\\n        } else {\\n            return LaunchpegType.Unknown;\\n        }\\n    }\\n\\n    /// @notice Fetch Launchpeg data\\n    /// @param _type Type of Launchpeg to consider\\n    /// @param _number Number of Launchpeg to fetch\\n    /// @param _limit Last Launchpeg index to fetch\\n    /// @param _user Address to consider for NFT balances and allowlist allocations\\n    /// @return LensDataList List of contracts datas, in descending order\\n    function getAllLaunchpegsFromType(\\n        uint8 _type,\\n        uint256 _number,\\n        uint256 _limit,\\n        address _user\\n    ) external view returns (LensData[] memory) {\\n        LensData[] memory LensDatas;\\n        uint256 numLaunchpegs = ILaunchpegFactory(launchpegFactory)\\n            .numLaunchpegs(_type);\\n\\n        uint256 end = _limit > numLaunchpegs ? numLaunchpegs : _limit;\\n        uint256 start = _number > end ? 0 : end - _number;\\n\\n        LensDatas = new LensData[](end - start);\\n\\n        for (uint256 i = 0; i < LensDatas.length; i++) {\\n            LensDatas[i] = getLaunchpegData(\\n                ILaunchpegFactory(launchpegFactory).allLaunchpegs(\\n                    _type,\\n                    end - 1 - i\\n                ),\\n                _user\\n            );\\n        }\\n\\n        return LensDatas;\\n    }\\n\\n    /// @notice Fetch Launchpeg data from the provided address\\n    /// @param _launchpeg Contract address to consider\\n    /// @param _user Address to consider for NFT balances and allowlist allocations\\n    /// @return LensData Contract data\\n    function getLaunchpegData(address _launchpeg, address _user)\\n        public\\n        view\\n        returns (LensData memory)\\n    {\\n        LensData memory data;\\n        data.id = _launchpeg;\\n        data.launchType = getLaunchpegType(_launchpeg);\\n\\n        if (data.launchType == LaunchpegType.Unknown) {\\n            revert LaunchpegLens__InvalidContract();\\n        }\\n\\n        data.collectionData.name = ERC721AUpgradeable(_launchpeg).name();\\n        data.collectionData.symbol = ERC721AUpgradeable(_launchpeg).symbol();\\n        data.collectionData.collectionSize = IBaseLaunchpeg(_launchpeg)\\n            .collectionSize();\\n        data.collectionData.maxBatchSize = IBaseLaunchpeg(_launchpeg)\\n            .maxBatchSize();\\n        data.collectionData.totalSupply = ERC721AUpgradeable(_launchpeg)\\n            .totalSupply();\\n        data.collectionData.unrevealedURI = IBaseLaunchpeg(_launchpeg)\\n            .unrevealedURI();\\n        data.collectionData.baseURI = IBaseLaunchpeg(_launchpeg).baseURI();\\n\\n        (\\n            ,\\n            ,\\n            uint256 revealBatchSize,\\n            uint256 revealStartTime,\\n            uint256 revealInterval\\n        ) = IBatchReveal(batchReveal).launchpegToConfig(_launchpeg);\\n        data.revealData.revealBatchSize = revealBatchSize;\\n        data.revealData.revealStartTime = revealStartTime;\\n        data.revealData.revealInterval = revealInterval;\\n        data.revealData.lastTokenRevealed = IBatchReveal(batchReveal)\\n            .launchpegToLastTokenReveal(_launchpeg);\\n\\n        if (data.launchType == LaunchpegType.Launchpeg) {\\n            data.launchpegData.amountForAuction = ILaunchpeg(_launchpeg)\\n                .amountForAuction();\\n            data.launchpegData.amountForAllowlist = ILaunchpeg(_launchpeg)\\n                .amountForAllowlist();\\n            data.launchpegData.amountForDevs = ILaunchpeg(_launchpeg)\\n                .amountForDevs();\\n            data.launchpegData.auctionSaleStartTime = ILaunchpeg(_launchpeg)\\n                .auctionSaleStartTime();\\n            data.launchpegData.allowlistStartTime = ILaunchpeg(_launchpeg)\\n                .allowlistStartTime();\\n            data.launchpegData.publicSaleStartTime = ILaunchpeg(_launchpeg)\\n                .publicSaleStartTime();\\n            data.launchpegData.auctionStartPrice = ILaunchpeg(_launchpeg)\\n                .auctionStartPrice();\\n            data.launchpegData.auctionEndPrice = ILaunchpeg(_launchpeg)\\n                .auctionEndPrice();\\n            data.launchpegData.auctionSaleDuration = ILaunchpeg(_launchpeg)\\n                .auctionSaleDuration();\\n            data.launchpegData.auctionDropInterval = ILaunchpeg(_launchpeg)\\n                .auctionDropInterval();\\n            data.launchpegData.auctionDropPerStep = ILaunchpeg(_launchpeg)\\n                .auctionDropPerStep();\\n            data.launchpegData.allowlistDiscountPercent = ILaunchpeg(_launchpeg)\\n                .allowlistDiscountPercent();\\n            data.launchpegData.publicSaleDiscountPercent = ILaunchpeg(\\n                _launchpeg\\n            ).publicSaleDiscountPercent();\\n            data.launchpegData.currentPhase = ILaunchpeg(_launchpeg)\\n                .currentPhase();\\n            data.launchpegData.auctionPrice = ILaunchpeg(_launchpeg)\\n                .getAuctionPrice(data.launchpegData.auctionSaleStartTime);\\n            data.launchpegData.allowlistPrice = ILaunchpeg(_launchpeg)\\n                .getAllowlistPrice();\\n            data.launchpegData.publicSalePrice = ILaunchpeg(_launchpeg)\\n                .getPublicSalePrice();\\n            data.launchpegData.amountMintedDuringAuction = ILaunchpeg(\\n                _launchpeg\\n            ).amountMintedDuringAuction();\\n            data.launchpegData.lastAuctionPrice = ILaunchpeg(_launchpeg)\\n                .lastAuctionPrice();\\n            data.launchpegData.amountMintedDuringAllowlist = IBaseLaunchpeg(\\n                _launchpeg\\n            ).amountMintedDuringAllowlist();\\n            data.launchpegData.amountMintedDuringPublicSale = IBaseLaunchpeg(\\n                _launchpeg\\n            ).amountMintedDuringPublicSale();\\n        }\\n\\n        if (data.launchType == LaunchpegType.FlatLaunchpeg) {\\n            data.flatLaunchpegData.currentPhase = IFlatLaunchpeg(_launchpeg)\\n                .currentPhase();\\n            data.flatLaunchpegData.allowlistPrice = IFlatLaunchpeg(_launchpeg)\\n                .allowlistPrice();\\n            data.flatLaunchpegData.salePrice = IFlatLaunchpeg(_launchpeg)\\n                .salePrice();\\n            data.flatLaunchpegData.amountMintedDuringAllowlist = IFlatLaunchpeg(\\n                _launchpeg\\n            ).amountMintedDuringAllowlist();\\n            data\\n                .flatLaunchpegData\\n                .amountMintedDuringPublicSale = IFlatLaunchpeg(_launchpeg)\\n                .amountMintedDuringPublicSale();\\n            data.flatLaunchpegData.amountForAllowlist = IFlatLaunchpeg(\\n                _launchpeg\\n            ).amountForAllowlist();\\n            data.flatLaunchpegData.amountForDevs = IFlatLaunchpeg(_launchpeg)\\n                .amountForDevs();\\n            data.flatLaunchpegData.allowlistStartTime = IFlatLaunchpeg(\\n                _launchpeg\\n            ).allowlistStartTime();\\n            data.flatLaunchpegData.publicSaleStartTime = IFlatLaunchpeg(\\n                _launchpeg\\n            ).publicSaleStartTime();\\n        }\\n\\n        if (_user != address(0)) {\\n            data.userData.balanceOf = ERC721AUpgradeable(_launchpeg).balanceOf(\\n                _user\\n            );\\n            data.userData.numberMinted = IBaseLaunchpeg(_launchpeg)\\n                .numberMinted(_user);\\n            data.userData.allowanceForAllowlistMint = IBaseLaunchpeg(_launchpeg)\\n                .allowlist(_user);\\n        }\\n\\n        return data;\\n    }\\n}\\n\",\"keccak256\":\"0x83c590495d9905996034ef437c0129418581c5db92a2896d6b42e43ac2052765\",\"license\":\"MIT\"},\"contracts/interfaces/IBaseLaunchpeg.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\\\";\\n\\nimport \\\"erc721a-upgradeable/contracts/ERC721AUpgradeable.sol\\\";\\n\\n/// @title IBaseLaunchpeg\\n/// @author Trader Joe\\n/// @notice Defines the basic interface of BaseLaunchpeg\\ninterface IBaseLaunchpeg is IERC721Upgradeable, IERC721MetadataUpgradeable {\\n    enum Phase {\\n        NotStarted,\\n        DutchAuction,\\n        Allowlist,\\n        PublicSale,\\n        Ended\\n    }\\n\\n    function PROJECT_OWNER_ROLE() external view returns (bytes32);\\n\\n    function collectionSize() external view returns (uint256);\\n\\n    function unrevealedURI() external view returns (string memory);\\n\\n    function baseURI() external view returns (string memory);\\n\\n    function amountForDevs() external view returns (uint256);\\n\\n    function amountForAllowlist() external view returns (uint256);\\n\\n    function maxBatchSize() external view returns (uint256);\\n\\n    function maxPerAddressDuringMint() external view returns (uint256);\\n\\n    function joeFeePercent() external view returns (uint256);\\n\\n    function joeFeeCollector() external view returns (address);\\n\\n    function allowlist(address) external view returns (uint256);\\n\\n    function amountMintedByDevs() external view returns (uint256);\\n\\n    function amountMintedDuringAllowlist() external view returns (uint256);\\n\\n    function amountMintedDuringPublicSale() external view returns (uint256);\\n\\n    function allowlistStartTime() external view returns (uint256);\\n\\n    function publicSaleStartTime() external view returns (uint256);\\n\\n    function publicSaleEndTime() external view returns (uint256);\\n\\n    function withdrawAVAXStartTime() external view returns (uint256);\\n\\n    function initializeJoeFee(uint256 _joeFeePercent, address _joeFeeCollector)\\n        external;\\n\\n    function setRoyaltyInfo(address receiver, uint96 feePercent) external;\\n\\n    function seedAllowlist(\\n        address[] memory _addresses,\\n        uint256[] memory _numSlots\\n    ) external;\\n\\n    function setBaseURI(string calldata baseURI) external;\\n\\n    function setUnrevealedURI(string calldata baseURI) external;\\n\\n    function setPublicSaleStartTime(uint256 _publicSaleStartTime) external;\\n\\n    function setPublicSaleEndTime(uint256 _publicSaleEndTime) external;\\n\\n    function setWithdrawAVAXStartTime(uint256 _withdrawAVAXStartTime) external;\\n\\n    function setBatchReveal(address _batchReveal) external;\\n\\n    function devMint(uint256 quantity) external;\\n\\n    function withdrawAVAX(address to) external;\\n\\n    function getOwnershipData(uint256 tokenId)\\n        external\\n        view\\n        returns (ERC721AUpgradeable.TokenOwnership memory);\\n\\n    function numberMinted(address owner) external view returns (uint256);\\n\\n    function currentPhase() external view returns (Phase);\\n\\n    function revealNextBatch() external;\\n\\n    function hasBatchToReveal() external view returns (bool, uint256);\\n}\\n\",\"keccak256\":\"0x246965096055b38138414ae2bb067bc696867ce638cdeb53d3fcd1eb745a9ce4\",\"license\":\"MIT\"},\"contracts/interfaces/IBatchReveal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/// @title IBatchReveal\\n/// @author Trader Joe\\n/// @notice Defines the basic interface of BatchReveal\\ninterface IBatchReveal {\\n    struct BatchRevealConfig {\\n        uint256 collectionSize;\\n        int128 intCollectionSize;\\n        /// @notice Size of the batch reveal\\n        /// @dev Must divide collectionSize\\n        uint256 revealBatchSize;\\n        /// @notice Timestamp for the start of the reveal process\\n        /// @dev Can be set to zero for immediate reveal after token mint\\n        uint256 revealStartTime;\\n        /// @notice Time interval for gradual reveal\\n        /// @dev Can be set to zero in order to reveal the collection all at once\\n        uint256 revealInterval;\\n    }\\n\\n    function initialize() external;\\n\\n    function configure(\\n        address _baseLaunchpeg,\\n        uint256 _revealBatchSize,\\n        uint256 _revealStartTime,\\n        uint256 _revealInterval\\n    ) external;\\n\\n    function setRevealBatchSize(\\n        address _baseLaunchpeg,\\n        uint256 _revealBatchSize\\n    ) external;\\n\\n    function setRevealStartTime(\\n        address _baseLaunchpeg,\\n        uint256 _revealStartTime\\n    ) external;\\n\\n    function setRevealInterval(address _baseLaunchpeg, uint256 _revealInterval)\\n        external;\\n\\n    function setVRF(\\n        address _vrfCoordinator,\\n        bytes32 _keyHash,\\n        uint64 _subscriptionId,\\n        uint32 _callbackGasLimit\\n    ) external;\\n\\n    function launchpegToConfig(address)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            int128,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function launchpegToBatchToSeed(address, uint256)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function launchpegToLastTokenReveal(address)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function useVRF() external view returns (bool);\\n\\n    function subscriptionId() external view returns (uint64);\\n\\n    function keyHash() external view returns (bytes32);\\n\\n    function callbackGasLimit() external view returns (uint32);\\n\\n    function requestConfirmations() external view returns (uint16);\\n\\n    function launchpegToNextBatchToReveal(address)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function launchpegToHasBeenForceRevealed(address)\\n        external\\n        view\\n        returns (bool);\\n\\n    function launchpegToVrfRequestedForBatch(address, uint256)\\n        external\\n        view\\n        returns (bool);\\n\\n    function getShuffledTokenId(address _baseLaunchpeg, uint256 _startId)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function isBatchRevealInitialized(address _baseLaunchpeg)\\n        external\\n        view\\n        returns (bool);\\n\\n    function revealNextBatch(address _baseLaunchpeg, uint256 _totalSupply)\\n        external\\n        returns (bool);\\n\\n    function hasBatchToReveal(address _baseLaunchpeg, uint256 _totalSupply)\\n        external\\n        view\\n        returns (bool, uint256);\\n\\n    function forceReveal(address _baseLaunchpeg) external;\\n}\\n\",\"keccak256\":\"0xc3232cf50271c82a2ab5713261f97727592c6be0ae6ce0d70906c6429311baea\",\"license\":\"MIT\"},\"contracts/interfaces/IFlatLaunchpeg.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./IBaseLaunchpeg.sol\\\";\\n\\n/// @title ILaunchpeg\\n/// @author Trader Joe\\n/// @notice Defines the basic interface of FlatLaunchpeg\\ninterface IFlatLaunchpeg is IBaseLaunchpeg {\\n    struct FlatLaunchpegPrices {\\n        uint256 salePrice;\\n        uint256 allowlistPrice;\\n    }\\n\\n    function allowlistPrice() external view returns (uint256);\\n\\n    function salePrice() external view returns (uint256);\\n\\n    function initialize(\\n        string memory _name,\\n        string memory _symbol,\\n        address _projectOwner,\\n        address _royaltyReceiver,\\n        uint256 _maxBatchSize,\\n        uint256 _collectionSize,\\n        uint256 _amountForDevs,\\n        uint256 _amountForAllowlist\\n    ) external;\\n\\n    function initializePhases(\\n        uint256 _allowlistStartTime,\\n        uint256 _publicSaleStartTime,\\n        uint256 _publicSaleEndTime,\\n        uint256 _allowlistPrice,\\n        uint256 _salePrice\\n    ) external;\\n\\n    function setAllowlistStartTime(uint256 _allowlistStartTime) external;\\n\\n    function allowlistMint(uint256 _quantity) external payable;\\n\\n    function publicSaleMint(uint256 _quantity) external payable;\\n}\\n\",\"keccak256\":\"0xb0832d4c4964491d909383baac9d40edba5adcdc1f19a50899eab852a068b456\",\"license\":\"MIT\"},\"contracts/interfaces/ILaunchpeg.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./IBaseLaunchpeg.sol\\\";\\n\\n/// @title ILaunchpeg\\n/// @author Trader Joe\\n/// @notice Defines the basic interface of Launchpeg\\ninterface ILaunchpeg is IBaseLaunchpeg {\\n    function amountForAuction() external view returns (uint256);\\n\\n    function auctionSaleStartTime() external view returns (uint256);\\n\\n    function auctionStartPrice() external view returns (uint256);\\n\\n    function auctionEndPrice() external view returns (uint256);\\n\\n    function auctionSaleDuration() external view returns (uint256);\\n\\n    function auctionDropInterval() external view returns (uint256);\\n\\n    function auctionDropPerStep() external view returns (uint256);\\n\\n    function allowlistDiscountPercent() external view returns (uint256);\\n\\n    function publicSaleDiscountPercent() external view returns (uint256);\\n\\n    function amountMintedDuringAuction() external view returns (uint256);\\n\\n    function lastAuctionPrice() external view returns (uint256);\\n\\n    function initialize(\\n        string memory _name,\\n        string memory _symbol,\\n        address _projectOwner,\\n        address _royaltyReceiver,\\n        uint256 _maxBatchSize,\\n        uint256 _collectionSize,\\n        uint256 _amountForAuction,\\n        uint256 _amountForAllowlist,\\n        uint256 _amountForDevs\\n    ) external;\\n\\n    function initializePhases(\\n        uint256 _auctionSaleStartTime,\\n        uint256 _auctionStartPrice,\\n        uint256 _auctionEndPrice,\\n        uint256 _auctionDropInterval,\\n        uint256 _allowlistStartTime,\\n        uint256 _allowlistDiscountPercent,\\n        uint256 _publicSaleStartTime,\\n        uint256 _publicSaleEndTime,\\n        uint256 _publicSaleDiscountPercent\\n    ) external;\\n\\n    function setAuctionSaleStartTime(uint256 _auctionSaleStartTime) external;\\n\\n    function setAllowlistStartTime(uint256 _allowlistStartTime) external;\\n\\n    function auctionMint(uint256 _quantity) external payable;\\n\\n    function allowlistMint(uint256 _quantity) external payable;\\n\\n    function publicSaleMint(uint256 _quantity) external payable;\\n\\n    function getAuctionPrice(uint256 _saleStartTime)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getAllowlistPrice() external view returns (uint256);\\n\\n    function getPublicSalePrice() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x16c45e909cd4d763d62bb727cc2d39414031cc094c4b1817ad039f9a0e936e16\",\"license\":\"MIT\"},\"contracts/interfaces/ILaunchpegFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/// @title ILaunchpegFactory\\n/// @author Trader Joe\\n/// @notice Defines the basic interface of LaunchpegFactory\\ninterface ILaunchpegFactory {\\n    function launchpegImplementation() external view returns (address);\\n\\n    function flatLaunchpegImplementation() external view returns (address);\\n\\n    function batchReveal() external view returns (address);\\n\\n    function joeFeePercent() external view returns (uint256);\\n\\n    function joeFeeCollector() external view returns (address);\\n\\n    function isLaunchpeg(uint256 _type, address _contract)\\n        external\\n        view\\n        returns (bool);\\n\\n    function allLaunchpegs(uint256 _launchpegType, uint256 _launchpegID)\\n        external\\n        view\\n        returns (address);\\n\\n    function numLaunchpegs(uint256 _launchpegType)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function createLaunchpeg(\\n        string memory _name,\\n        string memory _symbol,\\n        address _projectOwner,\\n        address _royaltyReceiver,\\n        uint256 _maxBatchSize,\\n        uint256 _collectionSize,\\n        uint256 _amountForAuction,\\n        uint256 _amountForAllowlist,\\n        uint256 _amountForDevs\\n    ) external returns (address);\\n\\n    function createFlatLaunchpeg(\\n        string memory _name,\\n        string memory _symbol,\\n        address _projectOwner,\\n        address _royaltyReceiver,\\n        uint256 _maxBatchSize,\\n        uint256 _collectionSize,\\n        uint256 _amountForDevs,\\n        uint256 _amountForAllowlist\\n    ) external returns (address);\\n\\n    function setLaunchpegImplementation(address _launchpegImplementation)\\n        external;\\n\\n    function setFlatLaunchpegImplementation(\\n        address _flatLaunchpegImplementation\\n    ) external;\\n\\n    function setBatchReveal(address _batchReveal) external;\\n\\n    function setDefaultJoeFeePercent(uint256 _joeFeePercent) external;\\n\\n    function setDefaultJoeFeeCollector(address _joeFeeCollector) external;\\n}\\n\",\"keccak256\":\"0x33affdcaa9cbb388ebb0c59253865aa6ade156a2672847d5ec9a9cf315b79e65\",\"license\":\"MIT\"},\"erc721a-upgradeable/contracts/ERC721AUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nerror ApprovalCallerNotOwnerNorApproved();\\nerror ApprovalQueryForNonexistentToken();\\nerror ApproveToCaller();\\nerror ApprovalToCurrentOwner();\\nerror BalanceQueryForZeroAddress();\\nerror MintToZeroAddress();\\nerror MintZeroQuantity();\\nerror OwnerQueryForNonexistentToken();\\nerror TransferCallerNotOwnerNorApproved();\\nerror TransferFromIncorrectOwner();\\nerror TransferToNonERC721ReceiverImplementer();\\nerror TransferToZeroAddress();\\nerror URIQueryForNonexistentToken();\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension. Built to optimize for lower gas during batch mints.\\n *\\n * Assumes serials are sequentially minted starting at _startTokenId() (defaults to 0, e.g. 0, 1, 2, 3..).\\n *\\n * Assumes that an owner cannot have more than 2**64 - 1 (max value of uint64) of supply.\\n *\\n * Assumes that the maximum token id cannot exceed 2**256 - 1 (max value of uint256).\\n */\\ncontract ERC721AUpgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {\\n    using AddressUpgradeable for address;\\n    using StringsUpgradeable for uint256;\\n\\n    // Compiler will pack this into a single 256bit word.\\n    struct TokenOwnership {\\n        // The address of the owner.\\n        address addr;\\n        // Keeps track of the start time of ownership with minimal overhead for tokenomics.\\n        uint64 startTimestamp;\\n        // Whether the token has been burned.\\n        bool burned;\\n    }\\n\\n    // Compiler will pack this into a single 256bit word.\\n    struct AddressData {\\n        // Realistically, 2**64-1 is more than enough.\\n        uint64 balance;\\n        // Keeps track of mint count with minimal overhead for tokenomics.\\n        uint64 numberMinted;\\n        // Keeps track of burn count with minimal overhead for tokenomics.\\n        uint64 numberBurned;\\n        // For miscellaneous variable(s) pertaining to the address\\n        // (e.g. number of whitelist mint slots used).\\n        // If there are multiple variables, please pack them into a uint64.\\n        uint64 aux;\\n    }\\n\\n    // The tokenId of the next token to be minted.\\n    uint256 internal _currentIndex;\\n\\n    // The number of tokens burned.\\n    uint256 internal _burnCounter;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to ownership details\\n    // An empty struct value does not necessarily mean the token is unowned. See _ownershipOf implementation for details.\\n    mapping(uint256 => TokenOwnership) internal _ownerships;\\n\\n    // Mapping owner address to address data\\n    mapping(address => AddressData) private _addressData;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    function __ERC721A_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC721A_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC721A_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _currentIndex = _startTokenId();\\n    }\\n\\n    /**\\n     * To change the starting tokenId, please override this function.\\n     */\\n    function _startTokenId() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev Burned tokens are calculated here, use _totalMinted() if you want to count just minted tokens.\\n     */\\n    function totalSupply() public view returns (uint256) {\\n        // Counter underflow is impossible as _burnCounter cannot be incremented\\n        // more than _currentIndex - _startTokenId() times\\n        unchecked {\\n            return _currentIndex - _burnCounter - _startTokenId();\\n        }\\n    }\\n\\n    /**\\n     * Returns the total amount of tokens minted in the contract.\\n     */\\n    function _totalMinted() internal view returns (uint256) {\\n        // Counter underflow is impossible as _currentIndex does not decrement,\\n        // and it is initialized to _startTokenId()\\n        unchecked {\\n            return _currentIndex - _startTokenId();\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view override returns (uint256) {\\n        if (owner == address(0)) revert BalanceQueryForZeroAddress();\\n        return uint256(_addressData[owner].balance);\\n    }\\n\\n    /**\\n     * Returns the number of tokens minted by `owner`.\\n     */\\n    function _numberMinted(address owner) internal view returns (uint256) {\\n        return uint256(_addressData[owner].numberMinted);\\n    }\\n\\n    /**\\n     * Returns the number of tokens burned by or on behalf of `owner`.\\n     */\\n    function _numberBurned(address owner) internal view returns (uint256) {\\n        return uint256(_addressData[owner].numberBurned);\\n    }\\n\\n    /**\\n     * Returns the auxillary data for `owner`. (e.g. number of whitelist mint slots used).\\n     */\\n    function _getAux(address owner) internal view returns (uint64) {\\n        return _addressData[owner].aux;\\n    }\\n\\n    /**\\n     * Sets the auxillary data for `owner`. (e.g. number of whitelist mint slots used).\\n     * If there are multiple variables, please pack them into a uint64.\\n     */\\n    function _setAux(address owner, uint64 aux) internal {\\n        _addressData[owner].aux = aux;\\n    }\\n\\n    /**\\n     * Gas spent here starts off proportional to the maximum mint batch size.\\n     * It gradually moves to O(1) as tokens get transferred around in the collection over time.\\n     */\\n    function _ownershipOf(uint256 tokenId) internal view returns (TokenOwnership memory) {\\n        uint256 curr = tokenId;\\n\\n        unchecked {\\n            if (_startTokenId() <= curr && curr < _currentIndex) {\\n                TokenOwnership memory ownership = _ownerships[curr];\\n                if (!ownership.burned) {\\n                    if (ownership.addr != address(0)) {\\n                        return ownership;\\n                    }\\n                    // Invariant:\\n                    // There will always be an ownership that has an address and is not burned\\n                    // before an ownership that does not have an address and is not burned.\\n                    // Hence, curr will not underflow.\\n                    while (true) {\\n                        curr--;\\n                        ownership = _ownerships[curr];\\n                        if (ownership.addr != address(0)) {\\n                            return ownership;\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n        revert OwnerQueryForNonexistentToken();\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view override returns (address) {\\n        return _ownershipOf(tokenId).addr;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        if (!_exists(tokenId)) revert URIQueryForNonexistentToken();\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : '';\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return '';\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public override {\\n        address owner = ERC721AUpgradeable.ownerOf(tokenId);\\n        if (to == owner) revert ApprovalToCurrentOwner();\\n\\n        if (_msgSender() != owner && !isApprovedForAll(owner, _msgSender())) {\\n            revert ApprovalCallerNotOwnerNorApproved();\\n        }\\n\\n        _approve(to, tokenId, owner);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view override returns (address) {\\n        if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        if (operator == _msgSender()) revert ApproveToCaller();\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, '');\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        _transfer(from, to, tokenId);\\n        if (to.isContract() && !_checkContractOnERC721Received(from, to, tokenId, _data)) {\\n            revert TransferToNonERC721ReceiverImplementer();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     */\\n    function _exists(uint256 tokenId) internal view returns (bool) {\\n        return _startTokenId() <= tokenId && tokenId < _currentIndex && !_ownerships[tokenId].burned;\\n    }\\n\\n    function _safeMint(address to, uint256 quantity) internal {\\n        _safeMint(to, quantity, '');\\n    }\\n\\n    /**\\n     * @dev Safely mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called for each safe transfer.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 quantity,\\n        bytes memory _data\\n    ) internal {\\n        _mint(to, quantity, _data, true);\\n    }\\n\\n    /**\\n     * @dev Mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 quantity,\\n        bytes memory _data,\\n        bool safe\\n    ) internal {\\n        uint256 startTokenId = _currentIndex;\\n        if (to == address(0)) revert MintToZeroAddress();\\n        if (quantity == 0) revert MintZeroQuantity();\\n\\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\\n\\n        // Overflows are incredibly unrealistic.\\n        // balance or numberMinted overflow if current value of either + quantity > 1.8e19 (2**64) - 1\\n        // updatedIndex overflows if _currentIndex + quantity > 1.2e77 (2**256) - 1\\n        unchecked {\\n            _addressData[to].balance += uint64(quantity);\\n            _addressData[to].numberMinted += uint64(quantity);\\n\\n            _ownerships[startTokenId].addr = to;\\n            _ownerships[startTokenId].startTimestamp = uint64(block.timestamp);\\n\\n            uint256 updatedIndex = startTokenId;\\n            uint256 end = updatedIndex + quantity;\\n\\n            if (safe && to.isContract()) {\\n                do {\\n                    emit Transfer(address(0), to, updatedIndex);\\n                    if (!_checkContractOnERC721Received(address(0), to, updatedIndex++, _data)) {\\n                        revert TransferToNonERC721ReceiverImplementer();\\n                    }\\n                } while (updatedIndex != end);\\n                // Reentrancy protection\\n                if (_currentIndex != startTokenId) revert();\\n            } else {\\n                do {\\n                    emit Transfer(address(0), to, updatedIndex++);\\n                } while (updatedIndex != end);\\n            }\\n            _currentIndex = updatedIndex;\\n        }\\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) private {\\n        TokenOwnership memory prevOwnership = _ownershipOf(tokenId);\\n\\n        if (prevOwnership.addr != from) revert TransferFromIncorrectOwner();\\n\\n        bool isApprovedOrOwner = (_msgSender() == from ||\\n            isApprovedForAll(from, _msgSender()) ||\\n            getApproved(tokenId) == _msgSender());\\n\\n        if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();\\n        if (to == address(0)) revert TransferToZeroAddress();\\n\\n        _beforeTokenTransfers(from, to, tokenId, 1);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId, from);\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        // Counter overflow is incredibly unrealistic as tokenId would have to be 2**256.\\n        unchecked {\\n            _addressData[from].balance -= 1;\\n            _addressData[to].balance += 1;\\n\\n            TokenOwnership storage currSlot = _ownerships[tokenId];\\n            currSlot.addr = to;\\n            currSlot.startTimestamp = uint64(block.timestamp);\\n\\n            // If the ownership slot of tokenId+1 is not explicitly set, that means the transfer initiator owns it.\\n            // Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\\n            uint256 nextTokenId = tokenId + 1;\\n            TokenOwnership storage nextSlot = _ownerships[nextTokenId];\\n            if (nextSlot.addr == address(0)) {\\n                // This will suffice for checking _exists(nextTokenId),\\n                // as a burned slot cannot contain the zero address.\\n                if (nextTokenId != _currentIndex) {\\n                    nextSlot.addr = from;\\n                    nextSlot.startTimestamp = prevOwnership.startTimestamp;\\n                }\\n            }\\n        }\\n\\n        emit Transfer(from, to, tokenId);\\n        _afterTokenTransfers(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev This is equivalent to _burn(tokenId, false)\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        _burn(tokenId, false);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId, bool approvalCheck) internal virtual {\\n        TokenOwnership memory prevOwnership = _ownershipOf(tokenId);\\n\\n        address from = prevOwnership.addr;\\n\\n        if (approvalCheck) {\\n            bool isApprovedOrOwner = (_msgSender() == from ||\\n                isApprovedForAll(from, _msgSender()) ||\\n                getApproved(tokenId) == _msgSender());\\n\\n            if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();\\n        }\\n\\n        _beforeTokenTransfers(from, address(0), tokenId, 1);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId, from);\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        // Counter overflow is incredibly unrealistic as tokenId would have to be 2**256.\\n        unchecked {\\n            AddressData storage addressData = _addressData[from];\\n            addressData.balance -= 1;\\n            addressData.numberBurned += 1;\\n\\n            // Keep track of who burned the token, and the timestamp of burning.\\n            TokenOwnership storage currSlot = _ownerships[tokenId];\\n            currSlot.addr = from;\\n            currSlot.startTimestamp = uint64(block.timestamp);\\n            currSlot.burned = true;\\n\\n            // If the ownership slot of tokenId+1 is not explicitly set, that means the burn initiator owns it.\\n            // Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\\n            uint256 nextTokenId = tokenId + 1;\\n            TokenOwnership storage nextSlot = _ownerships[nextTokenId];\\n            if (nextSlot.addr == address(0)) {\\n                // This will suffice for checking _exists(nextTokenId),\\n                // as a burned slot cannot contain the zero address.\\n                if (nextTokenId != _currentIndex) {\\n                    nextSlot.addr = from;\\n                    nextSlot.startTimestamp = prevOwnership.startTimestamp;\\n                }\\n            }\\n        }\\n\\n        emit Transfer(from, address(0), tokenId);\\n        _afterTokenTransfers(from, address(0), tokenId, 1);\\n\\n        // Overflow not possible, as _burnCounter cannot be exceed _currentIndex times.\\n        unchecked {\\n            _burnCounter++;\\n        }\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(\\n        address to,\\n        uint256 tokenId,\\n        address owner\\n    ) private {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(owner, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkContractOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n            return retval == IERC721ReceiverUpgradeable(to).onERC721Received.selector;\\n        } catch (bytes memory reason) {\\n            if (reason.length == 0) {\\n                revert TransferToNonERC721ReceiverImplementer();\\n            } else {\\n                assembly {\\n                    revert(add(32, reason), mload(reason))\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before a set of serially-ordered token ids are about to be transferred. This includes minting.\\n     * And also called before burning one token.\\n     *\\n     * startTokenId - the first token id to be transferred\\n     * quantity - the amount to be transferred\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, `tokenId` will be burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _beforeTokenTransfers(\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after a set of serially-ordered token ids have been transferred. This includes\\n     * minting.\\n     * And also called after one token has been burned.\\n     *\\n     * startTokenId - the first token id to be transferred\\n     * quantity - the amount to be transferred\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` has been\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` has been minted for `to`.\\n     * - When `to` is zero, `tokenId` has been burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _afterTokenTransfers(\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[42] private __gap;\\n}\\n\",\"keccak256\":\"0x261da8ec505b55cf307604eefd0f0e6e374860ca4730efad50b87e43f7660b66\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101006040523480156200001257600080fd5b506040516200255338038062002553833981016040819052620000359162000087565b63fa14a12960e01b608052636837c8e760e11b60a0526001600160601b0319606092831b811660c052911b1660e052620000bf565b80516001600160a01b03811681146200008257600080fd5b919050565b600080604083850312156200009b57600080fd5b620000a6836200006a565b9150620000b6602084016200006a565b90509250929050565b60805160e01c60e01b60a05160e01c60e01b60c05160601c60e05160601c61242062000133600039600081816087015281816109870152610a43015260008181610152015281816101dc01526102ff01526000818161010b01526104be01526000818160cb015261040d01526124206000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063913418921161005b578063913418921461012d57806395d2a8441461014d578063a6a7b3ea14610174578063d0b54b3b1461019457600080fd5b806321cc1611146100825780637c50ba7a146100c65780637d4510a714610106575b600080fd5b6100a97f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b6100ed7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160e01b031990911681526020016100bd565b6100ed7f000000000000000000000000000000000000000000000000000000000000000081565b61014061013b366004611f62565b6101b4565b6040516100bd9190612295565b6100a97f000000000000000000000000000000000000000000000000000000000000000081565b610187610182366004611d90565b6103f5565b6040516100bd91906122f7565b6101a76101a2366004611dd1565b61055c565b6040516100bd9190612305565b604051631ddbc6c760e21b815260ff8516600482015260609081906000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063776f1b1c9060240160206040518083038186803b15801561021e57600080fd5b505afa158015610232573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102569190611efa565b905060008186116102675785610269565b815b905060008188116102835761027e8883612318565b610286565b60005b90506102928183612318565b67ffffffffffffffff8111156102aa576102aa6123bc565b6040519080825280602002602001820160405280156102e357816020015b6102d0611bc5565b8152602001906001900390816102c85790505b50935060005b84518110156103e7576103b76001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663306ec7488c84610331600189612318565b61033b9190612318565b6040516001600160e01b031960e085901b16815260ff9092166004830152602482015260440160206040518083038186803b15801561037957600080fd5b505afa15801561038d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103b19190611db4565b8861055c565b8582815181106103c9576103c96123a6565b602002602001018190525080806103df9061235f565b9150506102e9565b509298975050505050505050565b6040516301ffc9a760e01b81526001600160e01b03197f00000000000000000000000000000000000000000000000000000000000000001660048201526000906001600160a01b038316906301ffc9a79060240160206040518083038186803b15801561046157600080fd5b505afa158015610475573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104999190611e0a565b156104a657506001919050565b6040516301ffc9a760e01b81526001600160e01b03197f00000000000000000000000000000000000000000000000000000000000000001660048201526001600160a01b038316906301ffc9a79060240160206040518083038186803b15801561050f57600080fd5b505afa158015610523573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105479190611e0a565b1561055457506002919050565b506000919050565b610564611bc5565b61056c611bc5565b6001600160a01b0384168152610581846103f5565b8160200190600281111561059757610597612390565b908160028111156105aa576105aa612390565b9052506000816020015160028111156105c5576105c5612390565b14156105e457604051630ca92ff360e31b815260040160405180910390fd5b836001600160a01b03166306fdde036040518163ffffffff1660e01b815260040160006040518083038186803b15801561061d57600080fd5b505afa158015610631573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526106599190810190611e4d565b816040015160000181905250836001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b15801561069e57600080fd5b505afa1580156106b2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526106da9190810190611e4d565b816040015160200181905250836001600160a01b03166345c0f5336040518163ffffffff1660e01b815260040160206040518083038186803b15801561071f57600080fd5b505afa158015610733573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107579190611efa565b81604001516040018181525050836001600160a01b0316632913daa06040518163ffffffff1660e01b815260040160206040518083038186803b15801561079d57600080fd5b505afa1580156107b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107d59190611efa565b81604001516060018181525050836001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561081b57600080fd5b505afa15801561082f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108539190611efa565b81604001516080018181525050836001600160a01b0316637035bf186040518163ffffffff1660e01b815260040160006040518083038186803b15801561089957600080fd5b505afa1580156108ad573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526108d59190810190611e4d565b816040015160a00181905250836001600160a01b0316636c0360eb6040518163ffffffff1660e01b815260040160006040518083038186803b15801561091a57600080fd5b505afa15801561092e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109569190810190611e4d565b60408281015160c0019190915251630303a4b160e31b81526001600160a01b038581166004830152600091829182917f00000000000000000000000000000000000000000000000000000000000000009091169063181d25889060240160a06040518083038186803b1580156109cb57600080fd5b505afa1580156109df573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a039190611f13565b60a08901805184905280516040908101849052905160600182905251635e1578db60e11b81526001600160a01b038d8116600483015293985091965094507f0000000000000000000000000000000000000000000000000000000000000000909116925063bc2af1b6915060240160206040518083038186803b158015610a8957600080fd5b505afa158015610a9d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ac19190611efa565b60a085015160200152600184602001516002811115610ae257610ae2612390565b141561157b57866001600160a01b031663f7df4c5a6040518163ffffffff1660e01b815260040160206040518083038186803b158015610b2157600080fd5b505afa158015610b35573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b599190611efa565b84606001516000018181525050866001600160a01b031663d62b63036040518163ffffffff1660e01b815260040160206040518083038186803b158015610b9f57600080fd5b505afa158015610bb3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bd79190611efa565b84606001516020018181525050866001600160a01b031663fbe1aa516040518163ffffffff1660e01b815260040160206040518083038186803b158015610c1d57600080fd5b505afa158015610c31573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c559190611efa565b84606001516040018181525050866001600160a01b031663fab2bf586040518163ffffffff1660e01b815260040160206040518083038186803b158015610c9b57600080fd5b505afa158015610caf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cd39190611efa565b84606001516060018181525050866001600160a01b03166359d7bc4d6040518163ffffffff1660e01b815260040160206040518083038186803b158015610d1957600080fd5b505afa158015610d2d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d519190611efa565b84606001516080018181525050866001600160a01b0316636bb7b1d96040518163ffffffff1660e01b815260040160206040518083038186803b158015610d9757600080fd5b505afa158015610dab573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dcf9190611efa565b846060015160a0018181525050866001600160a01b031663d756985b6040518163ffffffff1660e01b815260040160206040518083038186803b158015610e1557600080fd5b505afa158015610e29573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e4d9190611efa565b846060015160c0018181525050866001600160a01b031663a04a6ac86040518163ffffffff1660e01b815260040160206040518083038186803b158015610e9357600080fd5b505afa158015610ea7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ecb9190611efa565b846060015160e0018181525050866001600160a01b0316630a212ee26040518163ffffffff1660e01b815260040160206040518083038186803b158015610f1157600080fd5b505afa158015610f25573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f499190611efa565b8460600151610100018181525050866001600160a01b031663f243669b6040518163ffffffff1660e01b815260040160206040518083038186803b158015610f9057600080fd5b505afa158015610fa4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fc89190611efa565b8460600151610120018181525050866001600160a01b031663e6fe34b36040518163ffffffff1660e01b815260040160206040518083038186803b15801561100f57600080fd5b505afa158015611023573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110479190611efa565b8460600151610140018181525050866001600160a01b031663154895106040518163ffffffff1660e01b815260040160206040518083038186803b15801561108e57600080fd5b505afa1580156110a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110c69190611efa565b8460600151610160018181525050866001600160a01b03166308a3fb4e6040518163ffffffff1660e01b815260040160206040518083038186803b15801561110d57600080fd5b505afa158015611121573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111459190611efa565b8460600151610180018181525050866001600160a01b031663055ad42e6040518163ffffffff1660e01b815260040160206040518083038186803b15801561118c57600080fd5b505afa1580156111a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111c49190611e2c565b84606001516101a0019060048111156111df576111df612390565b908160048111156111f2576111f2612390565b90525060608481015101516040516348be804f60e11b815260048101919091526001600160a01b0388169063917d009e9060240160206040518083038186803b15801561123e57600080fd5b505afa158015611252573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112769190611efa565b84606001516101c0018181525050866001600160a01b0316630b1019e76040518163ffffffff1660e01b815260040160206040518083038186803b1580156112bd57600080fd5b505afa1580156112d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112f59190611efa565b84606001516101e0018181525050866001600160a01b0316638e8bdd0d6040518163ffffffff1660e01b815260040160206040518083038186803b15801561133c57600080fd5b505afa158015611350573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113749190611efa565b8460600151610200018181525050866001600160a01b031663a54cd7dc6040518163ffffffff1660e01b815260040160206040518083038186803b1580156113bb57600080fd5b505afa1580156113cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113f39190611efa565b8460600151610220018181525050866001600160a01b0316637a18c1fe6040518163ffffffff1660e01b815260040160206040518083038186803b15801561143a57600080fd5b505afa15801561144e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114729190611efa565b8460600151610240018181525050866001600160a01b0316633cc4cadb6040518163ffffffff1660e01b815260040160206040518083038186803b1580156114b957600080fd5b505afa1580156114cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114f19190611efa565b8460600151610260018181525050866001600160a01b031663963331d86040518163ffffffff1660e01b815260040160206040518083038186803b15801561153857600080fd5b505afa15801561154c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115709190611efa565b606085015161028001525b60028460200151600281111561159357611593612390565b1415611a2557866001600160a01b031663055ad42e6040518163ffffffff1660e01b815260040160206040518083038186803b1580156115d257600080fd5b505afa1580156115e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061160a9190611e2c565b608085015190600481111561162157611621612390565b9081600481111561163457611634612390565b81525050866001600160a01b03166390967a526040518163ffffffff1660e01b815260040160206040518083038186803b15801561167157600080fd5b505afa158015611685573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116a99190611efa565b846080015160a0018181525050866001600160a01b031663f51f96dd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156116ef57600080fd5b505afa158015611703573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117279190611efa565b846080015160c0018181525050866001600160a01b0316633cc4cadb6040518163ffffffff1660e01b815260040160206040518083038186803b15801561176d57600080fd5b505afa158015611781573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117a59190611efa565b846080015160e0018181525050866001600160a01b031663963331d86040518163ffffffff1660e01b815260040160206040518083038186803b1580156117eb57600080fd5b505afa1580156117ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118239190611efa565b8460800151610100018181525050866001600160a01b031663d62b63036040518163ffffffff1660e01b815260040160206040518083038186803b15801561186a57600080fd5b505afa15801561187e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118a29190611efa565b84608001516020018181525050866001600160a01b031663fbe1aa516040518163ffffffff1660e01b815260040160206040518083038186803b1580156118e857600080fd5b505afa1580156118fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119209190611efa565b84608001516040018181525050866001600160a01b03166359d7bc4d6040518163ffffffff1660e01b815260040160206040518083038186803b15801561196657600080fd5b505afa15801561197a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061199e9190611efa565b84608001516060018181525050866001600160a01b0316636bb7b1d96040518163ffffffff1660e01b815260040160206040518083038186803b1580156119e457600080fd5b505afa1580156119f8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a1c9190611efa565b60808086015101525b6001600160a01b03861615611bb8576040516370a0823160e01b81526001600160a01b0387811660048301528816906370a082319060240160206040518083038186803b158015611a7557600080fd5b505afa158015611a89573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aad9190611efa565b60c08501515260405163dc33e68160e01b81526001600160a01b03878116600483015288169063dc33e6819060240160206040518083038186803b158015611af457600080fd5b505afa158015611b08573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b2c9190611efa565b60c08501516020015260405163a7cd52cb60e01b81526001600160a01b03878116600483015288169063a7cd52cb9060240160206040518083038186803b158015611b7657600080fd5b505afa158015611b8a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bae9190611efa565b60c0850151604001525b5091925050505b92915050565b6040805160e08101909152600080825260208201908152602001611c1f6040518060e00160405280606081526020016060815260200160008152602001600081526020016000815260200160608152602001606081525090565b8152602001611c2c611cdf565b8152602001611c81604080516101208101909152806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b8152602001611cb16040518060800160405280600081526020016000815260200160008152602001600081525090565b8152602001611cda60405180606001604052806000815260200160008152602001600081525090565b905290565b604051806102a001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160006004811115611d5957611d59612390565b8152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b600060208284031215611da257600080fd5b8135611dad816123d2565b9392505050565b600060208284031215611dc657600080fd5b8151611dad816123d2565b60008060408385031215611de457600080fd5b8235611def816123d2565b91506020830135611dff816123d2565b809150509250929050565b600060208284031215611e1c57600080fd5b81518015158114611dad57600080fd5b600060208284031215611e3e57600080fd5b815160058110611dad57600080fd5b600060208284031215611e5f57600080fd5b815167ffffffffffffffff80821115611e7757600080fd5b818401915084601f830112611e8b57600080fd5b815181811115611e9d57611e9d6123bc565b604051601f8201601f19908116603f01168101908382118183101715611ec557611ec56123bc565b81604052828152876020848701011115611ede57600080fd5b611eef83602083016020880161232f565b979650505050505050565b600060208284031215611f0c57600080fd5b5051919050565b600080600080600060a08688031215611f2b57600080fd5b85519450602086015180600f0b8114611f4357600080fd5b6040870151606088015160809098015196999198509695945092505050565b60008060008060808587031215611f7857600080fd5b843560ff81168114611f8957600080fd5b935060208501359250604085013591506060850135611fa7816123d2565b939692955090935050565b60038110611fc257611fc2612390565b9052565b60058110611fc257611fc2612390565b60008151808452611fee81602086016020860161232f565b601f01601f19169290920160200192915050565b61200d828251611fc6565b6020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e08301526101008082015181840152505050565b805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e08301526101008082015181840152506101208082015181840152506101408082015181840152506101608082015181840152506101808082015181840152506101a0808201516120fc82850182611fc6565b50506101c081810151908301526101e08082015190830152610200808201519083015261022080820151908301526102408082015190830152610260808201519083015261028090810151910152565b600061050060018060a01b038351168452602083015161216f6020860182611fb2565b506040830151816040860152805160e0838701526121916105e0870182611fd6565b92505060208101516104ff1980878503016105208801526121b28483611fd6565b935060408301516105408801526060830151610560880152608083015161058088015260a0830151915080878503016105a08801526121f18483611fd6565b935060c0830151925080878503016105c088015250506122118282611fd6565b91505060608301516122266060860182612063565b50608083015161223a610300860182612002565b5060a083015180516104208601526020810151610440860152604081015161046086015260608101516104808601525060c083015180516104a086015260208101516104c086015260408101516104e0860152509392505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b828110156122ea57603f198886030184526122d885835161214c565b945092850192908501906001016122bc565b5092979650505050505050565b60208101611bbf8284611fb2565b602081526000611dad602083018461214c565b60008282101561232a5761232a61237a565b500390565b60005b8381101561234a578181015183820152602001612332565b83811115612359576000848401525b50505050565b60006000198214156123735761237361237a565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146123e757600080fd5b5056fea2646970667358221220c761b0e5d5f08aa9ad14d1d75ec4484f5ee2632d5bb6d021ba77baa3e6b8512264736f6c63430008060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061007d5760003560e01c8063913418921161005b578063913418921461012d57806395d2a8441461014d578063a6a7b3ea14610174578063d0b54b3b1461019457600080fd5b806321cc1611146100825780637c50ba7a146100c65780637d4510a714610106575b600080fd5b6100a97f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b6100ed7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160e01b031990911681526020016100bd565b6100ed7f000000000000000000000000000000000000000000000000000000000000000081565b61014061013b366004611f62565b6101b4565b6040516100bd9190612295565b6100a97f000000000000000000000000000000000000000000000000000000000000000081565b610187610182366004611d90565b6103f5565b6040516100bd91906122f7565b6101a76101a2366004611dd1565b61055c565b6040516100bd9190612305565b604051631ddbc6c760e21b815260ff8516600482015260609081906000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063776f1b1c9060240160206040518083038186803b15801561021e57600080fd5b505afa158015610232573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102569190611efa565b905060008186116102675785610269565b815b905060008188116102835761027e8883612318565b610286565b60005b90506102928183612318565b67ffffffffffffffff8111156102aa576102aa6123bc565b6040519080825280602002602001820160405280156102e357816020015b6102d0611bc5565b8152602001906001900390816102c85790505b50935060005b84518110156103e7576103b76001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663306ec7488c84610331600189612318565b61033b9190612318565b6040516001600160e01b031960e085901b16815260ff9092166004830152602482015260440160206040518083038186803b15801561037957600080fd5b505afa15801561038d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103b19190611db4565b8861055c565b8582815181106103c9576103c96123a6565b602002602001018190525080806103df9061235f565b9150506102e9565b509298975050505050505050565b6040516301ffc9a760e01b81526001600160e01b03197f00000000000000000000000000000000000000000000000000000000000000001660048201526000906001600160a01b038316906301ffc9a79060240160206040518083038186803b15801561046157600080fd5b505afa158015610475573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104999190611e0a565b156104a657506001919050565b6040516301ffc9a760e01b81526001600160e01b03197f00000000000000000000000000000000000000000000000000000000000000001660048201526001600160a01b038316906301ffc9a79060240160206040518083038186803b15801561050f57600080fd5b505afa158015610523573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105479190611e0a565b1561055457506002919050565b506000919050565b610564611bc5565b61056c611bc5565b6001600160a01b0384168152610581846103f5565b8160200190600281111561059757610597612390565b908160028111156105aa576105aa612390565b9052506000816020015160028111156105c5576105c5612390565b14156105e457604051630ca92ff360e31b815260040160405180910390fd5b836001600160a01b03166306fdde036040518163ffffffff1660e01b815260040160006040518083038186803b15801561061d57600080fd5b505afa158015610631573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526106599190810190611e4d565b816040015160000181905250836001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b15801561069e57600080fd5b505afa1580156106b2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526106da9190810190611e4d565b816040015160200181905250836001600160a01b03166345c0f5336040518163ffffffff1660e01b815260040160206040518083038186803b15801561071f57600080fd5b505afa158015610733573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107579190611efa565b81604001516040018181525050836001600160a01b0316632913daa06040518163ffffffff1660e01b815260040160206040518083038186803b15801561079d57600080fd5b505afa1580156107b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107d59190611efa565b81604001516060018181525050836001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561081b57600080fd5b505afa15801561082f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108539190611efa565b81604001516080018181525050836001600160a01b0316637035bf186040518163ffffffff1660e01b815260040160006040518083038186803b15801561089957600080fd5b505afa1580156108ad573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526108d59190810190611e4d565b816040015160a00181905250836001600160a01b0316636c0360eb6040518163ffffffff1660e01b815260040160006040518083038186803b15801561091a57600080fd5b505afa15801561092e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109569190810190611e4d565b60408281015160c0019190915251630303a4b160e31b81526001600160a01b038581166004830152600091829182917f00000000000000000000000000000000000000000000000000000000000000009091169063181d25889060240160a06040518083038186803b1580156109cb57600080fd5b505afa1580156109df573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a039190611f13565b60a08901805184905280516040908101849052905160600182905251635e1578db60e11b81526001600160a01b038d8116600483015293985091965094507f0000000000000000000000000000000000000000000000000000000000000000909116925063bc2af1b6915060240160206040518083038186803b158015610a8957600080fd5b505afa158015610a9d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ac19190611efa565b60a085015160200152600184602001516002811115610ae257610ae2612390565b141561157b57866001600160a01b031663f7df4c5a6040518163ffffffff1660e01b815260040160206040518083038186803b158015610b2157600080fd5b505afa158015610b35573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b599190611efa565b84606001516000018181525050866001600160a01b031663d62b63036040518163ffffffff1660e01b815260040160206040518083038186803b158015610b9f57600080fd5b505afa158015610bb3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bd79190611efa565b84606001516020018181525050866001600160a01b031663fbe1aa516040518163ffffffff1660e01b815260040160206040518083038186803b158015610c1d57600080fd5b505afa158015610c31573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c559190611efa565b84606001516040018181525050866001600160a01b031663fab2bf586040518163ffffffff1660e01b815260040160206040518083038186803b158015610c9b57600080fd5b505afa158015610caf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cd39190611efa565b84606001516060018181525050866001600160a01b03166359d7bc4d6040518163ffffffff1660e01b815260040160206040518083038186803b158015610d1957600080fd5b505afa158015610d2d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d519190611efa565b84606001516080018181525050866001600160a01b0316636bb7b1d96040518163ffffffff1660e01b815260040160206040518083038186803b158015610d9757600080fd5b505afa158015610dab573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dcf9190611efa565b846060015160a0018181525050866001600160a01b031663d756985b6040518163ffffffff1660e01b815260040160206040518083038186803b158015610e1557600080fd5b505afa158015610e29573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e4d9190611efa565b846060015160c0018181525050866001600160a01b031663a04a6ac86040518163ffffffff1660e01b815260040160206040518083038186803b158015610e9357600080fd5b505afa158015610ea7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ecb9190611efa565b846060015160e0018181525050866001600160a01b0316630a212ee26040518163ffffffff1660e01b815260040160206040518083038186803b158015610f1157600080fd5b505afa158015610f25573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f499190611efa565b8460600151610100018181525050866001600160a01b031663f243669b6040518163ffffffff1660e01b815260040160206040518083038186803b158015610f9057600080fd5b505afa158015610fa4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fc89190611efa565b8460600151610120018181525050866001600160a01b031663e6fe34b36040518163ffffffff1660e01b815260040160206040518083038186803b15801561100f57600080fd5b505afa158015611023573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110479190611efa565b8460600151610140018181525050866001600160a01b031663154895106040518163ffffffff1660e01b815260040160206040518083038186803b15801561108e57600080fd5b505afa1580156110a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110c69190611efa565b8460600151610160018181525050866001600160a01b03166308a3fb4e6040518163ffffffff1660e01b815260040160206040518083038186803b15801561110d57600080fd5b505afa158015611121573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111459190611efa565b8460600151610180018181525050866001600160a01b031663055ad42e6040518163ffffffff1660e01b815260040160206040518083038186803b15801561118c57600080fd5b505afa1580156111a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111c49190611e2c565b84606001516101a0019060048111156111df576111df612390565b908160048111156111f2576111f2612390565b90525060608481015101516040516348be804f60e11b815260048101919091526001600160a01b0388169063917d009e9060240160206040518083038186803b15801561123e57600080fd5b505afa158015611252573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112769190611efa565b84606001516101c0018181525050866001600160a01b0316630b1019e76040518163ffffffff1660e01b815260040160206040518083038186803b1580156112bd57600080fd5b505afa1580156112d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112f59190611efa565b84606001516101e0018181525050866001600160a01b0316638e8bdd0d6040518163ffffffff1660e01b815260040160206040518083038186803b15801561133c57600080fd5b505afa158015611350573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113749190611efa565b8460600151610200018181525050866001600160a01b031663a54cd7dc6040518163ffffffff1660e01b815260040160206040518083038186803b1580156113bb57600080fd5b505afa1580156113cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113f39190611efa565b8460600151610220018181525050866001600160a01b0316637a18c1fe6040518163ffffffff1660e01b815260040160206040518083038186803b15801561143a57600080fd5b505afa15801561144e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114729190611efa565b8460600151610240018181525050866001600160a01b0316633cc4cadb6040518163ffffffff1660e01b815260040160206040518083038186803b1580156114b957600080fd5b505afa1580156114cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114f19190611efa565b8460600151610260018181525050866001600160a01b031663963331d86040518163ffffffff1660e01b815260040160206040518083038186803b15801561153857600080fd5b505afa15801561154c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115709190611efa565b606085015161028001525b60028460200151600281111561159357611593612390565b1415611a2557866001600160a01b031663055ad42e6040518163ffffffff1660e01b815260040160206040518083038186803b1580156115d257600080fd5b505afa1580156115e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061160a9190611e2c565b608085015190600481111561162157611621612390565b9081600481111561163457611634612390565b81525050866001600160a01b03166390967a526040518163ffffffff1660e01b815260040160206040518083038186803b15801561167157600080fd5b505afa158015611685573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116a99190611efa565b846080015160a0018181525050866001600160a01b031663f51f96dd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156116ef57600080fd5b505afa158015611703573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117279190611efa565b846080015160c0018181525050866001600160a01b0316633cc4cadb6040518163ffffffff1660e01b815260040160206040518083038186803b15801561176d57600080fd5b505afa158015611781573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117a59190611efa565b846080015160e0018181525050866001600160a01b031663963331d86040518163ffffffff1660e01b815260040160206040518083038186803b1580156117eb57600080fd5b505afa1580156117ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118239190611efa565b8460800151610100018181525050866001600160a01b031663d62b63036040518163ffffffff1660e01b815260040160206040518083038186803b15801561186a57600080fd5b505afa15801561187e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118a29190611efa565b84608001516020018181525050866001600160a01b031663fbe1aa516040518163ffffffff1660e01b815260040160206040518083038186803b1580156118e857600080fd5b505afa1580156118fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119209190611efa565b84608001516040018181525050866001600160a01b03166359d7bc4d6040518163ffffffff1660e01b815260040160206040518083038186803b15801561196657600080fd5b505afa15801561197a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061199e9190611efa565b84608001516060018181525050866001600160a01b0316636bb7b1d96040518163ffffffff1660e01b815260040160206040518083038186803b1580156119e457600080fd5b505afa1580156119f8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a1c9190611efa565b60808086015101525b6001600160a01b03861615611bb8576040516370a0823160e01b81526001600160a01b0387811660048301528816906370a082319060240160206040518083038186803b158015611a7557600080fd5b505afa158015611a89573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aad9190611efa565b60c08501515260405163dc33e68160e01b81526001600160a01b03878116600483015288169063dc33e6819060240160206040518083038186803b158015611af457600080fd5b505afa158015611b08573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b2c9190611efa565b60c08501516020015260405163a7cd52cb60e01b81526001600160a01b03878116600483015288169063a7cd52cb9060240160206040518083038186803b158015611b7657600080fd5b505afa158015611b8a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bae9190611efa565b60c0850151604001525b5091925050505b92915050565b6040805160e08101909152600080825260208201908152602001611c1f6040518060e00160405280606081526020016060815260200160008152602001600081526020016000815260200160608152602001606081525090565b8152602001611c2c611cdf565b8152602001611c81604080516101208101909152806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b8152602001611cb16040518060800160405280600081526020016000815260200160008152602001600081525090565b8152602001611cda60405180606001604052806000815260200160008152602001600081525090565b905290565b604051806102a001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160006004811115611d5957611d59612390565b8152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b600060208284031215611da257600080fd5b8135611dad816123d2565b9392505050565b600060208284031215611dc657600080fd5b8151611dad816123d2565b60008060408385031215611de457600080fd5b8235611def816123d2565b91506020830135611dff816123d2565b809150509250929050565b600060208284031215611e1c57600080fd5b81518015158114611dad57600080fd5b600060208284031215611e3e57600080fd5b815160058110611dad57600080fd5b600060208284031215611e5f57600080fd5b815167ffffffffffffffff80821115611e7757600080fd5b818401915084601f830112611e8b57600080fd5b815181811115611e9d57611e9d6123bc565b604051601f8201601f19908116603f01168101908382118183101715611ec557611ec56123bc565b81604052828152876020848701011115611ede57600080fd5b611eef83602083016020880161232f565b979650505050505050565b600060208284031215611f0c57600080fd5b5051919050565b600080600080600060a08688031215611f2b57600080fd5b85519450602086015180600f0b8114611f4357600080fd5b6040870151606088015160809098015196999198509695945092505050565b60008060008060808587031215611f7857600080fd5b843560ff81168114611f8957600080fd5b935060208501359250604085013591506060850135611fa7816123d2565b939692955090935050565b60038110611fc257611fc2612390565b9052565b60058110611fc257611fc2612390565b60008151808452611fee81602086016020860161232f565b601f01601f19169290920160200192915050565b61200d828251611fc6565b6020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e08301526101008082015181840152505050565b805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e08301526101008082015181840152506101208082015181840152506101408082015181840152506101608082015181840152506101808082015181840152506101a0808201516120fc82850182611fc6565b50506101c081810151908301526101e08082015190830152610200808201519083015261022080820151908301526102408082015190830152610260808201519083015261028090810151910152565b600061050060018060a01b038351168452602083015161216f6020860182611fb2565b506040830151816040860152805160e0838701526121916105e0870182611fd6565b92505060208101516104ff1980878503016105208801526121b28483611fd6565b935060408301516105408801526060830151610560880152608083015161058088015260a0830151915080878503016105a08801526121f18483611fd6565b935060c0830151925080878503016105c088015250506122118282611fd6565b91505060608301516122266060860182612063565b50608083015161223a610300860182612002565b5060a083015180516104208601526020810151610440860152604081015161046086015260608101516104808601525060c083015180516104a086015260208101516104c086015260408101516104e0860152509392505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b828110156122ea57603f198886030184526122d885835161214c565b945092850192908501906001016122bc565b5092979650505050505050565b60208101611bbf8284611fb2565b602081526000611dad602083018461214c565b60008282101561232a5761232a61237a565b500390565b60005b8381101561234a578181015183820152602001612332565b83811115612359576000848401525b50505050565b60006000198214156123735761237361237a565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146123e757600080fd5b5056fea2646970667358221220c761b0e5d5f08aa9ad14d1d75ec4484f5ee2632d5bb6d021ba77baa3e6b8512264736f6c63430008060033",
  "devdoc": {
    "author": "Trader Joe",
    "kind": "dev",
    "methods": {
      "constructor": {
        "details": "LaunchpegLens constructor",
        "params": {
          "_batchReveal": "BatchReveal address",
          "_launchpegFactory": "LaunchpegFactory address"
        }
      },
      "getAllLaunchpegsFromType(uint8,uint256,uint256,address)": {
        "params": {
          "_limit": "Last Launchpeg index to fetch",
          "_number": "Number of Launchpeg to fetch",
          "_type": "Type of Launchpeg to consider",
          "_user": "Address to consider for NFT balances and allowlist allocations"
        },
        "returns": {
          "_0": "LensDataList List of contracts datas, in descending order"
        }
      },
      "getLaunchpegData(address,address)": {
        "params": {
          "_launchpeg": "Contract address to consider",
          "_user": "Address to consider for NFT balances and allowlist allocations"
        },
        "returns": {
          "_0": "LensData Contract data"
        }
      },
      "getLaunchpegType(address)": {
        "params": {
          "_contract": "Contract address to consider"
        },
        "returns": {
          "_0": "LaunchpegType Type of Launchpeg implementation (Dutch Auction / Flat / Unknown)"
        }
      }
    },
    "title": "Launchpeg Lens",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "batchReveal()": {
        "notice": "BatchReveal address"
      },
      "flatLaunchpegInterface()": {
        "notice": "IFlatLaunchpegInterface identifier"
      },
      "getAllLaunchpegsFromType(uint8,uint256,uint256,address)": {
        "notice": "Fetch Launchpeg data"
      },
      "getLaunchpegData(address,address)": {
        "notice": "Fetch Launchpeg data from the provided address"
      },
      "getLaunchpegType(address)": {
        "notice": "Gets the type of Launchpeg"
      },
      "launchpegFactory()": {
        "notice": "LaunchpegFactory address"
      },
      "launchpegInterface()": {
        "notice": "ILaunchpegInterface identifier"
      }
    },
    "notice": "Helper contract to fetch launchpegs data",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}