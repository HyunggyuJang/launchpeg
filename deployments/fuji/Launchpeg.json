{
  "address": "0x4653bf053D6a2F9dA671d91d2A2E3b3C08A15705",
  "abi": [
    {
      "inputs": [],
      "name": "ApprovalCallerNotOwnerNorApproved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ApprovalQueryForNonexistentToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ApprovalToCurrentOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ApproveToCaller",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BalanceQueryForZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Launchpeg__AllowlistBeforePreMint",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Launchpeg__BatchRevealDisabled",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Launchpeg__CanNotMintThisMany",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Launchpeg__EndPriceGreaterThanStartPrice",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Launchpeg__InvalidAuctionDropInterval",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Launchpeg__InvalidJoeFeeCollector",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Launchpeg__InvalidMaxBatchSize",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Launchpeg__InvalidPercent",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Launchpeg__InvalidProjectOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Launchpeg__InvalidQuantity",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Launchpeg__InvalidRoyaltyInfo",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Launchpeg__InvalidStartTime",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Launchpeg__JoeFeeAlreadyInitialized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Launchpeg__LargerCollectionSizeNeeded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Launchpeg__MaxSupplyForBatchMintReached",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Launchpeg__MaxSupplyForDevReached",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Launchpeg__MaxSupplyReached",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Launchpeg__NotEligibleForAllowlistMint",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "avaxSent",
          "type": "uint256"
        }
      ],
      "name": "Launchpeg__NotEnoughAVAX",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Launchpeg__NotInitialized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Launchpeg__PreMintBeforeAuction",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Launchpeg__PublicSaleBeforeAllowlist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Launchpeg__PublicSaleEndBeforePublicSaleStart",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Launchpeg__RevealNextBatchNotAvailable",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Launchpeg__TransferFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Launchpeg__Unauthorized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Launchpeg__WithdrawAVAXNotAvailable",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Launchpeg__WrongAddressesAndNumSlotsLength",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Launchpeg__WrongPhase",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MintToZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MintZeroQuantity",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OwnerQueryForNonexistentToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PendingOwnableUpgradeable__AddressZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PendingOwnableUpgradeable__NoPendingOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PendingOwnableUpgradeable__NotOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PendingOwnableUpgradeable__NotPendingOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PendingOwnableUpgradeable__PendingOwnerAlreadySet",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SafeAccessControlEnumerableUpgradeable__RoleIsDefaultAdmin",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "SafeAccessControlEnumerableUpgradeable__SenderMissingRoleAndIsNotOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SafePausableUpgradeable__AlreadyPaused",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SafePausableUpgradeable__AlreadyUnpaused",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferCallerNotOwnerNorApproved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferFromIncorrectOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferToNonERC721ReceiverImplementer",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferToZeroAddress",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "AllowlistSeeded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "allowlistStartTime",
          "type": "uint256"
        }
      ],
      "name": "AllowlistStartTimeSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "auctionSaleStartTime",
          "type": "uint256"
        }
      ],
      "name": "AuctionSaleStartTimeSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "AvaxWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "baseURI",
          "type": "string"
        }
      ],
      "name": "BaseURISet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "feePercent",
          "type": "uint256"
        }
      ],
      "name": "DefaultRoyaltySet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        }
      ],
      "name": "DevMint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "auctionSaleStartTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "auctionStartPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "auctionEndPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "auctionDropInterval",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "preMintStartTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "allowlistStartTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "allowlistDiscountPercent",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "publicSaleStartTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "publicSaleEndTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "publicSaleDiscountPercent",
          "type": "uint256"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "feePercent",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "feeCollector",
          "type": "address"
        }
      ],
      "name": "JoeFeeInitialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum IBaseLaunchpeg.Phase",
          "name": "phase",
          "type": "uint8"
        }
      ],
      "name": "Mint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "pendingOwner",
          "type": "address"
        }
      ],
      "name": "PendingOwnerSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "PreMint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "preMintStartTime",
          "type": "uint256"
        }
      ],
      "name": "PreMintStartTimeSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "publicSaleEndTime",
          "type": "uint256"
        }
      ],
      "name": "PublicSaleEndTimeSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "publicSaleStartTime",
          "type": "uint256"
        }
      ],
      "name": "PublicSaleStartTimeSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "unrevealedURI",
          "type": "string"
        }
      ],
      "name": "UnrevealedURISet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "withdrawAVAXStartTime",
          "type": "uint256"
        }
      ],
      "name": "WithdrawAVAXStartTimeSet",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BASIS_POINT_PRECISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PAUSER_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PAUSER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PROJECT_OWNER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UNPAUSER_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UNPAUSER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "allowlist",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allowlistDiscountPercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_quantity",
          "type": "uint256"
        }
      ],
      "name": "allowlistMint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allowlistPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allowlistStartTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "amountBatchMinted",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "amountForAllowlist",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "amountForAuction",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "amountForDevs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "amountMintedByDevs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "amountMintedDuringAllowlist",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "amountMintedDuringAuction",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "amountMintedDuringPreMint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "amountMintedDuringPublicSale",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "auctionDropInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "auctionDropPerStep",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "auctionEndPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_quantity",
          "type": "uint256"
        }
      ],
      "name": "auctionMint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "auctionSaleDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "auctionSaleStartTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "auctionStartPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxQuantity",
          "type": "uint256"
        }
      ],
      "name": "batchMintPreMintedNFTs",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "batchReveal",
      "outputs": [
        {
          "internalType": "contract IBatchReveal",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "becomeOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collectionSize",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentPhase",
      "outputs": [
        {
          "internalType": "enum IBaseLaunchpeg.Phase",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_quantity",
          "type": "uint256"
        }
      ],
      "name": "devMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_saleStartTime",
          "type": "uint256"
        }
      ],
      "name": "getAuctionPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getOwnershipData",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "addr",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "startTimestamp",
              "type": "uint64"
            },
            {
              "internalType": "bool",
              "name": "burned",
              "type": "bool"
            }
          ],
          "internalType": "struct ERC721AUpgradeable.TokenOwnership",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hasBatchToReveal",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_projectOwner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_royaltyReceiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_maxBatchSize",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_collectionSize",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amountForAuction",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amountForAllowlist",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amountForDevs",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_joeFeePercent",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_joeFeeCollector",
          "type": "address"
        }
      ],
      "name": "initializeJoeFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_auctionSaleStartTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_auctionStartPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_auctionEndPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_auctionDropInterval",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_preMintStartTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_allowlistStartTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_allowlistDiscountPercent",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_publicSaleStartTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_publicSaleEndTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_publicSaleDiscountPercent",
          "type": "uint256"
        }
      ],
      "name": "initializePhases",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "joeFeeCollector",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "joeFeePercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastAuctionPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxBatchSize",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxPerAddressDuringMint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "numberMinted",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_quantity",
          "type": "uint256"
        }
      ],
      "name": "preMint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "preMintStartTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "publicSaleDiscountPercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "publicSaleEndTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_quantity",
          "type": "uint256"
        }
      ],
      "name": "publicSaleMint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "publicSaleStartTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "revealNextBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "revokePendingOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_salePrice",
          "type": "uint256"
        }
      ],
      "name": "royaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "salePrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_addresses",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_numNfts",
          "type": "uint256[]"
        }
      ],
      "name": "seedAllowlist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_allowlistStartTime",
          "type": "uint256"
        }
      ],
      "name": "setAllowlistStartTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_auctionSaleStartTime",
          "type": "uint256"
        }
      ],
      "name": "setAuctionSaleStartTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_baseURI",
          "type": "string"
        }
      ],
      "name": "setBaseURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_batchReveal",
          "type": "address"
        }
      ],
      "name": "setBatchReveal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pendingOwner_",
          "type": "address"
        }
      ],
      "name": "setPendingOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_preMintStartTime",
          "type": "uint256"
        }
      ],
      "name": "setPreMintStartTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_publicSaleEndTime",
          "type": "uint256"
        }
      ],
      "name": "setPublicSaleEndTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_publicSaleStartTime",
          "type": "uint256"
        }
      ],
      "name": "setPublicSaleStartTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "_feePercent",
          "type": "uint96"
        }
      ],
      "name": "setRoyaltyInfo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_unrevealedURI",
          "type": "string"
        }
      ],
      "name": "setUnrevealedURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_withdrawAVAXStartTime",
          "type": "uint256"
        }
      ],
      "name": "setWithdrawAVAXStartTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "_interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unrevealedURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userAddressToPreMintAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "withdrawAVAX",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawAVAXStartTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x4493b184e877771c89644b39f5ac4cba099fc41744db08c3a4b0c0e7fe9f18da",
  "receipt": {
    "to": null,
    "from": "0xbd01F28226254a94E42A987a81E5Aa36d1821116",
    "contractAddress": "0x4653bf053D6a2F9dA671d91d2A2E3b3C08A15705",
    "transactionIndex": 0,
    "gasUsed": "4991287",
    "logsBloom": "0x
    "blockHash": "0x2967ecffacbbd74f1655a1ff78bb625696397f7f7eac844930cc6bbf6886ea09",
    "transactionHash": "0x4493b184e877771c89644b39f5ac4cba099fc41744db08c3a4b0c0e7fe9f18da",
    "logs": [],
    "blockNumber": 14029365,
    "cumulativeGasUsed": "4991287",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 8,
  "solcInputHash": "ad8a94c0474fe8bac41f9226c6b7e6de",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ApprovalCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalToCurrentOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApproveToCaller\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BalanceQueryForZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Launchpeg__AllowlistBeforePreMint\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Launchpeg__BatchRevealDisabled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Launchpeg__CanNotMintThisMany\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Launchpeg__EndPriceGreaterThanStartPrice\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Launchpeg__InvalidAuctionDropInterval\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Launchpeg__InvalidJoeFeeCollector\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Launchpeg__InvalidMaxBatchSize\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Launchpeg__InvalidPercent\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Launchpeg__InvalidProjectOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Launchpeg__InvalidQuantity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Launchpeg__InvalidRoyaltyInfo\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Launchpeg__InvalidStartTime\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Launchpeg__JoeFeeAlreadyInitialized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Launchpeg__LargerCollectionSizeNeeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Launchpeg__MaxSupplyForBatchMintReached\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Launchpeg__MaxSupplyForDevReached\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Launchpeg__MaxSupplyReached\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Launchpeg__NotEligibleForAllowlistMint\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"avaxSent\",\"type\":\"uint256\"}],\"name\":\"Launchpeg__NotEnoughAVAX\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Launchpeg__NotInitialized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Launchpeg__PreMintBeforeAuction\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Launchpeg__PublicSaleBeforeAllowlist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Launchpeg__PublicSaleEndBeforePublicSaleStart\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Launchpeg__RevealNextBatchNotAvailable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Launchpeg__TransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Launchpeg__Unauthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Launchpeg__WithdrawAVAXNotAvailable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Launchpeg__WrongAddressesAndNumSlotsLength\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Launchpeg__WrongPhase\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintZeroQuantity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnerQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PendingOwnableUpgradeable__AddressZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PendingOwnableUpgradeable__NoPendingOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PendingOwnableUpgradeable__NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PendingOwnableUpgradeable__NotPendingOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PendingOwnableUpgradeable__PendingOwnerAlreadySet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SafeAccessControlEnumerableUpgradeable__RoleIsDefaultAdmin\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"SafeAccessControlEnumerableUpgradeable__SenderMissingRoleAndIsNotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SafePausableUpgradeable__AlreadyPaused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SafePausableUpgradeable__AlreadyUnpaused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFromIncorrectOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToNonERC721ReceiverImplementer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"AllowlistSeeded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"allowlistStartTime\",\"type\":\"uint256\"}],\"name\":\"AllowlistStartTimeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"auctionSaleStartTime\",\"type\":\"uint256\"}],\"name\":\"AuctionSaleStartTimeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"AvaxWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"}],\"name\":\"BaseURISet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feePercent\",\"type\":\"uint256\"}],\"name\":\"DefaultRoyaltySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"DevMint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"auctionSaleStartTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"auctionStartPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"auctionEndPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"auctionDropInterval\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"preMintStartTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"allowlistStartTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"allowlistDiscountPercent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"publicSaleStartTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"publicSaleEndTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"publicSaleDiscountPercent\",\"type\":\"uint256\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feePercent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeCollector\",\"type\":\"address\"}],\"name\":\"JoeFeeInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum IBaseLaunchpeg.Phase\",\"name\":\"phase\",\"type\":\"uint8\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pendingOwner\",\"type\":\"address\"}],\"name\":\"PendingOwnerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"PreMint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"preMintStartTime\",\"type\":\"uint256\"}],\"name\":\"PreMintStartTimeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"publicSaleEndTime\",\"type\":\"uint256\"}],\"name\":\"PublicSaleEndTimeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"publicSaleStartTime\",\"type\":\"uint256\"}],\"name\":\"PublicSaleStartTimeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"unrevealedURI\",\"type\":\"string\"}],\"name\":\"UnrevealedURISet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawAVAXStartTime\",\"type\":\"uint256\"}],\"name\":\"WithdrawAVAXStartTimeSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BASIS_POINT_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROJECT_OWNER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNPAUSER_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNPAUSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowlist\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allowlistDiscountPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"}],\"name\":\"allowlistMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allowlistPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allowlistStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountBatchMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountForAllowlist\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountForAuction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountForDevs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountMintedByDevs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountMintedDuringAllowlist\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountMintedDuringAuction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountMintedDuringPreMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountMintedDuringPublicSale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auctionDropInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auctionDropPerStep\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auctionEndPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"}],\"name\":\"auctionMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auctionSaleDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auctionSaleStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auctionStartPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxQuantity\",\"type\":\"uint256\"}],\"name\":\"batchMintPreMintedNFTs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"batchReveal\",\"outputs\":[{\"internalType\":\"contract IBatchReveal\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"becomeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectionSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentPhase\",\"outputs\":[{\"internalType\":\"enum IBaseLaunchpeg.Phase\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"}],\"name\":\"devMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_saleStartTime\",\"type\":\"uint256\"}],\"name\":\"getAuctionPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getOwnershipData\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"startTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"burned\",\"type\":\"bool\"}],\"internalType\":\"struct ERC721AUpgradeable.TokenOwnership\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasBatchToReveal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_projectOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_royaltyReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxBatchSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_collectionSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountForAuction\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountForAllowlist\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountForDevs\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_joeFeePercent\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_joeFeeCollector\",\"type\":\"address\"}],\"name\":\"initializeJoeFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_auctionSaleStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_auctionStartPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_auctionEndPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_auctionDropInterval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_preMintStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allowlistStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allowlistDiscountPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_publicSaleStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_publicSaleEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_publicSaleDiscountPercent\",\"type\":\"uint256\"}],\"name\":\"initializePhases\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"joeFeeCollector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"joeFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastAuctionPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBatchSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPerAddressDuringMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"numberMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"}],\"name\":\"preMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"preMintStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicSaleDiscountPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicSaleEndTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"}],\"name\":\"publicSaleMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicSaleStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revealNextBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revokePendingOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"salePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_numNfts\",\"type\":\"uint256[]\"}],\"name\":\"seedAllowlist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_allowlistStartTime\",\"type\":\"uint256\"}],\"name\":\"setAllowlistStartTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_auctionSaleStartTime\",\"type\":\"uint256\"}],\"name\":\"setAuctionSaleStartTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_baseURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_batchReveal\",\"type\":\"address\"}],\"name\":\"setBatchReveal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pendingOwner_\",\"type\":\"address\"}],\"name\":\"setPendingOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_preMintStartTime\",\"type\":\"uint256\"}],\"name\":\"setPreMintStartTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_publicSaleEndTime\",\"type\":\"uint256\"}],\"name\":\"setPublicSaleEndTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_publicSaleStartTime\",\"type\":\"uint256\"}],\"name\":\"setPublicSaleStartTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"_feePercent\",\"type\":\"uint96\"}],\"name\":\"setRoyaltyInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_unrevealedURI\",\"type\":\"string\"}],\"name\":\"setUnrevealedURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_withdrawAVAXStartTime\",\"type\":\"uint256\"}],\"name\":\"setWithdrawAVAXStartTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unrevealedURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userAddressToPreMintAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdrawAVAX\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAVAXStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Trader Joe\",\"events\":{\"AuctionSaleStartTimeSet(uint256)\":{\"details\":\"Emitted on setAuctionSaleStartTime()\",\"params\":{\"auctionSaleStartTime\":\"New auction sale start time\"}},\"Initialized(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)\":{\"details\":\"Emitted on initializePhases()\",\"params\":{\"allowlistDiscountPercent\":\"Discount applied to the last auction price during the allowlist mint\",\"allowlistStartTime\":\"allowlist mint start time in seconds\",\"auctionDropInterval\":\"Time elapsed between each drop in price in seconds\",\"auctionEndPrice\":\"Auction floor price in AVAX\",\"auctionSaleStartTime\":\"Auction start time in seconds\",\"auctionStartPrice\":\"Auction start price in AVAX\",\"preMintStartTime\":\"Pre-mint start time in seconds\",\"publicSaleDiscountPercent\":\"Discount applied to the last auction price during the public sale\",\"publicSaleEndTime\":\"Public sale end time in seconds\",\"publicSaleStartTime\":\"Public sale start time in seconds\"}}},\"kind\":\"dev\",\"methods\":{\"allowlistMint(uint256)\":{\"params\":{\"_quantity\":\"Quantity of NFTs to mint\"}},\"allowlistPrice()\":{\"returns\":{\"_0\":\"allowlistSalePrice Mint List sale price\"}},\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"auctionMint(uint256)\":{\"details\":\"The price decreases every `auctionDropInterval` by `auctionDropPerStep`\",\"params\":{\"_quantity\":\"Quantity of NFTs to buy\"}},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"batchMintPreMintedNFTs(uint256)\":{\"params\":{\"_maxQuantity\":\"Max quantity of NFTs to mint\"}},\"currentPhase()\":{\"returns\":{\"_0\":\"phase Current phase\"}},\"devMint(uint256)\":{\"details\":\"Can only mint up to `amountForDevs`\",\"params\":{\"_quantity\":\"Quantity of NFTs to mint\"}},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"getAuctionPrice(uint256)\":{\"params\":{\"_saleStartTime\":\"Auction sale start time\"},\"returns\":{\"_0\":\"auctionSalePrice Auction sale price\"}},\"getOwnershipData(uint256)\":{\"params\":{\"_tokenId\":\"Token ID\"},\"returns\":{\"_0\":\"TokenOwnership Ownership struct for a specific token ID\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must be the `owner` or have ``role``'s admin role. - the role granted can't be `DEFAULT_ADMIN`\",\"params\":{\"account\":\"The address of the account\",\"role\":\"The role to grant\"}},\"hasBatchToReveal()\":{\"returns\":{\"_0\":\"bool Whether reveal can be triggered or not\",\"_1\":\"uint256 The number of the next batch that will be revealed\"}},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"initialize(string,string,address,address,uint256,uint256,uint256,uint256,uint256)\":{\"params\":{\"_amountForAllowlist\":\"Amount of NFTs available for the allowlist mint (e.g 1000)\",\"_amountForAuction\":\"Amount of NFTs available for the auction (e.g 8000)\",\"_amountForDevs\":\"Amount of NFTs reserved for `projectOwner` (e.g 200)\",\"_collectionSize\":\"The collection size (e.g 10000)\",\"_maxBatchSize\":\"Max amount of NFTs that can be minted at once\",\"_name\":\"ERC721 name\",\"_projectOwner\":\"The project owner\",\"_royaltyReceiver\":\"Royalty fee collector\",\"_symbol\":\"ERC721 symbol\"}},\"initializeJoeFee(uint256,address)\":{\"params\":{\"_joeFeeCollector\":\"The address to which the fees on the sale will be sent\",\"_joeFeePercent\":\"The fees collected by Joepegs on the sale benefits\"}},\"initializePhases(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)\":{\"details\":\"Can only be called once\",\"params\":{\"_allowlistDiscountPercent\":\"Discount applied to the last auction price during the allowlist mint\",\"_allowlistStartTime\":\"Allowlist mint start time in seconds\",\"_auctionDropInterval\":\"Time elapsed between each drop in price in seconds\",\"_auctionEndPrice\":\"Auction floor price in AVAX\",\"_auctionSaleStartTime\":\"Auction start time in seconds\",\"_auctionStartPrice\":\"Auction start price in AVAX\",\"_preMintStartTime\":\"Pre-mint start time in seconds\",\"_publicSaleDiscountPercent\":\"Discount applied to the last auction price during the public sale\",\"_publicSaleEndTime\":\"Public sale end time in seconds\",\"_publicSaleStartTime\":\"Public sale start time in seconds\"}},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"numberMinted(address)\":{\"params\":{\"_owner\":\"The owner of the NFTs\"},\"returns\":{\"_0\":\"numberMinted Number of NFTs minted\"}},\"owner()\":{\"returns\":{\"_0\":\"The address of the current owner\"}},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"pause()\":{\"details\":\"Sensible part of a contract might be pausable for security reasons. Requirements: - the caller must be the `owner` or have the ``role`` role. - the contrat needs to be unpaused.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"pendingOwner()\":{\"returns\":{\"_0\":\"The address of the current pending owner\"}},\"preMint(uint256)\":{\"params\":{\"_quantity\":\"Quantity of NFTs to mint\"}},\"publicSaleMint(uint256)\":{\"params\":{\"_quantity\":\"Quantity of NFTs to mint\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. - the role renounced can't be `DEFAULT_ADMIN`\",\"params\":{\"account\":\"The address of the account\",\"role\":\"The role to renounce\"}},\"revokeRole(bytes32,address)\":{\"details\":\"If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be the `owner` or have ``role``'s admin role. - the role revoked can't be `DEFAULT_ADMIN`\",\"params\":{\"account\":\"The address of the account\",\"role\":\"The role to revoke\"}},\"royaltyInfo(uint256,uint256)\":{\"details\":\"Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of exchange. The royalty amount is denominated and should be payed in that same unit of exchange.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"salePrice()\":{\"returns\":{\"_0\":\"publicSalePrice Public sale price\"}},\"seedAllowlist(address[],uint256[])\":{\"params\":{\"_addresses\":\"List of addresses allowed to mint during the allowlist phase\",\"_numNfts\":\"List of NFT quantities mintable per address\"}},\"setAllowlistStartTime(uint256)\":{\"details\":\"Only callable by owner\",\"params\":{\"_allowlistStartTime\":\"New allowlist start time\"}},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"setAuctionSaleStartTime(uint256)\":{\"details\":\"Only callable by owner\",\"params\":{\"_auctionSaleStartTime\":\"New auction sale start time\"}},\"setBaseURI(string)\":{\"details\":\"This sets the URI for revealed tokens Only callable by project owner\",\"params\":{\"_baseURI\":\"Base URI to be set\"}},\"setBatchReveal(address)\":{\"details\":\"Can be set to zero address to disable batch reveal\"},\"setPreMintStartTime(uint256)\":{\"details\":\"Only callable by owner\",\"params\":{\"_preMintStartTime\":\"New pre-mint start time\"}},\"setPublicSaleEndTime(uint256)\":{\"details\":\"Only callable by owner\",\"params\":{\"_publicSaleEndTime\":\"New public sale end time\"}},\"setPublicSaleStartTime(uint256)\":{\"details\":\"Only callable by owner\",\"params\":{\"_publicSaleStartTime\":\"New public sale start time\"}},\"setRoyaltyInfo(address,uint96)\":{\"params\":{\"_feePercent\":\"Royalty fee percent in basis point\",\"_receiver\":\"Royalty fee collector\"}},\"setUnrevealedURI(string)\":{\"details\":\"Only callable by project owner\",\"params\":{\"_unrevealedURI\":\"Unrevealed URI to be set\"}},\"setWithdrawAVAXStartTime(uint256)\":{\"params\":{\"_withdrawAVAXStartTime\":\"New public sale end time\"}},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these IDs are created. This function call must use less than 30 000 gas.\",\"params\":{\"_interfaceId\":\"InterfaceId to consider. Comes from type(InterfaceContract).interfaceId\"},\"returns\":{\"_0\":\"isInterfaceSupported True if the considered interface is supported\"}},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"params\":{\"_id\":\"Token id\"},\"returns\":{\"_0\":\"URI Token URI\"}},\"totalSupply()\":{\"details\":\"Burned tokens are calculated here, use _totalMinted() if you want to count just minted tokens.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"unpause()\":{\"details\":\"Sensible part of a contract might be pausable for security reasons. Requirements: - the caller must be the `owner` or have the ``role`` role. - the contrat needs to be unpaused.\"},\"withdrawAVAX(address)\":{\"params\":{\"_to\":\"Recipient of the earned AVAX\"}}},\"stateVariables\":{\"allowlistDiscountPercent\":{\"details\":\"In basis points e.g 500 for 5%\"},\"auctionDropInterval\":{\"details\":\"In seconds\"},\"auctionEndPrice\":{\"details\":\"auctionEndPrice is scaled to 1e18\"},\"auctionSaleDuration\":{\"details\":\"allowlistStartTime - auctionSaleStartTime\"},\"auctionSaleStartTime\":{\"details\":\"Timestamp\"},\"auctionStartPrice\":{\"details\":\"auctionStartPrice is scaled to 1e18\"},\"lastAuctionPrice\":{\"details\":\"lastAuctionPrice is scaled to 1e18\"},\"publicSaleDiscountPercent\":{\"details\":\"In basis points e.g 2500 for 25%\"}},\"title\":\"Launchpeg\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"BASIS_POINT_PRECISION()\":{\"notice\":\"Percentage base point\"},\"PROJECT_OWNER_ROLE()\":{\"notice\":\"Role granted to project owners\"},\"allowlist(address)\":{\"notice\":\"The amount of NFTs each allowed address can mint during the pre-mint or allowlist mint\"},\"allowlistDiscountPercent()\":{\"notice\":\"The discount applied to the last auction price during the allowlist mint\"},\"allowlistMint(uint256)\":{\"notice\":\"Mint NFTs during the allowlist mint\"},\"allowlistPrice()\":{\"notice\":\"Returns the price of the allowlist mint\"},\"allowlistStartTime()\":{\"notice\":\"Start time of the allowlist mint in seconds\"},\"amountBatchMinted()\":{\"notice\":\"Tracks the amount of NFTs batch minted\"},\"amountForAllowlist()\":{\"notice\":\"Amount of NFTs available for the allowlist mint (e.g 1000)\"},\"amountForAuction()\":{\"notice\":\"Amount of NFTs available for the auction (e.g 8000) Unsold items are put up for sale during the public sale.\"},\"amountForDevs()\":{\"notice\":\"Amount of NFTs reserved for the project owner (e.g 200)\"},\"amountMintedByDevs()\":{\"notice\":\"Tracks the amount of NFTs minted by `projectOwner`\"},\"amountMintedDuringAllowlist()\":{\"notice\":\"Tracks the amount of NFTs minted on Allowlist phase\"},\"amountMintedDuringAuction()\":{\"notice\":\"Tracks the amount of NFTs minted during the dutch auction\"},\"amountMintedDuringPreMint()\":{\"notice\":\"Tracks the amount of NFTs minted in the Pre-Mint phase\"},\"amountMintedDuringPublicSale()\":{\"notice\":\"Tracks the amount of NFTs minted on Public Sale phase\"},\"auctionDropInterval()\":{\"notice\":\"Time elapsed between each drop in price\"},\"auctionDropPerStep()\":{\"notice\":\"Amount in AVAX deducted at each interval\"},\"auctionEndPrice()\":{\"notice\":\"Auction floor price in AVAX\"},\"auctionMint(uint256)\":{\"notice\":\"Mint NFTs during the dutch auction\"},\"auctionSaleDuration()\":{\"notice\":\"Duration of the auction in seconds\"},\"auctionSaleStartTime()\":{\"notice\":\"Start time of the dutch auction in seconds\"},\"auctionStartPrice()\":{\"notice\":\"Auction start price in AVAX\"},\"baseURI()\":{\"notice\":\"Token URI after collection reveal\"},\"batchMintPreMintedNFTs(uint256)\":{\"notice\":\"Batch mint NFTs requested during the pre-mint\"},\"becomeOwner()\":{\"notice\":\"Transfers the ownership to the new owner (`pendingOwner`). Can only be called by the pending owner\"},\"collectionSize()\":{\"notice\":\"The collection size (e.g 10000)\"},\"currentPhase()\":{\"notice\":\"Returns the current phase\"},\"devMint(uint256)\":{\"notice\":\"Mint NFTs to the project owner\"},\"getAuctionPrice(uint256)\":{\"notice\":\"Returns the current price of the dutch auction\"},\"getOwnershipData(uint256)\":{\"notice\":\"Returns the ownership data of a specific token ID\"},\"grantRole(bytes32,address)\":{\"notice\":\"Grants `role` to `account`.\"},\"hasBatchToReveal()\":{\"notice\":\"Tells you if a batch can be revealed\"},\"initialize(string,string,address,address,uint256,uint256,uint256,uint256,uint256)\":{\"notice\":\"Launchpeg initialization Can only be called once\"},\"initializeJoeFee(uint256,address)\":{\"notice\":\"Initialize the sales fee percent taken by Joepegs and address that collects the fees\"},\"initializePhases(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)\":{\"notice\":\"Initialize the three phases of the sale\"},\"joeFeeCollector()\":{\"notice\":\"The address to which the fees on the sale will be sent\"},\"joeFeePercent()\":{\"notice\":\"The fees collected by Joepegs on the sale benefits\"},\"lastAuctionPrice()\":{\"notice\":\"The price of the last NFT sold during the auction\"},\"maxBatchSize()\":{\"notice\":\"Max amount of NFTs that can be minted at once\"},\"maxPerAddressDuringMint()\":{\"notice\":\"Max amount of NFTs an address can mint\"},\"numberMinted(address)\":{\"notice\":\"Returns the number of NFTs minted by a specific address\"},\"owner()\":{\"notice\":\"Returns the address of the current owner\"},\"pause()\":{\"notice\":\"Pauses the contract.\"},\"pendingOwner()\":{\"notice\":\"Returns the address of the current pending owner\"},\"preMint(uint256)\":{\"notice\":\"Mint NFTs during the pre-mint\"},\"preMintStartTime()\":{\"notice\":\"Start time of the pre-mint in seconds\"},\"publicSaleDiscountPercent()\":{\"notice\":\"The discount applied to the last auction price during the public sale\"},\"publicSaleEndTime()\":{\"notice\":\"End time of the public sale in seconds\"},\"publicSaleMint(uint256)\":{\"notice\":\"Mint NFTs during the public sale\"},\"publicSaleStartTime()\":{\"notice\":\"Start time of the public sale in seconds\"},\"renounceOwnership()\":{\"notice\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"renounceRole(bytes32,address)\":{\"notice\":\"Revokes `role` from the calling account.\"},\"revealNextBatch()\":{\"notice\":\"Reveals the next batch if the reveal conditions are met\"},\"revokePendingOwner()\":{\"notice\":\"Revoke the pending owner address. This address will not be able to call {becomeOwner} to become the owner anymore. Can only be called by the owner\"},\"revokeRole(bytes32,address)\":{\"notice\":\"Revokes `role` from `account`.\"},\"salePrice()\":{\"notice\":\"Returns the price of the public sale\"},\"seedAllowlist(address[],uint256[])\":{\"notice\":\"Set amount of NFTs mintable per address during the allowlist phase\"},\"setAllowlistStartTime(uint256)\":{\"notice\":\"Set the allowlist start time. Can only be set after phases have been initialized.\"},\"setAuctionSaleStartTime(uint256)\":{\"notice\":\"Set the auction sale start time. Can only be set after phases have been initialized.\"},\"setBaseURI(string)\":{\"notice\":\"Set the base URI\"},\"setBatchReveal(address)\":{\"notice\":\"Update batch reveal\"},\"setPendingOwner(address)\":{\"notice\":\"Sets the pending owner address. This address will be able to become the owner of this contract by calling {becomeOwner}\"},\"setPreMintStartTime(uint256)\":{\"notice\":\"Set the pre-mint start time. Can only be set after phases have been initialized.\"},\"setPublicSaleEndTime(uint256)\":{\"notice\":\"Set the public sale end time. Can only be set after phases have been initialized.\"},\"setPublicSaleStartTime(uint256)\":{\"notice\":\"Set the public sale start time. Can only be set after phases have been initialized.\"},\"setRoyaltyInfo(address,uint96)\":{\"notice\":\"Set the royalty fee\"},\"setUnrevealedURI(string)\":{\"notice\":\"Set the unrevealed URI\"},\"setWithdrawAVAXStartTime(uint256)\":{\"notice\":\"Set the withdraw AVAX start time.\"},\"tokenURI(uint256)\":{\"notice\":\"Returns the Uniform Resource Identifier (URI) for `tokenId` token.\"},\"unpause()\":{\"notice\":\"Unpauses the contract.\"},\"unrevealedURI()\":{\"notice\":\"Token URI before the collection reveal\"},\"withdrawAVAX(address)\":{\"notice\":\"Withdraw AVAX to the given recipient\"},\"withdrawAVAXStartTime()\":{\"notice\":\"Start time when funds can be withdrawn\"}},\"notice\":\"Implements a fair and gas efficient NFT launch mechanism. The sale takes place in 3 phases: dutch auction, allowlist mint, public sale.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Launchpeg.sol\":\"Launchpeg\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n}\\n\",\"keccak256\":\"0xcb29ee50ee2b05441e4deebf8b4756a0feec4f5497e36b6a1ca320f7ce561802\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerableUpgradeable.sol\\\";\\nimport \\\"./AccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/structs/EnumerableSetUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerableUpgradeable is Initializable, IAccessControlEnumerableUpgradeable, AccessControlUpgradeable {\\n    function __AccessControlEnumerable_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControlEnumerable_init_unchained() internal onlyInitializing {\\n    }\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSetUpgradeable.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerableUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override {\\n        super._grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override {\\n        super._revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xc2dfd6ba9449f61b6b03b262182faf302f093a8c05dd10792aeecb4ed1663c0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2ffe9655abbb3741fcb84ad10e2f628d5dbec46b3f84a69ceec4752e807e2757\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerableUpgradeable is IAccessControlUpgradeable {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x7acbc538aad6eb4614e26612a8c5c0149bb8808db95e2638d245a8365f63e572\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC2981Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n *\\n * _Available since v4.5._\\n */\\ninterface IERC2981Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be payed in that same unit of exchange.\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0xf710fb524203921ca2fca7201672900fbfb354a37b56dd3f4f2e1592b3edb999\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x041af89e5e60b74e1203d5a34614c9de379726f52ecb8cf064cab78b9fdcdf9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x8cc03c5ac17e8a7396e487cda41fc1f1dfdb91db7d528e6da84bee3b6dd7e167\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x2f359f9d5c56394e60d74401487ab55d8ef0012907b07c9abbb8f998bf5ddfec\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x714a33fd66816f608f6eda908da24eb6009eee50adf4062c86639d4fe508a7b6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x95a471796eb5f030fdc438660bebec121ad5d063763e64d92376ffb4b5ce8b70\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/common/ERC2981Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/common/ERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/IERC2981Upgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the NFT Royalty Standard, a standardized way to retrieve royalty payment information.\\n *\\n * Royalty information can be specified globally for all token ids via {_setDefaultRoyalty}, and/or individually for\\n * specific token ids via {_setTokenRoyalty}. The latter takes precedence over the first.\\n *\\n * Royalty is specified as a fraction of sale price. {_feeDenominator} is overridable but defaults to 10000, meaning the\\n * fee is specified in basis points by default.\\n *\\n * IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See\\n * https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the EIP. Marketplaces are expected to\\n * voluntarily pay royalties together with sales, but note that this standard is not yet widely supported.\\n *\\n * _Available since v4.5._\\n */\\nabstract contract ERC2981Upgradeable is Initializable, IERC2981Upgradeable, ERC165Upgradeable {\\n    function __ERC2981_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC2981_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoyaltyInfo {\\n        address receiver;\\n        uint96 royaltyFraction;\\n    }\\n\\n    RoyaltyInfo private _defaultRoyaltyInfo;\\n    mapping(uint256 => RoyaltyInfo) private _tokenRoyaltyInfo;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165Upgradeable, ERC165Upgradeable) returns (bool) {\\n        return interfaceId == type(IERC2981Upgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC2981Upgradeable\\n     */\\n    function royaltyInfo(uint256 _tokenId, uint256 _salePrice)\\n        external\\n        view\\n        virtual\\n        override\\n        returns (address, uint256)\\n    {\\n        RoyaltyInfo memory royalty = _tokenRoyaltyInfo[_tokenId];\\n\\n        if (royalty.receiver == address(0)) {\\n            royalty = _defaultRoyaltyInfo;\\n        }\\n\\n        uint256 royaltyAmount = (_salePrice * royalty.royaltyFraction) / _feeDenominator();\\n\\n        return (royalty.receiver, royaltyAmount);\\n    }\\n\\n    /**\\n     * @dev The denominator with which to interpret the fee set in {_setTokenRoyalty} and {_setDefaultRoyalty} as a\\n     * fraction of the sale price. Defaults to 10000 so fees are expressed in basis points, but may be customized by an\\n     * override.\\n     */\\n    function _feeDenominator() internal pure virtual returns (uint96) {\\n        return 10000;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information that all ids in this contract will default to.\\n     *\\n     * Requirements:\\n     *\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setDefaultRoyalty(address receiver, uint96 feeNumerator) internal virtual {\\n        require(feeNumerator <= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\n        require(receiver != address(0), \\\"ERC2981: invalid receiver\\\");\\n\\n        _defaultRoyaltyInfo = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Removes default royalty information.\\n     */\\n    function _deleteDefaultRoyalty() internal virtual {\\n        delete _defaultRoyaltyInfo;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information for a specific token id, overriding the global default.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must be already minted.\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setTokenRoyalty(\\n        uint256 tokenId,\\n        address receiver,\\n        uint96 feeNumerator\\n    ) internal virtual {\\n        require(feeNumerator <= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\n        require(receiver != address(0), \\\"ERC2981: Invalid parameters\\\");\\n\\n        _tokenRoyaltyInfo[tokenId] = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Resets royalty information for the token id back to the global default.\\n     */\\n    function _resetTokenRoyalty(uint256 tokenId) internal virtual {\\n        delete _tokenRoyaltyInfo[tokenId];\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[48] private __gap;\\n}\\n\",\"keccak256\":\"0x77922571fd4422e5503bcf79fb428fb2764b813d07de23c5738a290f0ede72b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x398d3323c1932a5986bf36be7c57593e121e69d5db5b6574b4ee0d031443de37\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSetUpgradeable {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x0004699ba89fa356eb0d58d815b42dcf52eccd2765e95256631b838bce2556bc\",\"license\":\"MIT\"},\"contracts/BaseLaunchpeg.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/common/ERC2981Upgradeable.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\n\\nimport \\\"erc721a-upgradeable/contracts/ERC721AUpgradeable.sol\\\";\\n\\nimport \\\"./LaunchpegErrors.sol\\\";\\nimport \\\"./interfaces/IBaseLaunchpeg.sol\\\";\\nimport \\\"./interfaces/IBatchReveal.sol\\\";\\nimport \\\"./utils/SafePausableUpgradeable.sol\\\";\\n\\n/// @title BaseLaunchpeg\\n/// @author Trader Joe\\n/// @notice Implements the functionalities shared between Launchpeg and FlatLaunchpeg contracts.\\nabstract contract BaseLaunchpeg is\\n    IBaseLaunchpeg,\\n    ERC721AUpgradeable,\\n    SafePausableUpgradeable,\\n    ReentrancyGuardUpgradeable,\\n    ERC2981Upgradeable\\n{\\n    using StringsUpgradeable for uint256;\\n\\n    IBatchReveal public batchReveal;\\n\\n    /// @notice Role granted to project owners\\n    bytes32 public constant override PROJECT_OWNER_ROLE =\\n        keccak256(\\\"PROJECT_OWNER_ROLE\\\");\\n\\n    /// @notice The collection size (e.g 10000)\\n    uint256 public override collectionSize;\\n\\n    /// @notice Amount of NFTs reserved for the project owner (e.g 200)\\n    /// @dev It can be minted any time via `devMint`\\n    uint256 public override amountForDevs;\\n\\n    /// @notice Amount of NFTs available for the allowlist mint (e.g 1000)\\n    uint256 public override amountForAllowlist;\\n\\n    /// @notice Max amount of NFTs that can be minted at once\\n    uint256 public override maxBatchSize;\\n\\n    /// @notice Max amount of NFTs an address can mint\\n    uint256 public override maxPerAddressDuringMint;\\n\\n    /// @notice The fees collected by Joepegs on the sale benefits\\n    /// @dev In basis points e.g 100 for 1%\\n    uint256 public override joeFeePercent;\\n\\n    /// @notice The address to which the fees on the sale will be sent\\n    address public override joeFeeCollector;\\n\\n    /// @notice Percentage base point\\n    uint256 public constant BASIS_POINT_PRECISION = 10_000;\\n\\n    /// @notice Token URI after collection reveal\\n    string public override baseURI;\\n\\n    /// @notice Token URI before the collection reveal\\n    string public override unrevealedURI;\\n\\n    /// @notice The amount of NFTs each allowed address can mint during\\n    /// the pre-mint or allowlist mint\\n    mapping(address => uint256) public override allowlist;\\n\\n    // @notice The remaining no. of pre-minted NFTs for the user address\\n    mapping(address => uint256) public override userAddressToPreMintAmount;\\n\\n    /// @notice Tracks the amount of NFTs minted by `projectOwner`\\n    uint256 public override amountMintedByDevs;\\n\\n    /// @notice Tracks the amount of NFTs minted in the Pre-Mint phase\\n    uint256 public override amountMintedDuringPreMint;\\n\\n    /// @notice Tracks the amount of NFTs batch minted\\n    uint256 public override amountBatchMinted;\\n\\n    /// @notice Tracks the amount of NFTs minted on Allowlist phase\\n    uint256 public override amountMintedDuringAllowlist;\\n\\n    /// @notice Tracks the amount of NFTs minted on Public Sale phase\\n    uint256 public override amountMintedDuringPublicSale;\\n\\n    /// @notice Start time of the pre-mint in seconds\\n    uint256 public override preMintStartTime;\\n\\n    /// @notice Start time of the allowlist mint in seconds\\n    uint256 public override allowlistStartTime;\\n\\n    /// @notice Start time of the public sale in seconds\\n    /// @dev A timestamp greater than the allowlist mint start\\n    uint256 public override publicSaleStartTime;\\n\\n    /// @notice End time of the public sale in seconds\\n    /// @dev A timestamp greater than the public sale start\\n    uint256 public override publicSaleEndTime;\\n\\n    /// @notice Start time when funds can be withdrawn\\n    uint256 public override withdrawAVAXStartTime;\\n\\n    /// @dev Queue of pre-mint requests by allowlist users\\n    PreMintData[] private preMintQueue;\\n\\n    /// @dev Next index of the `preMintQueue` to be processed by batch mint\\n    uint256 private preMintQueueIdx;\\n\\n    struct PreMintData {\\n        address sender;\\n        uint256 quantity;\\n    }\\n\\n    /// @dev Emitted on initializeJoeFee()\\n    /// @param feePercent The fees collected by Joepegs on the sale benefits\\n    /// @param feeCollector The address to which the fees on the sale will be sent\\n    event JoeFeeInitialized(uint256 feePercent, address feeCollector);\\n\\n    /// @dev Emitted on devMint()\\n    /// @param sender The address that minted\\n    /// @param quantity Amount of NFTs minted\\n    event DevMint(address indexed sender, uint256 quantity);\\n\\n    /// @dev Emitted on preMint()\\n    /// @param sender The address that minted\\n    /// @param quantity Amount of NFTs minted\\n    /// @param price Price of 1 NFT\\n    event PreMint(address indexed sender, uint256 quantity, uint256 price);\\n\\n    /// @dev Emitted on auctionMint(), batchMintPreMintedNFTs(),\\n    /// allowlistMint(), publicSaleMint()\\n    /// @param sender The address that minted\\n    /// @param quantity Amount of NFTs minted\\n    /// @param price Price in AVAX for the NFTs\\n    /// @param startTokenId The token ID of the first minted NFT:\\n    /// if `startTokenId` = 100 and `quantity` = 2, `sender` minted 100 and 101\\n    /// @param phase The phase in which the mint occurs\\n    event Mint(\\n        address indexed sender,\\n        uint256 quantity,\\n        uint256 price,\\n        uint256 startTokenId,\\n        Phase phase\\n    );\\n\\n    /// @dev Emitted on withdrawAVAX()\\n    /// @param sender The address that withdrew the tokens\\n    /// @param amount Amount of AVAX transfered to `sender`\\n    /// @param fee Amount of AVAX paid to the fee collector\\n    event AvaxWithdraw(address indexed sender, uint256 amount, uint256 fee);\\n\\n    /// @dev Emitted on setBaseURI()\\n    /// @param baseURI The new base URI\\n    event BaseURISet(string baseURI);\\n\\n    /// @dev Emitted on setUnrevealedURI()\\n    /// @param unrevealedURI The new base URI\\n    event UnrevealedURISet(string unrevealedURI);\\n\\n    /// @dev Emitted on seedAllowlist()\\n    event AllowlistSeeded();\\n\\n    /// @dev Emitted on _setDefaultRoyalty()\\n    /// @param receiver Royalty fee collector\\n    /// @param feePercent Royalty fee percent in basis point\\n    event DefaultRoyaltySet(address indexed receiver, uint256 feePercent);\\n\\n    /// @dev Emitted on setPreMintStartTime()\\n    /// @param preMintStartTime New pre-mint start time\\n    event PreMintStartTimeSet(uint256 preMintStartTime);\\n\\n    /// @dev Emitted on setAllowlistStartTime()\\n    /// @param allowlistStartTime New allowlist start time\\n    event AllowlistStartTimeSet(uint256 allowlistStartTime);\\n\\n    /// @dev Emitted on setPublicSaleStartTime()\\n    /// @param publicSaleStartTime New public sale start time\\n    event PublicSaleStartTimeSet(uint256 publicSaleStartTime);\\n\\n    /// @dev Emitted on setPublicSaleEndTime()\\n    /// @param publicSaleEndTime New public sale end time\\n    event PublicSaleEndTimeSet(uint256 publicSaleEndTime);\\n\\n    /// @dev Emitted on setWithdrawAVAXStartTime()\\n    /// @param withdrawAVAXStartTime New withdraw AVAX start time\\n    event WithdrawAVAXStartTimeSet(uint256 withdrawAVAXStartTime);\\n\\n    modifier isEOA() {\\n        if (tx.origin != msg.sender) {\\n            revert Launchpeg__Unauthorized();\\n        }\\n        _;\\n    }\\n\\n    /// @dev BaseLaunchpeg initialization\\n    /// @param _name ERC721 name\\n    /// @param _symbol ERC721 symbol\\n    /// @param _projectOwner The project owner\\n    /// @param _royaltyReceiver Royalty fee collector\\n    /// @param _maxBatchSize Max amount of NFTs that can be minted at once\\n    /// @param _collectionSize The collection size (e.g 10000)\\n    /// @param _amountForDevs Amount of NFTs reserved for `projectOwner` (e.g 200)\\n    /// @param _amountForAllowlist Amount of NFTs available for the allowlist mint (e.g 1000)\\n    function initializeBaseLaunchpeg(\\n        string memory _name,\\n        string memory _symbol,\\n        address _projectOwner,\\n        address _royaltyReceiver,\\n        uint256 _maxBatchSize,\\n        uint256 _collectionSize,\\n        uint256 _amountForDevs,\\n        uint256 _amountForAllowlist\\n    ) internal onlyInitializing {\\n        __SafePausable_init();\\n        __ReentrancyGuard_init();\\n        __ERC2981_init();\\n        __ERC721A_init(_name, _symbol);\\n\\n        if (_projectOwner == address(0)) {\\n            revert Launchpeg__InvalidProjectOwner();\\n        }\\n\\n        if (\\n            _collectionSize == 0 ||\\n            _amountForDevs + _amountForAllowlist > _collectionSize\\n        ) {\\n            revert Launchpeg__LargerCollectionSizeNeeded();\\n        }\\n\\n        if (_maxBatchSize > _collectionSize) {\\n            revert Launchpeg__InvalidMaxBatchSize();\\n        }\\n\\n        grantRole(PROJECT_OWNER_ROLE, _projectOwner);\\n        // Default royalty is 5%\\n        _setDefaultRoyalty(_royaltyReceiver, 500);\\n\\n        maxBatchSize = _maxBatchSize;\\n        collectionSize = _collectionSize;\\n        maxPerAddressDuringMint = _maxBatchSize;\\n        amountForDevs = _amountForDevs;\\n        amountForAllowlist = _amountForAllowlist;\\n    }\\n\\n    /// @notice Initialize the sales fee percent taken by Joepegs and address that collects the fees\\n    /// @param _joeFeePercent The fees collected by Joepegs on the sale benefits\\n    /// @param _joeFeeCollector The address to which the fees on the sale will be sent\\n    function initializeJoeFee(uint256 _joeFeePercent, address _joeFeeCollector)\\n        external\\n        override\\n        onlyOwner\\n    {\\n        if (joeFeeCollector != address(0)) {\\n            revert Launchpeg__JoeFeeAlreadyInitialized();\\n        }\\n        if (_joeFeePercent > BASIS_POINT_PRECISION) {\\n            revert Launchpeg__InvalidPercent();\\n        }\\n        if (_joeFeeCollector == address(0)) {\\n            revert Launchpeg__InvalidJoeFeeCollector();\\n        }\\n        joeFeePercent = _joeFeePercent;\\n        joeFeeCollector = _joeFeeCollector;\\n        emit JoeFeeInitialized(_joeFeePercent, _joeFeeCollector);\\n    }\\n\\n    /// @notice Set the royalty fee\\n    /// @param _receiver Royalty fee collector\\n    /// @param _feePercent Royalty fee percent in basis point\\n    function setRoyaltyInfo(address _receiver, uint96 _feePercent)\\n        external\\n        override\\n        onlyOwner\\n    {\\n        // Royalty fees are limited to 25%\\n        if (_feePercent > 2_500) {\\n            revert Launchpeg__InvalidRoyaltyInfo();\\n        }\\n        _setDefaultRoyalty(_receiver, _feePercent);\\n        emit DefaultRoyaltySet(_receiver, _feePercent);\\n    }\\n\\n    /// @notice Set amount of NFTs mintable per address during the allowlist phase\\n    /// @param _addresses List of addresses allowed to mint during the allowlist phase\\n    /// @param _numNfts List of NFT quantities mintable per address\\n    function seedAllowlist(\\n        address[] calldata _addresses,\\n        uint256[] calldata _numNfts\\n    ) external override onlyOwner {\\n        uint256 addressesLength = _addresses.length;\\n        if (addressesLength != _numNfts.length) {\\n            revert Launchpeg__WrongAddressesAndNumSlotsLength();\\n        }\\n        for (uint256 i; i < addressesLength; i++) {\\n            allowlist[_addresses[i]] = _numNfts[i];\\n        }\\n\\n        emit AllowlistSeeded();\\n    }\\n\\n    /// @notice Set the base URI\\n    /// @dev This sets the URI for revealed tokens\\n    /// Only callable by project owner\\n    /// @param _baseURI Base URI to be set\\n    function setBaseURI(string calldata _baseURI) external override onlyOwner {\\n        baseURI = _baseURI;\\n        emit BaseURISet(baseURI);\\n    }\\n\\n    /// @notice Set the unrevealed URI\\n    /// @dev Only callable by project owner\\n    /// @param _unrevealedURI Unrevealed URI to be set\\n    function setUnrevealedURI(string calldata _unrevealedURI)\\n        external\\n        override\\n        onlyOwner\\n    {\\n        unrevealedURI = _unrevealedURI;\\n        emit UnrevealedURISet(unrevealedURI);\\n    }\\n\\n    /// @notice Set the allowlist start time. Can only be set after phases\\n    /// have been initialized.\\n    /// @dev Only callable by owner\\n    /// @param _allowlistStartTime New allowlist start time\\n    function setAllowlistStartTime(uint256 _allowlistStartTime)\\n        external\\n        override\\n        onlyOwner\\n    {\\n        if (allowlistStartTime == 0) {\\n            revert Launchpeg__NotInitialized();\\n        }\\n        if (_allowlistStartTime < preMintStartTime) {\\n            revert Launchpeg__AllowlistBeforePreMint();\\n        }\\n        if (publicSaleStartTime < _allowlistStartTime) {\\n            revert Launchpeg__PublicSaleBeforeAllowlist();\\n        }\\n        allowlistStartTime = _allowlistStartTime;\\n        emit AllowlistStartTimeSet(_allowlistStartTime);\\n    }\\n\\n    /// @notice Set the public sale start time. Can only be set after phases\\n    /// have been initialized.\\n    /// @dev Only callable by owner\\n    /// @param _publicSaleStartTime New public sale start time\\n    function setPublicSaleStartTime(uint256 _publicSaleStartTime)\\n        external\\n        override\\n        onlyOwner\\n    {\\n        if (publicSaleStartTime == 0) {\\n            revert Launchpeg__NotInitialized();\\n        }\\n        if (_publicSaleStartTime < allowlistStartTime) {\\n            revert Launchpeg__PublicSaleBeforeAllowlist();\\n        }\\n        if (publicSaleEndTime < _publicSaleStartTime) {\\n            revert Launchpeg__PublicSaleEndBeforePublicSaleStart();\\n        }\\n        publicSaleStartTime = _publicSaleStartTime;\\n        emit PublicSaleStartTimeSet(_publicSaleStartTime);\\n    }\\n\\n    /// @notice Set the public sale end time. Can only be set after phases\\n    /// have been initialized.\\n    /// @dev Only callable by owner\\n    /// @param _publicSaleEndTime New public sale end time\\n    function setPublicSaleEndTime(uint256 _publicSaleEndTime)\\n        external\\n        override\\n        onlyOwner\\n    {\\n        if (publicSaleEndTime == 0) {\\n            revert Launchpeg__NotInitialized();\\n        }\\n        if (_publicSaleEndTime < publicSaleStartTime) {\\n            revert Launchpeg__PublicSaleEndBeforePublicSaleStart();\\n        }\\n        publicSaleEndTime = _publicSaleEndTime;\\n        emit PublicSaleEndTimeSet(_publicSaleEndTime);\\n    }\\n\\n    /// @notice Set the withdraw AVAX start time.\\n    /// @param _withdrawAVAXStartTime New public sale end time\\n    function setWithdrawAVAXStartTime(uint256 _withdrawAVAXStartTime)\\n        external\\n        override\\n        onlyOwner\\n    {\\n        if (_withdrawAVAXStartTime < block.timestamp) {\\n            revert Launchpeg__InvalidStartTime();\\n        }\\n        withdrawAVAXStartTime = _withdrawAVAXStartTime;\\n        emit WithdrawAVAXStartTimeSet(_withdrawAVAXStartTime);\\n    }\\n\\n    /// @notice Update batch reveal\\n    /// @dev Can be set to zero address to disable batch reveal\\n    function setBatchReveal(address _batchReveal) external override onlyOwner {\\n        batchReveal = IBatchReveal(_batchReveal);\\n    }\\n\\n    /// @notice Mint NFTs to the project owner\\n    /// @dev Can only mint up to `amountForDevs`\\n    /// @param _quantity Quantity of NFTs to mint\\n    function devMint(uint256 _quantity)\\n        external\\n        override\\n        onlyOwnerOrRole(PROJECT_OWNER_ROLE)\\n        whenNotPaused\\n    {\\n        if (_totalSupplyWithPreMint() + _quantity > collectionSize) {\\n            revert Launchpeg__MaxSupplyReached();\\n        }\\n        if (amountMintedByDevs + _quantity > amountForDevs) {\\n            revert Launchpeg__MaxSupplyForDevReached();\\n        }\\n        amountMintedByDevs = amountMintedByDevs + _quantity;\\n        uint256 numChunks = _quantity / maxBatchSize;\\n        for (uint256 i; i < numChunks; i++) {\\n            _mint(msg.sender, maxBatchSize, \\\"\\\", false);\\n        }\\n        uint256 remainingQty = _quantity % maxBatchSize;\\n        if (remainingQty != 0) {\\n            _mint(msg.sender, remainingQty, \\\"\\\", false);\\n        }\\n        emit DevMint(msg.sender, _quantity);\\n    }\\n\\n    /// @dev Should only be called in the pre-mint phase\\n    /// @param _quantity Quantity of NFTs to mint\\n    function _preMint(uint256 _quantity) internal {\\n        if (_quantity == 0) {\\n            revert Launchpeg__InvalidQuantity();\\n        }\\n        if (_quantity > allowlist[msg.sender]) {\\n            revert Launchpeg__NotEligibleForAllowlistMint();\\n        }\\n        if (\\n            (_totalSupplyWithPreMint() + _quantity > collectionSize) ||\\n            (amountMintedDuringPreMint + _quantity > amountForAllowlist)\\n        ) {\\n            revert Launchpeg__MaxSupplyReached();\\n        }\\n        allowlist[msg.sender] -= _quantity;\\n        userAddressToPreMintAmount[msg.sender] += _quantity;\\n        amountMintedDuringPreMint += _quantity;\\n        preMintQueue.push(\\n            PreMintData({sender: msg.sender, quantity: _quantity})\\n        );\\n        uint256 price = _preMintPrice();\\n        uint256 totalCost = price * _quantity;\\n        emit PreMint(msg.sender, _quantity, price);\\n        _refundIfOver(totalCost);\\n    }\\n\\n    /// @dev Should only be called in the allowlist and public sale phases.\\n    /// @param _maxQuantity Max quantity of NFTs to mint\\n    function _batchMintPreMintedNFTs(uint256 _maxQuantity) internal {\\n        if (_maxQuantity == 0) {\\n            revert Launchpeg__InvalidQuantity();\\n        }\\n        if (amountMintedDuringPreMint == amountBatchMinted) {\\n            revert Launchpeg__MaxSupplyForBatchMintReached();\\n        }\\n        uint256 remQuantity = _maxQuantity;\\n        uint256 price = _preMintPrice();\\n        address sender;\\n        uint256 quantity;\\n        uint256 i = preMintQueueIdx;\\n        uint256 length = preMintQueue.length;\\n        while (i < length && remQuantity > 0) {\\n            PreMintData memory data = preMintQueue[i];\\n            sender = data.sender;\\n            if (data.quantity > remQuantity) {\\n                quantity = remQuantity;\\n                preMintQueue[i].quantity -= quantity;\\n            } else {\\n                quantity = data.quantity;\\n                delete preMintQueue[i];\\n                i++;\\n            }\\n            remQuantity -= quantity;\\n            userAddressToPreMintAmount[sender] -= quantity;\\n            _mint(sender, quantity, \\\"\\\", false);\\n            emit Mint(\\n                sender,\\n                quantity,\\n                price,\\n                _totalMinted() - quantity,\\n                Phase.PreMint\\n            );\\n        }\\n        amountBatchMinted += (_maxQuantity - remQuantity);\\n        preMintQueueIdx = i;\\n    }\\n\\n    function _preMintPrice() internal view virtual returns (uint256);\\n\\n    /// @notice Withdraw AVAX to the given recipient\\n    /// @param _to Recipient of the earned AVAX\\n    function withdrawAVAX(address _to)\\n        external\\n        override\\n        onlyOwnerOrRole(PROJECT_OWNER_ROLE)\\n        nonReentrant\\n        whenNotPaused\\n    {\\n        if (\\n            withdrawAVAXStartTime > block.timestamp ||\\n            withdrawAVAXStartTime == 0\\n        ) {\\n            revert Launchpeg__WithdrawAVAXNotAvailable();\\n        }\\n\\n        uint256 amount = address(this).balance;\\n        uint256 fee;\\n        bool sent;\\n\\n        if (joeFeePercent > 0) {\\n            fee = (amount * joeFeePercent) / BASIS_POINT_PRECISION;\\n            amount = amount - fee;\\n\\n            (sent, ) = joeFeeCollector.call{value: fee}(\\\"\\\");\\n            if (!sent) {\\n                revert Launchpeg__TransferFailed();\\n            }\\n        }\\n\\n        (sent, ) = _to.call{value: amount}(\\\"\\\");\\n        if (!sent) {\\n            revert Launchpeg__TransferFailed();\\n        }\\n\\n        emit AvaxWithdraw(_to, amount, fee);\\n    }\\n\\n    /// @notice Returns the ownership data of a specific token ID\\n    /// @param _tokenId Token ID\\n    /// @return TokenOwnership Ownership struct for a specific token ID\\n    function getOwnershipData(uint256 _tokenId)\\n        external\\n        view\\n        override\\n        returns (TokenOwnership memory)\\n    {\\n        return _ownershipOf(_tokenId);\\n    }\\n\\n    /// @notice Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n    /// @param _id Token id\\n    /// @return URI Token URI\\n    function tokenURI(uint256 _id)\\n        public\\n        view\\n        override(ERC721AUpgradeable, IERC721MetadataUpgradeable)\\n        returns (string memory)\\n    {\\n        if (address(batchReveal) == address(0)) {\\n            return string(abi.encodePacked(baseURI, _id.toString()));\\n        } else if (\\n            _id >= batchReveal.launchpegToLastTokenReveal(address(this))\\n        ) {\\n            return unrevealedURI;\\n        } else {\\n            return\\n                string(\\n                    abi.encodePacked(\\n                        baseURI,\\n                        batchReveal\\n                            .getShuffledTokenId(address(this), _id)\\n                            .toString()\\n                    )\\n                );\\n        }\\n    }\\n\\n    /// @notice Returns the number of NFTs minted by a specific address\\n    /// @param _owner The owner of the NFTs\\n    /// @return numberMinted Number of NFTs minted\\n    function numberMinted(address _owner)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return _numberMinted(_owner);\\n    }\\n\\n    /// @dev Returns true if this contract implements the interface defined by\\n    /// `interfaceId`. See the corresponding\\n    /// https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n    /// to learn more about how these IDs are created.\\n    /// This function call must use less than 30 000 gas.\\n    /// @param _interfaceId InterfaceId to consider. Comes from type(InterfaceContract).interfaceId\\n    /// @return isInterfaceSupported True if the considered interface is supported\\n    function supportsInterface(bytes4 _interfaceId)\\n        public\\n        view\\n        virtual\\n        override(\\n            ERC721AUpgradeable,\\n            ERC2981Upgradeable,\\n            IERC165Upgradeable,\\n            SafePausableUpgradeable\\n        )\\n        returns (bool)\\n    {\\n        return\\n            _interfaceId == type(IBaseLaunchpeg).interfaceId ||\\n            ERC721AUpgradeable.supportsInterface(_interfaceId) ||\\n            ERC2981Upgradeable.supportsInterface(_interfaceId) ||\\n            ERC165Upgradeable.supportsInterface(_interfaceId) ||\\n            SafePausableUpgradeable.supportsInterface(_interfaceId) ||\\n            super.supportsInterface(_interfaceId);\\n    }\\n\\n    /// @dev Verifies that enough AVAX has been sent by the sender and refunds the extra tokens if any\\n    /// @param _price The price paid by the sender for minting NFTs\\n    function _refundIfOver(uint256 _price) internal {\\n        if (msg.value < _price) {\\n            revert Launchpeg__NotEnoughAVAX(msg.value);\\n        }\\n        if (msg.value > _price) {\\n            (bool success, ) = msg.sender.call{value: msg.value - _price}(\\\"\\\");\\n            if (!success) {\\n                revert Launchpeg__TransferFailed();\\n            }\\n        }\\n    }\\n\\n    /// @notice Reveals the next batch if the reveal conditions are met\\n    function revealNextBatch() external override isEOA whenNotPaused {\\n        if (address(batchReveal) == address(0)) {\\n            revert Launchpeg__BatchRevealDisabled();\\n        }\\n        if (!batchReveal.revealNextBatch(address(this), totalSupply())) {\\n            revert Launchpeg__RevealNextBatchNotAvailable();\\n        }\\n    }\\n\\n    /// @notice Tells you if a batch can be revealed\\n    /// @return bool Whether reveal can be triggered or not\\n    /// @return uint256 The number of the next batch that will be revealed\\n    function hasBatchToReveal() external view override returns (bool, uint256) {\\n        if (address(batchReveal) == address(0)) {\\n            return (false, 0);\\n        }\\n        return batchReveal.hasBatchToReveal(address(this), totalSupply());\\n    }\\n\\n    // @dev Total supply including pre-mints\\n    function _totalSupplyWithPreMint() internal view returns (uint256) {\\n        return totalSupply() + amountMintedDuringPreMint - amountBatchMinted;\\n    }\\n\\n    // @dev Number minted by user including pre-mints\\n    function _numberMintedWithPreMint(address _owner)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return _numberMinted(_owner) + userAddressToPreMintAmount[_owner];\\n    }\\n}\\n\",\"keccak256\":\"0x0ad3899aff988cb4e057668c019178ec929f84ff08e8467d2773c56962f65d69\",\"license\":\"MIT\"},\"contracts/Launchpeg.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\\\";\\n\\nimport \\\"./BaseLaunchpeg.sol\\\";\\nimport \\\"./interfaces/ILaunchpeg.sol\\\";\\n\\n/// @title Launchpeg\\n/// @author Trader Joe\\n/// @notice Implements a fair and gas efficient NFT launch mechanism. The sale takes place in 3 phases: dutch auction, allowlist mint, public sale.\\ncontract Launchpeg is BaseLaunchpeg, ILaunchpeg {\\n    /// @notice Amount of NFTs available for the auction (e.g 8000)\\n    /// Unsold items are put up for sale during the public sale.\\n    uint256 public override amountForAuction;\\n\\n    /// @notice Start time of the dutch auction in seconds\\n    /// @dev Timestamp\\n    uint256 public override auctionSaleStartTime;\\n\\n    /// @notice Auction start price in AVAX\\n    /// @dev auctionStartPrice is scaled to 1e18\\n    uint256 public override auctionStartPrice;\\n\\n    /// @notice Auction floor price in AVAX\\n    /// @dev auctionEndPrice is scaled to 1e18\\n    uint256 public override auctionEndPrice;\\n\\n    /// @notice Duration of the auction in seconds\\n    /// @dev allowlistStartTime - auctionSaleStartTime\\n    uint256 public override auctionSaleDuration;\\n\\n    /// @notice Time elapsed between each drop in price\\n    /// @dev In seconds\\n    uint256 public override auctionDropInterval;\\n\\n    /// @notice Amount in AVAX deducted at each interval\\n    uint256 public override auctionDropPerStep;\\n\\n    /// @notice The discount applied to the last auction price during the allowlist mint\\n    /// @dev In basis points e.g 500 for 5%\\n    uint256 public override allowlistDiscountPercent;\\n\\n    /// @notice The discount applied to the last auction price during the public sale\\n    /// @dev In basis points e.g 2500 for 25%\\n    uint256 public override publicSaleDiscountPercent;\\n\\n    /// @notice Tracks the amount of NFTs minted during the dutch auction\\n    uint256 public override amountMintedDuringAuction;\\n\\n    /// @notice The price of the last NFT sold during the auction\\n    /// @dev lastAuctionPrice is scaled to 1e18\\n    uint256 public override lastAuctionPrice;\\n\\n    /// @dev Emitted on initializePhases()\\n    /// @param auctionSaleStartTime Auction start time in seconds\\n    /// @param auctionStartPrice Auction start price in AVAX\\n    /// @param auctionEndPrice Auction floor price in AVAX\\n    /// @param auctionDropInterval Time elapsed between each drop in price in seconds\\n    /// @param preMintStartTime Pre-mint start time in seconds\\n    /// @param allowlistStartTime allowlist mint start time in seconds\\n    /// @param allowlistDiscountPercent Discount applied to the last auction price during the allowlist mint\\n    /// @param publicSaleStartTime Public sale start time in seconds\\n    /// @param publicSaleEndTime Public sale end time in seconds\\n    /// @param publicSaleDiscountPercent Discount applied to the last auction price during the public sale\\n    event Initialized(\\n        uint256 auctionSaleStartTime,\\n        uint256 auctionStartPrice,\\n        uint256 auctionEndPrice,\\n        uint256 auctionDropInterval,\\n        uint256 preMintStartTime,\\n        uint256 allowlistStartTime,\\n        uint256 allowlistDiscountPercent,\\n        uint256 publicSaleStartTime,\\n        uint256 publicSaleEndTime,\\n        uint256 publicSaleDiscountPercent\\n    );\\n\\n    /// @dev Emitted on setAuctionSaleStartTime()\\n    /// @param auctionSaleStartTime New auction sale start time\\n    event AuctionSaleStartTimeSet(uint256 auctionSaleStartTime);\\n\\n    modifier atPhase(Phase _phase) {\\n        if (currentPhase() != _phase) {\\n            revert Launchpeg__WrongPhase();\\n        }\\n        _;\\n    }\\n\\n    /// @dev Batch mint is allowed in the allowlist and public sale phases\\n    modifier isBatchMintAvailable() {\\n        Phase currPhase = currentPhase();\\n        if (currPhase != Phase.Allowlist && currPhase != Phase.PublicSale) {\\n            revert Launchpeg__WrongPhase();\\n        }\\n        _;\\n    }\\n\\n    /// @notice Launchpeg initialization\\n    /// Can only be called once\\n    /// @param _name ERC721 name\\n    /// @param _symbol ERC721 symbol\\n    /// @param _projectOwner The project owner\\n    /// @param _royaltyReceiver Royalty fee collector\\n    /// @param _maxBatchSize Max amount of NFTs that can be minted at once\\n    /// @param _collectionSize The collection size (e.g 10000)\\n    /// @param _amountForAuction Amount of NFTs available for the auction (e.g 8000)\\n    /// @param _amountForAllowlist Amount of NFTs available for the allowlist mint (e.g 1000)\\n    /// @param _amountForDevs Amount of NFTs reserved for `projectOwner` (e.g 200)\\n    function initialize(\\n        string memory _name,\\n        string memory _symbol,\\n        address _projectOwner,\\n        address _royaltyReceiver,\\n        uint256 _maxBatchSize,\\n        uint256 _collectionSize,\\n        uint256 _amountForAuction,\\n        uint256 _amountForAllowlist,\\n        uint256 _amountForDevs\\n    ) external override initializer {\\n        initializeBaseLaunchpeg(\\n            _name,\\n            _symbol,\\n            _projectOwner,\\n            _royaltyReceiver,\\n            _maxBatchSize,\\n            _collectionSize,\\n            _amountForDevs,\\n            _amountForAllowlist\\n        );\\n        if (\\n            _amountForAuction + _amountForAllowlist + _amountForDevs >\\n            _collectionSize\\n        ) {\\n            revert Launchpeg__LargerCollectionSizeNeeded();\\n        }\\n\\n        amountForAuction = _amountForAuction;\\n    }\\n\\n    /// @notice Initialize the three phases of the sale\\n    /// @dev Can only be called once\\n    /// @param _auctionSaleStartTime Auction start time in seconds\\n    /// @param _auctionStartPrice Auction start price in AVAX\\n    /// @param _auctionEndPrice Auction floor price in AVAX\\n    /// @param _auctionDropInterval Time elapsed between each drop in price in seconds\\n    /// @param _preMintStartTime Pre-mint start time in seconds\\n    /// @param _allowlistStartTime Allowlist mint start time in seconds\\n    /// @param _allowlistDiscountPercent Discount applied to the last auction price during the allowlist mint\\n    /// @param _publicSaleStartTime Public sale start time in seconds\\n    /// @param _publicSaleEndTime Public sale end time in seconds\\n    /// @param _publicSaleDiscountPercent Discount applied to the last auction price during the public sale\\n    function initializePhases(\\n        uint256 _auctionSaleStartTime,\\n        uint256 _auctionStartPrice,\\n        uint256 _auctionEndPrice,\\n        uint256 _auctionDropInterval,\\n        uint256 _preMintStartTime,\\n        uint256 _allowlistStartTime,\\n        uint256 _allowlistDiscountPercent,\\n        uint256 _publicSaleStartTime,\\n        uint256 _publicSaleEndTime,\\n        uint256 _publicSaleDiscountPercent\\n    ) external override onlyOwner atPhase(Phase.NotStarted) {\\n        if (_auctionSaleStartTime < block.timestamp) {\\n            revert Launchpeg__InvalidStartTime();\\n        }\\n        if (_auctionStartPrice <= _auctionEndPrice) {\\n            revert Launchpeg__EndPriceGreaterThanStartPrice();\\n        }\\n        if (_preMintStartTime <= _auctionSaleStartTime) {\\n            revert Launchpeg__PreMintBeforeAuction();\\n        }\\n        if (_allowlistStartTime < _preMintStartTime) {\\n            revert Launchpeg__AllowlistBeforePreMint();\\n        }\\n        if (_publicSaleStartTime < _allowlistStartTime) {\\n            revert Launchpeg__PublicSaleBeforeAllowlist();\\n        }\\n        if (_publicSaleEndTime < _publicSaleStartTime) {\\n            revert Launchpeg__PublicSaleEndBeforePublicSaleStart();\\n        }\\n        if (\\n            _allowlistDiscountPercent > BASIS_POINT_PRECISION ||\\n            _publicSaleDiscountPercent > BASIS_POINT_PRECISION\\n        ) {\\n            revert Launchpeg__InvalidPercent();\\n        }\\n\\n        auctionSaleDuration = _preMintStartTime - _auctionSaleStartTime;\\n        /// Ensure auction drop interval is not too high by enforcing it\\n        /// is at most 1/4 of the auction sale duration.\\n        /// There will be at least 3 price drops.\\n        if (\\n            _auctionDropInterval == 0 ||\\n            _auctionDropInterval > auctionSaleDuration / 4\\n        ) {\\n            revert Launchpeg__InvalidAuctionDropInterval();\\n        }\\n\\n        auctionSaleStartTime = _auctionSaleStartTime;\\n        auctionStartPrice = _auctionStartPrice;\\n        lastAuctionPrice = _auctionStartPrice;\\n        auctionEndPrice = _auctionEndPrice;\\n        auctionDropInterval = _auctionDropInterval;\\n        auctionDropPerStep =\\n            (_auctionStartPrice - _auctionEndPrice) /\\n            (auctionSaleDuration / _auctionDropInterval);\\n\\n        preMintStartTime = _preMintStartTime;\\n        allowlistStartTime = _allowlistStartTime;\\n        allowlistDiscountPercent = _allowlistDiscountPercent;\\n\\n        publicSaleStartTime = _publicSaleStartTime;\\n        publicSaleEndTime = _publicSaleEndTime;\\n        publicSaleDiscountPercent = _publicSaleDiscountPercent;\\n\\n        emit Initialized(\\n            auctionSaleStartTime,\\n            auctionStartPrice,\\n            auctionEndPrice,\\n            auctionDropInterval,\\n            preMintStartTime,\\n            allowlistStartTime,\\n            allowlistDiscountPercent,\\n            publicSaleStartTime,\\n            publicSaleEndTime,\\n            publicSaleDiscountPercent\\n        );\\n    }\\n\\n    /// @notice Set the auction sale start time. Can only be set after phases\\n    /// have been initialized.\\n    /// @dev Only callable by owner\\n    /// @param _auctionSaleStartTime New auction sale start time\\n    function setAuctionSaleStartTime(uint256 _auctionSaleStartTime)\\n        external\\n        override\\n        onlyOwner\\n    {\\n        if (auctionSaleStartTime == 0) {\\n            revert Launchpeg__NotInitialized();\\n        }\\n        if (_auctionSaleStartTime < block.timestamp) {\\n            revert Launchpeg__InvalidStartTime();\\n        }\\n        if (preMintStartTime <= _auctionSaleStartTime) {\\n            revert Launchpeg__PreMintBeforeAuction();\\n        }\\n        auctionSaleStartTime = _auctionSaleStartTime;\\n        emit AuctionSaleStartTimeSet(_auctionSaleStartTime);\\n    }\\n\\n    /// @notice Set the pre-mint start time. Can only be set after phases\\n    /// have been initialized.\\n    /// @dev Only callable by owner\\n    /// @param _preMintStartTime New pre-mint start time\\n    function setPreMintStartTime(uint256 _preMintStartTime)\\n        external\\n        override\\n        onlyOwner\\n    {\\n        if (preMintStartTime == 0) {\\n            revert Launchpeg__NotInitialized();\\n        }\\n        if (_preMintStartTime <= auctionSaleStartTime) {\\n            revert Launchpeg__PreMintBeforeAuction();\\n        }\\n        if (allowlistStartTime < _preMintStartTime) {\\n            revert Launchpeg__AllowlistBeforePreMint();\\n        }\\n        preMintStartTime = _preMintStartTime;\\n        emit PreMintStartTimeSet(_preMintStartTime);\\n    }\\n\\n    /// @notice Mint NFTs during the dutch auction\\n    /// @dev The price decreases every `auctionDropInterval` by `auctionDropPerStep`\\n    /// @param _quantity Quantity of NFTs to buy\\n    function auctionMint(uint256 _quantity)\\n        external\\n        payable\\n        override\\n        whenNotPaused\\n        atPhase(Phase.DutchAuction)\\n    {\\n        uint256 remainingSupply = (amountForAuction + amountMintedByDevs) -\\n            totalSupply();\\n        if (remainingSupply == 0) {\\n            revert Launchpeg__MaxSupplyReached();\\n        }\\n        if (remainingSupply < _quantity) {\\n            _quantity = remainingSupply;\\n        }\\n        if (\\n            _numberMintedWithPreMint(msg.sender) + _quantity >\\n            maxPerAddressDuringMint\\n        ) {\\n            revert Launchpeg__CanNotMintThisMany();\\n        }\\n        lastAuctionPrice = getAuctionPrice(auctionSaleStartTime);\\n        uint256 totalCost = lastAuctionPrice * _quantity;\\n        amountMintedDuringAuction = amountMintedDuringAuction + _quantity;\\n        _mint(msg.sender, _quantity, \\\"\\\", false);\\n        emit Mint(\\n            msg.sender,\\n            _quantity,\\n            lastAuctionPrice,\\n            _totalMinted() - _quantity,\\n            Phase.DutchAuction\\n        );\\n        _refundIfOver(totalCost);\\n    }\\n\\n    /// @notice Mint NFTs during the pre-mint\\n    /// @param _quantity Quantity of NFTs to mint\\n    function preMint(uint256 _quantity)\\n        external\\n        payable\\n        override\\n        whenNotPaused\\n        atPhase(Phase.PreMint)\\n    {\\n        _preMint(_quantity);\\n    }\\n\\n    /// @notice Batch mint NFTs requested during the pre-mint\\n    /// @param _maxQuantity Max quantity of NFTs to mint\\n    function batchMintPreMintedNFTs(uint256 _maxQuantity)\\n        external\\n        override\\n        whenNotPaused\\n        isBatchMintAvailable\\n    {\\n        _batchMintPreMintedNFTs(_maxQuantity);\\n    }\\n\\n    /// @notice Mint NFTs during the allowlist mint\\n    /// @param _quantity Quantity of NFTs to mint\\n    function allowlistMint(uint256 _quantity)\\n        external\\n        payable\\n        override\\n        whenNotPaused\\n        atPhase(Phase.Allowlist)\\n    {\\n        if (_quantity > allowlist[msg.sender]) {\\n            revert Launchpeg__NotEligibleForAllowlistMint();\\n        }\\n        if (\\n            (_totalSupplyWithPreMint() + _quantity > collectionSize) ||\\n            (amountMintedDuringPreMint +\\n                amountMintedDuringAllowlist +\\n                _quantity >\\n                amountForAllowlist)\\n        ) {\\n            revert Launchpeg__MaxSupplyReached();\\n        }\\n        allowlist[msg.sender] -= _quantity;\\n        uint256 price = allowlistPrice();\\n        uint256 totalCost = price * _quantity;\\n\\n        _mint(msg.sender, _quantity, \\\"\\\", false);\\n        amountMintedDuringAllowlist += _quantity;\\n        emit Mint(\\n            msg.sender,\\n            _quantity,\\n            price,\\n            _totalMinted() - _quantity,\\n            Phase.Allowlist\\n        );\\n        _refundIfOver(totalCost);\\n    }\\n\\n    /// @notice Mint NFTs during the public sale\\n    /// @param _quantity Quantity of NFTs to mint\\n    function publicSaleMint(uint256 _quantity)\\n        external\\n        payable\\n        override\\n        isEOA\\n        whenNotPaused\\n        atPhase(Phase.PublicSale)\\n    {\\n        if (\\n            _numberMintedWithPreMint(msg.sender) + _quantity >\\n            maxPerAddressDuringMint\\n        ) {\\n            revert Launchpeg__CanNotMintThisMany();\\n        }\\n        if (_totalSupplyWithPreMint() + _quantity > collectionSize) {\\n            revert Launchpeg__MaxSupplyReached();\\n        }\\n        uint256 price = salePrice();\\n\\n        _mint(msg.sender, _quantity, \\\"\\\", false);\\n        amountMintedDuringPublicSale += _quantity;\\n        emit Mint(\\n            msg.sender,\\n            _quantity,\\n            price,\\n            _totalMinted() - _quantity,\\n            Phase.PublicSale\\n        );\\n        _refundIfOver(price * _quantity);\\n    }\\n\\n    /// @notice Returns the current price of the dutch auction\\n    /// @param _saleStartTime Auction sale start time\\n    /// @return auctionSalePrice Auction sale price\\n    function getAuctionPrice(uint256 _saleStartTime)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        if (block.timestamp < _saleStartTime) {\\n            return auctionStartPrice;\\n        }\\n        if (block.timestamp - _saleStartTime >= auctionSaleDuration) {\\n            return auctionEndPrice;\\n        } else {\\n            uint256 steps = (block.timestamp - _saleStartTime) /\\n                auctionDropInterval;\\n            return auctionStartPrice - (steps * auctionDropPerStep);\\n        }\\n    }\\n\\n    /// @notice Returns the price of the allowlist mint\\n    /// @return allowlistSalePrice Mint List sale price\\n    function allowlistPrice() public view override returns (uint256) {\\n        return\\n            lastAuctionPrice -\\n            (lastAuctionPrice * allowlistDiscountPercent) /\\n            10000;\\n    }\\n\\n    /// @notice Returns the price of the public sale\\n    /// @return publicSalePrice Public sale price\\n    function salePrice() public view override returns (uint256) {\\n        return\\n            lastAuctionPrice -\\n            (lastAuctionPrice * publicSaleDiscountPercent) /\\n            10000;\\n    }\\n\\n    /// @notice Returns the current phase\\n    /// @return phase Current phase\\n    function currentPhase() public view override returns (Phase) {\\n        if (\\n            auctionSaleStartTime == 0 ||\\n            preMintStartTime == 0 ||\\n            allowlistStartTime == 0 ||\\n            publicSaleStartTime == 0 ||\\n            block.timestamp < auctionSaleStartTime\\n        ) {\\n            return Phase.NotStarted;\\n        } else if (totalSupply() >= collectionSize) {\\n            return Phase.Ended;\\n        } else if (\\n            block.timestamp >= auctionSaleStartTime &&\\n            block.timestamp < preMintStartTime\\n        ) {\\n            return Phase.DutchAuction;\\n        } else if (\\n            block.timestamp >= preMintStartTime &&\\n            block.timestamp < allowlistStartTime\\n        ) {\\n            return Phase.PreMint;\\n        } else if (\\n            block.timestamp >= allowlistStartTime &&\\n            block.timestamp < publicSaleStartTime\\n        ) {\\n            return Phase.Allowlist;\\n        } else if (\\n            block.timestamp >= publicSaleStartTime &&\\n            block.timestamp < publicSaleEndTime\\n        ) {\\n            return Phase.PublicSale;\\n        }\\n        return Phase.Ended;\\n    }\\n\\n    /// @dev Returns true if this contract implements the interface defined by\\n    /// `interfaceId`. See the corresponding\\n    /// https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n    /// to learn more about how these IDs are created.\\n    /// This function call must use less than 30 000 gas.\\n    /// @param _interfaceId InterfaceId to consider. Comes from type(InterfaceContract).interfaceId\\n    /// @return isInterfaceSupported True if the considered interface is supported\\n    function supportsInterface(bytes4 _interfaceId)\\n        public\\n        view\\n        virtual\\n        override(BaseLaunchpeg, IERC165Upgradeable)\\n        returns (bool)\\n    {\\n        return\\n            _interfaceId == type(ILaunchpeg).interfaceId ||\\n            super.supportsInterface(_interfaceId);\\n    }\\n\\n    /// @dev Returns pre-mint price. Used by _preMint() and _batchMintPreMintedNFTs() methods.\\n    function _preMintPrice() internal view override returns (uint256) {\\n        return allowlistPrice();\\n    }\\n}\\n\",\"keccak256\":\"0x28dcb9ff569c22df3c51190b2d95d36f1b50b751145254a0be59df34d784a48a\",\"license\":\"MIT\"},\"contracts/LaunchpegErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n// LaunchpegFactory\\nerror LaunchpegFactory__InvalidBatchReveal();\\nerror LaunchpegFactory__InvalidImplementation();\\n\\n// Launchpeg\\nerror Launchpeg__AllowlistBeforePreMint();\\nerror Launchpeg__BatchRevealDisabled();\\nerror Launchpeg__BatchRevealNotInitialized();\\nerror Launchpeg__BatchRevealStarted();\\nerror Launchpeg__CanNotMintThisMany();\\nerror Launchpeg__EndPriceGreaterThanStartPrice();\\nerror Launchpeg__HasBeenForceRevealed();\\nerror Launchpeg__JoeFeeAlreadyInitialized();\\nerror Launchpeg__InvalidAllowlistPrice();\\nerror Launchpeg__InvalidAuctionDropInterval();\\nerror Launchpeg__InvalidBatchReveal();\\nerror Launchpeg__InvalidBatchRevealSize();\\nerror Launchpeg__InvalidCallbackGasLimit();\\nerror Launchpeg__InvalidCoordinator();\\nerror Launchpeg__InvalidKeyHash();\\nerror Launchpeg__InvalidJoeFeeCollector();\\nerror Launchpeg__InvalidMaxBatchSize();\\nerror Launchpeg__InvalidProjectOwner();\\nerror Launchpeg__InvalidPercent();\\nerror Launchpeg__InvalidQuantity();\\nerror Launchpeg__InvalidRevealDates();\\nerror Launchpeg__InvalidRoyaltyInfo();\\nerror Launchpeg__InvalidStartTime();\\nerror Launchpeg__IsNotInTheConsumerList();\\nerror Launchpeg__LargerCollectionSizeNeeded();\\nerror Launchpeg__MaxSupplyForDevReached();\\nerror Launchpeg__MaxSupplyForBatchMintReached();\\nerror Launchpeg__MaxSupplyReached();\\nerror Launchpeg__NotEligibleForAllowlistMint();\\nerror Launchpeg__NotEnoughAVAX(uint256 avaxSent);\\nerror Launchpeg__NotInitialized();\\nerror Launchpeg__PreMintBeforeAuction();\\nerror Launchpeg__PublicSaleBeforeAllowlist();\\nerror Launchpeg__PublicSaleEndBeforePublicSaleStart();\\nerror Launchpeg__RevealNextBatchNotAvailable();\\nerror Launchpeg__TransferFailed();\\nerror Launchpeg__Unauthorized();\\nerror Launchpeg__WithdrawAVAXNotAvailable();\\nerror Launchpeg__WrongAddressesAndNumSlotsLength();\\nerror Launchpeg__WrongPhase();\\n\\n// PendingOwnableUpgradeable\\nerror PendingOwnableUpgradeable__NotOwner();\\nerror PendingOwnableUpgradeable__AddressZero();\\nerror PendingOwnableUpgradeable__NotPendingOwner();\\nerror PendingOwnableUpgradeable__PendingOwnerAlreadySet();\\nerror PendingOwnableUpgradeable__NoPendingOwner();\\n\\n// SafeAccessControlEnumerableUpgradeable\\nerror SafeAccessControlEnumerableUpgradeable__SenderMissingRoleAndIsNotOwner(\\n    bytes32 role,\\n    address sender\\n);\\nerror SafeAccessControlEnumerableUpgradeable__RoleIsDefaultAdmin();\\n\\n// SafeAccessControlEnumerableUpgradeable\\nerror SafePausableUpgradeable__AlreadyPaused();\\nerror SafePausableUpgradeable__AlreadyUnpaused();\\n\",\"keccak256\":\"0xe1bf0cb688b2d22cddeae21e6370a7dc8903001b3666208db565662427f178b9\",\"license\":\"MIT\"},\"contracts/interfaces/IBaseLaunchpeg.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\\\";\\n\\nimport \\\"erc721a-upgradeable/contracts/ERC721AUpgradeable.sol\\\";\\n\\n/// @title IBaseLaunchpeg\\n/// @author Trader Joe\\n/// @notice Defines the basic interface of BaseLaunchpeg\\ninterface IBaseLaunchpeg is IERC721Upgradeable, IERC721MetadataUpgradeable {\\n    enum Phase {\\n        NotStarted,\\n        DutchAuction,\\n        PreMint,\\n        Allowlist,\\n        PublicSale,\\n        Ended\\n    }\\n\\n    function PROJECT_OWNER_ROLE() external view returns (bytes32);\\n\\n    function collectionSize() external view returns (uint256);\\n\\n    function unrevealedURI() external view returns (string memory);\\n\\n    function baseURI() external view returns (string memory);\\n\\n    function amountForDevs() external view returns (uint256);\\n\\n    function amountForAllowlist() external view returns (uint256);\\n\\n    function maxBatchSize() external view returns (uint256);\\n\\n    function maxPerAddressDuringMint() external view returns (uint256);\\n\\n    function joeFeePercent() external view returns (uint256);\\n\\n    function joeFeeCollector() external view returns (address);\\n\\n    function allowlist(address) external view returns (uint256);\\n\\n    function amountMintedByDevs() external view returns (uint256);\\n\\n    function amountMintedDuringPreMint() external view returns (uint256);\\n\\n    function amountBatchMinted() external view returns (uint256);\\n\\n    function amountMintedDuringAllowlist() external view returns (uint256);\\n\\n    function amountMintedDuringPublicSale() external view returns (uint256);\\n\\n    function preMintStartTime() external view returns (uint256);\\n\\n    function allowlistStartTime() external view returns (uint256);\\n\\n    function publicSaleStartTime() external view returns (uint256);\\n\\n    function publicSaleEndTime() external view returns (uint256);\\n\\n    function withdrawAVAXStartTime() external view returns (uint256);\\n\\n    function allowlistPrice() external view returns (uint256);\\n\\n    function salePrice() external view returns (uint256);\\n\\n    function initializeJoeFee(uint256 _joeFeePercent, address _joeFeeCollector)\\n        external;\\n\\n    function setRoyaltyInfo(address receiver, uint96 feePercent) external;\\n\\n    function seedAllowlist(\\n        address[] memory _addresses,\\n        uint256[] memory _numSlots\\n    ) external;\\n\\n    function setBaseURI(string calldata baseURI) external;\\n\\n    function setUnrevealedURI(string calldata baseURI) external;\\n\\n    function setPreMintStartTime(uint256 _preMintStartTime) external;\\n\\n    function setAllowlistStartTime(uint256 _allowlistStartTime) external;\\n\\n    function setPublicSaleStartTime(uint256 _publicSaleStartTime) external;\\n\\n    function setPublicSaleEndTime(uint256 _publicSaleEndTime) external;\\n\\n    function setWithdrawAVAXStartTime(uint256 _withdrawAVAXStartTime) external;\\n\\n    function setBatchReveal(address _batchReveal) external;\\n\\n    function devMint(uint256 quantity) external;\\n\\n    function preMint(uint256 _quantity) external payable;\\n\\n    function batchMintPreMintedNFTs(uint256 _maxQuantity) external;\\n\\n    function allowlistMint(uint256 _quantity) external payable;\\n\\n    function publicSaleMint(uint256 _quantity) external payable;\\n\\n    function withdrawAVAX(address to) external;\\n\\n    function getOwnershipData(uint256 tokenId)\\n        external\\n        view\\n        returns (ERC721AUpgradeable.TokenOwnership memory);\\n\\n    function userAddressToPreMintAmount(address owner)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function numberMinted(address owner) external view returns (uint256);\\n\\n    function currentPhase() external view returns (Phase);\\n\\n    function revealNextBatch() external;\\n\\n    function hasBatchToReveal() external view returns (bool, uint256);\\n}\\n\",\"keccak256\":\"0x9e0deed227ea39077c89436c72017a85e8a89f563163fe6e605d40917371f21e\",\"license\":\"MIT\"},\"contracts/interfaces/IBatchReveal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/// @title IBatchReveal\\n/// @author Trader Joe\\n/// @notice Defines the basic interface of BatchReveal\\ninterface IBatchReveal {\\n    struct BatchRevealConfig {\\n        uint256 collectionSize;\\n        int128 intCollectionSize;\\n        /// @notice Size of the batch reveal\\n        /// @dev Must divide collectionSize\\n        uint256 revealBatchSize;\\n        /// @notice Timestamp for the start of the reveal process\\n        /// @dev Can be set to zero for immediate reveal after token mint\\n        uint256 revealStartTime;\\n        /// @notice Time interval for gradual reveal\\n        /// @dev Can be set to zero in order to reveal the collection all at once\\n        uint256 revealInterval;\\n    }\\n\\n    function initialize() external;\\n\\n    function configure(\\n        address _baseLaunchpeg,\\n        uint256 _revealBatchSize,\\n        uint256 _revealStartTime,\\n        uint256 _revealInterval\\n    ) external;\\n\\n    function setRevealBatchSize(\\n        address _baseLaunchpeg,\\n        uint256 _revealBatchSize\\n    ) external;\\n\\n    function setRevealStartTime(\\n        address _baseLaunchpeg,\\n        uint256 _revealStartTime\\n    ) external;\\n\\n    function setRevealInterval(address _baseLaunchpeg, uint256 _revealInterval)\\n        external;\\n\\n    function setVRF(\\n        address _vrfCoordinator,\\n        bytes32 _keyHash,\\n        uint64 _subscriptionId,\\n        uint32 _callbackGasLimit\\n    ) external;\\n\\n    function launchpegToConfig(address)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            int128,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function launchpegToBatchToSeed(address, uint256)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function launchpegToLastTokenReveal(address)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function useVRF() external view returns (bool);\\n\\n    function subscriptionId() external view returns (uint64);\\n\\n    function keyHash() external view returns (bytes32);\\n\\n    function callbackGasLimit() external view returns (uint32);\\n\\n    function requestConfirmations() external view returns (uint16);\\n\\n    function launchpegToNextBatchToReveal(address)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function launchpegToHasBeenForceRevealed(address)\\n        external\\n        view\\n        returns (bool);\\n\\n    function launchpegToVrfRequestedForBatch(address, uint256)\\n        external\\n        view\\n        returns (bool);\\n\\n    function getShuffledTokenId(address _baseLaunchpeg, uint256 _startId)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function isBatchRevealInitialized(address _baseLaunchpeg)\\n        external\\n        view\\n        returns (bool);\\n\\n    function revealNextBatch(address _baseLaunchpeg, uint256 _totalSupply)\\n        external\\n        returns (bool);\\n\\n    function hasBatchToReveal(address _baseLaunchpeg, uint256 _totalSupply)\\n        external\\n        view\\n        returns (bool, uint256);\\n\\n    function forceReveal(address _baseLaunchpeg) external;\\n}\\n\",\"keccak256\":\"0xc3232cf50271c82a2ab5713261f97727592c6be0ae6ce0d70906c6429311baea\",\"license\":\"MIT\"},\"contracts/interfaces/ILaunchpeg.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./IBaseLaunchpeg.sol\\\";\\n\\n/// @title ILaunchpeg\\n/// @author Trader Joe\\n/// @notice Defines the basic interface of Launchpeg\\ninterface ILaunchpeg is IBaseLaunchpeg {\\n    function amountForAuction() external view returns (uint256);\\n\\n    function auctionSaleStartTime() external view returns (uint256);\\n\\n    function auctionStartPrice() external view returns (uint256);\\n\\n    function auctionEndPrice() external view returns (uint256);\\n\\n    function auctionSaleDuration() external view returns (uint256);\\n\\n    function auctionDropInterval() external view returns (uint256);\\n\\n    function auctionDropPerStep() external view returns (uint256);\\n\\n    function allowlistDiscountPercent() external view returns (uint256);\\n\\n    function publicSaleDiscountPercent() external view returns (uint256);\\n\\n    function amountMintedDuringAuction() external view returns (uint256);\\n\\n    function lastAuctionPrice() external view returns (uint256);\\n\\n    function initialize(\\n        string memory _name,\\n        string memory _symbol,\\n        address _projectOwner,\\n        address _royaltyReceiver,\\n        uint256 _maxBatchSize,\\n        uint256 _collectionSize,\\n        uint256 _amountForAuction,\\n        uint256 _amountForAllowlist,\\n        uint256 _amountForDevs\\n    ) external;\\n\\n    function initializePhases(\\n        uint256 _auctionSaleStartTime,\\n        uint256 _auctionStartPrice,\\n        uint256 _auctionEndPrice,\\n        uint256 _auctionDropInterval,\\n        uint256 _preMintStartTime,\\n        uint256 _allowlistStartTime,\\n        uint256 _allowlistDiscountPercent,\\n        uint256 _publicSaleStartTime,\\n        uint256 _publicSaleEndTime,\\n        uint256 _publicSaleDiscountPercent\\n    ) external;\\n\\n    function setAuctionSaleStartTime(uint256 _auctionSaleStartTime) external;\\n\\n    function auctionMint(uint256 _quantity) external payable;\\n\\n    function getAuctionPrice(uint256 _saleStartTime)\\n        external\\n        view\\n        returns (uint256);\\n}\\n\",\"keccak256\":\"0x095ad68a86af1c6c3d55f95a7ec829077ceb4798f0a6972c1ef548df0839cf93\",\"license\":\"MIT\"},\"contracts/interfaces/IPendingOwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\ninterface IPendingOwnableUpgradeable {\\n    event PendingOwnerSet(address indexed pendingOwner);\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    function owner() external view returns (address);\\n\\n    function pendingOwner() external view returns (address);\\n\\n    function setPendingOwner(address pendingOwner) external;\\n\\n    function revokePendingOwner() external;\\n\\n    function becomeOwner() external;\\n\\n    function renounceOwnership() external;\\n}\\n\",\"keccak256\":\"0x4a8abc7df1039d8119c2f75e656bc1398bea4609199cb0a7e1d70eaa49e68733\",\"license\":\"MIT\"},\"contracts/interfaces/ISafePausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol\\\";\\n\\nimport \\\"../interfaces/IPendingOwnableUpgradeable.sol\\\";\\n\\ninterface ISafePausableUpgradeable is\\n    IAccessControlEnumerableUpgradeable,\\n    IPendingOwnableUpgradeable\\n{\\n    function PAUSER_ROLE() external pure returns (bytes32);\\n\\n    function UNPAUSER_ROLE() external pure returns (bytes32);\\n\\n    function PAUSER_ADMIN_ROLE() external pure returns (bytes32);\\n\\n    function UNPAUSER_ADMIN_ROLE() external pure returns (bytes32);\\n\\n    function pause() external;\\n\\n    function unpause() external;\\n}\\n\",\"keccak256\":\"0x81b77fc513e18d58e3f4a4dfb52b73d1ff47d60b2e16cbc04e2499a53213976d\",\"license\":\"MIT\"},\"contracts/utils/PendingOwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nimport \\\"../interfaces/IPendingOwnableUpgradeable.sol\\\";\\nimport \\\"../LaunchpegErrors.sol\\\";\\n\\n/**\\n * @title Pending Ownable\\n * @author Trader Joe\\n * @notice Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions. The ownership of this contract is transferred using the\\n * push and pull pattern, the current owner set a `pendingOwner` using\\n * {setPendingOwner} and that address can then call {becomeOwner} to become the\\n * owner of that contract. The main logic and comments comes from OpenZeppelin's\\n * Ownable contract.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {setPendingOwner} and {becomeOwner}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner\\n */\\nabstract contract PendingOwnableUpgradeable is\\n    Initializable,\\n    ERC165Upgradeable,\\n    IPendingOwnableUpgradeable\\n{\\n    address private _owner;\\n    address private _pendingOwner;\\n\\n    /**\\n     * @notice Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        if (msg.sender != _owner) revert PendingOwnableUpgradeable__NotOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @notice Throws if called by any account other than the pending owner.\\n     */\\n    modifier onlyPendingOwner() {\\n        if (msg.sender != _pendingOwner || msg.sender == address(0))\\n            revert PendingOwnableUpgradeable__NotPendingOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Initializes the contract setting `msg.sender` as the initial owner\\n     */\\n    function __PendingOwnable_init() internal onlyInitializing {\\n        __ERC165_init();\\n        __PendingOwnable_init_unchained();\\n    }\\n\\n    function __PendingOwnable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(msg.sender);\\n    }\\n\\n    /**\\n     * @notice Returns the address of the current owner\\n     * @return The address of the current owner\\n     */\\n    function owner() public view virtual override returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @notice Returns the address of the current pending owner\\n     * @return The address of the current pending owner\\n     */\\n    function pendingOwner() public view virtual override returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /**\\n     * @notice Sets the pending owner address. This address will be able to become\\n     * the owner of this contract by calling {becomeOwner}\\n     */\\n    function setPendingOwner(address pendingOwner_)\\n        public\\n        virtual\\n        override\\n        onlyOwner\\n    {\\n        if (pendingOwner_ == address(0))\\n            revert PendingOwnableUpgradeable__AddressZero();\\n        if (_pendingOwner != address(0))\\n            revert PendingOwnableUpgradeable__PendingOwnerAlreadySet();\\n        _setPendingOwner(pendingOwner_);\\n    }\\n\\n    /**\\n     * @notice Revoke the pending owner address. This address will not be able to\\n     * call {becomeOwner} to become the owner anymore.\\n     * Can only be called by the owner\\n     */\\n    function revokePendingOwner() public virtual override onlyOwner {\\n        if (_pendingOwner == address(0))\\n            revert PendingOwnableUpgradeable__NoPendingOwner();\\n        _setPendingOwner(address(0));\\n    }\\n\\n    /**\\n     * @notice Transfers the ownership to the new owner (`pendingOwner`).\\n     * Can only be called by the pending owner\\n     */\\n    function becomeOwner() public virtual override onlyPendingOwner {\\n        _transferOwnership(msg.sender);\\n    }\\n\\n    /**\\n     * @notice Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual override onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == type(IPendingOwnableUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @notice Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     * @param _newOwner The address of the new owner\\n     */\\n    function _transferOwnership(address _newOwner) internal virtual {\\n        address _oldOwner = _owner;\\n        _owner = _newOwner;\\n        _pendingOwner = address(0);\\n        emit OwnershipTransferred(_oldOwner, _newOwner);\\n    }\\n\\n    /**\\n     * @notice Push the new owner, it needs to be pulled to be effective.\\n     * Internal function without access restriction.\\n     * @param pendingOwner_ The address of the new pending owner\\n     */\\n    function _setPendingOwner(address pendingOwner_) internal virtual {\\n        _pendingOwner = pendingOwner_;\\n        emit PendingOwnerSet(pendingOwner_);\\n    }\\n}\\n\",\"keccak256\":\"0xc00538b6e845aa8c71e0b1b2c79d49f29520f0a3fab9469b328d1d5c67f12af7\",\"license\":\"MIT\"},\"contracts/utils/SafeAccessControlEnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\\\";\\n\\nimport \\\"../LaunchpegErrors.sol\\\";\\nimport \\\"./PendingOwnableUpgradeable.sol\\\";\\n\\nabstract contract SafeAccessControlEnumerableUpgradeable is\\n    PendingOwnableUpgradeable,\\n    AccessControlEnumerableUpgradeable\\n{\\n    /**\\n     * @dev Modifier that checks that the role is not the `DEFAULT_ADMIN_ROLE`\\n     */\\n    modifier roleIsNotDefaultAdmin(bytes32 role) {\\n        if (role == DEFAULT_ADMIN_ROLE)\\n            revert SafeAccessControlEnumerableUpgradeable__RoleIsDefaultAdmin();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier that checks that an account is the `owner` or has a specific role\\n     */\\n    modifier onlyOwnerOrRole(bytes32 role) {\\n        if (msg.sender != owner() && !hasRole(role, msg.sender))\\n            revert SafeAccessControlEnumerableUpgradeable__SenderMissingRoleAndIsNotOwner(\\n                role,\\n                msg.sender\\n            );\\n        _;\\n    }\\n\\n    function __SafeAccessControlEnumerable_init() internal onlyInitializing {\\n        __PendingOwnable_init();\\n        __AccessControlEnumerable_init();\\n\\n        __SafeAccessControlEnumerable_init_unchained();\\n    }\\n\\n    function __SafeAccessControlEnumerable_init_unchained()\\n        internal\\n        onlyInitializing\\n    {}\\n\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(PendingOwnableUpgradeable, AccessControlEnumerableUpgradeable)\\n        returns (bool)\\n    {\\n        return\\n            PendingOwnableUpgradeable.supportsInterface(interfaceId) ||\\n            AccessControlEnumerableUpgradeable.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @notice Grants `role` to `account`.\\n     * @dev If `account` had not been already granted `role`, emits a {RoleGranted} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be the `owner` or have ``role``'s admin role.\\n     * - the role granted can't be `DEFAULT_ADMIN`\\n     *\\n     * @param role The role to grant\\n     * @param account The address of the account\\n     */\\n    function grantRole(bytes32 role, address account)\\n        public\\n        virtual\\n        override\\n        roleIsNotDefaultAdmin(role)\\n        onlyOwnerOrRole(getRoleAdmin(role))\\n    {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @notice Revokes `role` from `account`.\\n     * @dev If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be the `owner` or have ``role``'s admin role.\\n     * - the role revoked can't be `DEFAULT_ADMIN`\\n     *\\n     * @param role The role to revoke\\n     * @param account The address of the account\\n     */\\n    function revokeRole(bytes32 role, address account)\\n        public\\n        virtual\\n        override\\n        roleIsNotDefaultAdmin(role)\\n        onlyOwnerOrRole(getRoleAdmin(role))\\n    {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @notice Revokes `role` from the calling account.\\n     *\\n     * @dev Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     * - the role renounced can't be `DEFAULT_ADMIN`\\n     *\\n     * @param role The role to renounce\\n     * @param account The address of the account\\n     */\\n    function renounceRole(bytes32 role, address account)\\n        public\\n        virtual\\n        override\\n        roleIsNotDefaultAdmin(role)\\n    {\\n        super.renounceRole(role, account);\\n    }\\n\\n    /**\\n     * @notice Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     * @dev This also transfer the `DEFAULT_ADMIN` role to the new owner\\n     * @param _newOwner The address of the new owner\\n     */\\n    function _transferOwnership(address _newOwner) internal virtual override {\\n        _revokeRole(DEFAULT_ADMIN_ROLE, owner());\\n        if (_newOwner != address(0)) _grantRole(DEFAULT_ADMIN_ROLE, _newOwner);\\n\\n        super._transferOwnership(_newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x96a0962b07ed4ea2c7e2578755444e1c31cf4d698e2ae8c636f68ff2150edf3e\",\"license\":\"MIT\"},\"contracts/utils/SafePausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\n\\nimport \\\"../LaunchpegErrors.sol\\\";\\nimport \\\"../interfaces/ISafePausableUpgradeable.sol\\\";\\nimport \\\"./SafeAccessControlEnumerableUpgradeable.sol\\\";\\n\\nabstract contract SafePausableUpgradeable is\\n    SafeAccessControlEnumerableUpgradeable,\\n    PausableUpgradeable,\\n    ISafePausableUpgradeable\\n{\\n    bytes32 public constant override PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n    bytes32 public constant override UNPAUSER_ROLE = keccak256(\\\"UNPAUSER_ROLE\\\");\\n\\n    bytes32 public constant override PAUSER_ADMIN_ROLE =\\n        keccak256(\\\"PAUSER_ADMIN_ROLE\\\");\\n    bytes32 public constant override UNPAUSER_ADMIN_ROLE =\\n        keccak256(\\\"UNPAUSER_ADMIN_ROLE\\\");\\n\\n    function __SafePausable_init() internal onlyInitializing {\\n        __SafeAccessControlEnumerable_init();\\n        __Pausable_init();\\n\\n        __SafePausable_init_unchained();\\n    }\\n\\n    function __SafePausable_init_unchained() internal onlyInitializing {\\n        _setRoleAdmin(PAUSER_ROLE, PAUSER_ADMIN_ROLE);\\n        _setRoleAdmin(UNPAUSER_ROLE, UNPAUSER_ADMIN_ROLE);\\n    }\\n\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(SafeAccessControlEnumerableUpgradeable)\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == type(ISafePausableUpgradeable).interfaceId ||\\n            SafeAccessControlEnumerableUpgradeable.supportsInterface(\\n                interfaceId\\n            );\\n    }\\n\\n    /**\\n     * @notice Pauses the contract.\\n     * @dev Sensible part of a contract might be pausable for security reasons.\\n     *\\n     * Requirements:\\n     * - the caller must be the `owner` or have the ``role`` role.\\n     * - the contrat needs to be unpaused.\\n     */\\n    function pause() public virtual override onlyOwnerOrRole(PAUSER_ROLE) {\\n        if (paused()) revert SafePausableUpgradeable__AlreadyPaused();\\n        _pause();\\n    }\\n\\n    /**\\n     * @notice Unpauses the contract.\\n     * @dev Sensible part of a contract might be pausable for security reasons.\\n     *\\n     * Requirements:\\n     * - the caller must be the `owner` or have the ``role`` role.\\n     * - the contrat needs to be unpaused.\\n     */\\n    function unpause() public virtual override onlyOwnerOrRole(UNPAUSER_ROLE) {\\n        if (!paused()) revert SafePausableUpgradeable__AlreadyUnpaused();\\n        _unpause();\\n    }\\n}\\n\",\"keccak256\":\"0x160728cd5c6765035b0c8ff0aff1050e276532545572c804a8b0e777197ed934\",\"license\":\"MIT\"},\"erc721a-upgradeable/contracts/ERC721AUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nerror ApprovalCallerNotOwnerNorApproved();\\nerror ApprovalQueryForNonexistentToken();\\nerror ApproveToCaller();\\nerror ApprovalToCurrentOwner();\\nerror BalanceQueryForZeroAddress();\\nerror MintToZeroAddress();\\nerror MintZeroQuantity();\\nerror OwnerQueryForNonexistentToken();\\nerror TransferCallerNotOwnerNorApproved();\\nerror TransferFromIncorrectOwner();\\nerror TransferToNonERC721ReceiverImplementer();\\nerror TransferToZeroAddress();\\nerror URIQueryForNonexistentToken();\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension. Built to optimize for lower gas during batch mints.\\n *\\n * Assumes serials are sequentially minted starting at _startTokenId() (defaults to 0, e.g. 0, 1, 2, 3..).\\n *\\n * Assumes that an owner cannot have more than 2**64 - 1 (max value of uint64) of supply.\\n *\\n * Assumes that the maximum token id cannot exceed 2**256 - 1 (max value of uint256).\\n */\\ncontract ERC721AUpgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {\\n    using AddressUpgradeable for address;\\n    using StringsUpgradeable for uint256;\\n\\n    // Compiler will pack this into a single 256bit word.\\n    struct TokenOwnership {\\n        // The address of the owner.\\n        address addr;\\n        // Keeps track of the start time of ownership with minimal overhead for tokenomics.\\n        uint64 startTimestamp;\\n        // Whether the token has been burned.\\n        bool burned;\\n    }\\n\\n    // Compiler will pack this into a single 256bit word.\\n    struct AddressData {\\n        // Realistically, 2**64-1 is more than enough.\\n        uint64 balance;\\n        // Keeps track of mint count with minimal overhead for tokenomics.\\n        uint64 numberMinted;\\n        // Keeps track of burn count with minimal overhead for tokenomics.\\n        uint64 numberBurned;\\n        // For miscellaneous variable(s) pertaining to the address\\n        // (e.g. number of whitelist mint slots used).\\n        // If there are multiple variables, please pack them into a uint64.\\n        uint64 aux;\\n    }\\n\\n    // The tokenId of the next token to be minted.\\n    uint256 internal _currentIndex;\\n\\n    // The number of tokens burned.\\n    uint256 internal _burnCounter;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to ownership details\\n    // An empty struct value does not necessarily mean the token is unowned. See _ownershipOf implementation for details.\\n    mapping(uint256 => TokenOwnership) internal _ownerships;\\n\\n    // Mapping owner address to address data\\n    mapping(address => AddressData) private _addressData;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    function __ERC721A_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC721A_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC721A_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _currentIndex = _startTokenId();\\n    }\\n\\n    /**\\n     * To change the starting tokenId, please override this function.\\n     */\\n    function _startTokenId() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev Burned tokens are calculated here, use _totalMinted() if you want to count just minted tokens.\\n     */\\n    function totalSupply() public view returns (uint256) {\\n        // Counter underflow is impossible as _burnCounter cannot be incremented\\n        // more than _currentIndex - _startTokenId() times\\n        unchecked {\\n            return _currentIndex - _burnCounter - _startTokenId();\\n        }\\n    }\\n\\n    /**\\n     * Returns the total amount of tokens minted in the contract.\\n     */\\n    function _totalMinted() internal view returns (uint256) {\\n        // Counter underflow is impossible as _currentIndex does not decrement,\\n        // and it is initialized to _startTokenId()\\n        unchecked {\\n            return _currentIndex - _startTokenId();\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view override returns (uint256) {\\n        if (owner == address(0)) revert BalanceQueryForZeroAddress();\\n        return uint256(_addressData[owner].balance);\\n    }\\n\\n    /**\\n     * Returns the number of tokens minted by `owner`.\\n     */\\n    function _numberMinted(address owner) internal view returns (uint256) {\\n        return uint256(_addressData[owner].numberMinted);\\n    }\\n\\n    /**\\n     * Returns the number of tokens burned by or on behalf of `owner`.\\n     */\\n    function _numberBurned(address owner) internal view returns (uint256) {\\n        return uint256(_addressData[owner].numberBurned);\\n    }\\n\\n    /**\\n     * Returns the auxillary data for `owner`. (e.g. number of whitelist mint slots used).\\n     */\\n    function _getAux(address owner) internal view returns (uint64) {\\n        return _addressData[owner].aux;\\n    }\\n\\n    /**\\n     * Sets the auxillary data for `owner`. (e.g. number of whitelist mint slots used).\\n     * If there are multiple variables, please pack them into a uint64.\\n     */\\n    function _setAux(address owner, uint64 aux) internal {\\n        _addressData[owner].aux = aux;\\n    }\\n\\n    /**\\n     * Gas spent here starts off proportional to the maximum mint batch size.\\n     * It gradually moves to O(1) as tokens get transferred around in the collection over time.\\n     */\\n    function _ownershipOf(uint256 tokenId) internal view returns (TokenOwnership memory) {\\n        uint256 curr = tokenId;\\n\\n        unchecked {\\n            if (_startTokenId() <= curr && curr < _currentIndex) {\\n                TokenOwnership memory ownership = _ownerships[curr];\\n                if (!ownership.burned) {\\n                    if (ownership.addr != address(0)) {\\n                        return ownership;\\n                    }\\n                    // Invariant:\\n                    // There will always be an ownership that has an address and is not burned\\n                    // before an ownership that does not have an address and is not burned.\\n                    // Hence, curr will not underflow.\\n                    while (true) {\\n                        curr--;\\n                        ownership = _ownerships[curr];\\n                        if (ownership.addr != address(0)) {\\n                            return ownership;\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n        revert OwnerQueryForNonexistentToken();\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view override returns (address) {\\n        return _ownershipOf(tokenId).addr;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        if (!_exists(tokenId)) revert URIQueryForNonexistentToken();\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : '';\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return '';\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public override {\\n        address owner = ERC721AUpgradeable.ownerOf(tokenId);\\n        if (to == owner) revert ApprovalToCurrentOwner();\\n\\n        if (_msgSender() != owner && !isApprovedForAll(owner, _msgSender())) {\\n            revert ApprovalCallerNotOwnerNorApproved();\\n        }\\n\\n        _approve(to, tokenId, owner);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view override returns (address) {\\n        if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        if (operator == _msgSender()) revert ApproveToCaller();\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, '');\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        _transfer(from, to, tokenId);\\n        if (to.isContract() && !_checkContractOnERC721Received(from, to, tokenId, _data)) {\\n            revert TransferToNonERC721ReceiverImplementer();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     */\\n    function _exists(uint256 tokenId) internal view returns (bool) {\\n        return _startTokenId() <= tokenId && tokenId < _currentIndex && !_ownerships[tokenId].burned;\\n    }\\n\\n    function _safeMint(address to, uint256 quantity) internal {\\n        _safeMint(to, quantity, '');\\n    }\\n\\n    /**\\n     * @dev Safely mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called for each safe transfer.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 quantity,\\n        bytes memory _data\\n    ) internal {\\n        _mint(to, quantity, _data, true);\\n    }\\n\\n    /**\\n     * @dev Mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 quantity,\\n        bytes memory _data,\\n        bool safe\\n    ) internal {\\n        uint256 startTokenId = _currentIndex;\\n        if (to == address(0)) revert MintToZeroAddress();\\n        if (quantity == 0) revert MintZeroQuantity();\\n\\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\\n\\n        // Overflows are incredibly unrealistic.\\n        // balance or numberMinted overflow if current value of either + quantity > 1.8e19 (2**64) - 1\\n        // updatedIndex overflows if _currentIndex + quantity > 1.2e77 (2**256) - 1\\n        unchecked {\\n            _addressData[to].balance += uint64(quantity);\\n            _addressData[to].numberMinted += uint64(quantity);\\n\\n            _ownerships[startTokenId].addr = to;\\n            _ownerships[startTokenId].startTimestamp = uint64(block.timestamp);\\n\\n            uint256 updatedIndex = startTokenId;\\n            uint256 end = updatedIndex + quantity;\\n\\n            if (safe && to.isContract()) {\\n                do {\\n                    emit Transfer(address(0), to, updatedIndex);\\n                    if (!_checkContractOnERC721Received(address(0), to, updatedIndex++, _data)) {\\n                        revert TransferToNonERC721ReceiverImplementer();\\n                    }\\n                } while (updatedIndex != end);\\n                // Reentrancy protection\\n                if (_currentIndex != startTokenId) revert();\\n            } else {\\n                do {\\n                    emit Transfer(address(0), to, updatedIndex++);\\n                } while (updatedIndex != end);\\n            }\\n            _currentIndex = updatedIndex;\\n        }\\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) private {\\n        TokenOwnership memory prevOwnership = _ownershipOf(tokenId);\\n\\n        if (prevOwnership.addr != from) revert TransferFromIncorrectOwner();\\n\\n        bool isApprovedOrOwner = (_msgSender() == from ||\\n            isApprovedForAll(from, _msgSender()) ||\\n            getApproved(tokenId) == _msgSender());\\n\\n        if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();\\n        if (to == address(0)) revert TransferToZeroAddress();\\n\\n        _beforeTokenTransfers(from, to, tokenId, 1);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId, from);\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        // Counter overflow is incredibly unrealistic as tokenId would have to be 2**256.\\n        unchecked {\\n            _addressData[from].balance -= 1;\\n            _addressData[to].balance += 1;\\n\\n            TokenOwnership storage currSlot = _ownerships[tokenId];\\n            currSlot.addr = to;\\n            currSlot.startTimestamp = uint64(block.timestamp);\\n\\n            // If the ownership slot of tokenId+1 is not explicitly set, that means the transfer initiator owns it.\\n            // Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\\n            uint256 nextTokenId = tokenId + 1;\\n            TokenOwnership storage nextSlot = _ownerships[nextTokenId];\\n            if (nextSlot.addr == address(0)) {\\n                // This will suffice for checking _exists(nextTokenId),\\n                // as a burned slot cannot contain the zero address.\\n                if (nextTokenId != _currentIndex) {\\n                    nextSlot.addr = from;\\n                    nextSlot.startTimestamp = prevOwnership.startTimestamp;\\n                }\\n            }\\n        }\\n\\n        emit Transfer(from, to, tokenId);\\n        _afterTokenTransfers(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev This is equivalent to _burn(tokenId, false)\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        _burn(tokenId, false);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId, bool approvalCheck) internal virtual {\\n        TokenOwnership memory prevOwnership = _ownershipOf(tokenId);\\n\\n        address from = prevOwnership.addr;\\n\\n        if (approvalCheck) {\\n            bool isApprovedOrOwner = (_msgSender() == from ||\\n                isApprovedForAll(from, _msgSender()) ||\\n                getApproved(tokenId) == _msgSender());\\n\\n            if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();\\n        }\\n\\n        _beforeTokenTransfers(from, address(0), tokenId, 1);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId, from);\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        // Counter overflow is incredibly unrealistic as tokenId would have to be 2**256.\\n        unchecked {\\n            AddressData storage addressData = _addressData[from];\\n            addressData.balance -= 1;\\n            addressData.numberBurned += 1;\\n\\n            // Keep track of who burned the token, and the timestamp of burning.\\n            TokenOwnership storage currSlot = _ownerships[tokenId];\\n            currSlot.addr = from;\\n            currSlot.startTimestamp = uint64(block.timestamp);\\n            currSlot.burned = true;\\n\\n            // If the ownership slot of tokenId+1 is not explicitly set, that means the burn initiator owns it.\\n            // Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\\n            uint256 nextTokenId = tokenId + 1;\\n            TokenOwnership storage nextSlot = _ownerships[nextTokenId];\\n            if (nextSlot.addr == address(0)) {\\n                // This will suffice for checking _exists(nextTokenId),\\n                // as a burned slot cannot contain the zero address.\\n                if (nextTokenId != _currentIndex) {\\n                    nextSlot.addr = from;\\n                    nextSlot.startTimestamp = prevOwnership.startTimestamp;\\n                }\\n            }\\n        }\\n\\n        emit Transfer(from, address(0), tokenId);\\n        _afterTokenTransfers(from, address(0), tokenId, 1);\\n\\n        // Overflow not possible, as _burnCounter cannot be exceed _currentIndex times.\\n        unchecked {\\n            _burnCounter++;\\n        }\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(\\n        address to,\\n        uint256 tokenId,\\n        address owner\\n    ) private {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(owner, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkContractOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n            return retval == IERC721ReceiverUpgradeable(to).onERC721Received.selector;\\n        } catch (bytes memory reason) {\\n            if (reason.length == 0) {\\n                revert TransferToNonERC721ReceiverImplementer();\\n            } else {\\n                assembly {\\n                    revert(add(32, reason), mload(reason))\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before a set of serially-ordered token ids are about to be transferred. This includes minting.\\n     * And also called before burning one token.\\n     *\\n     * startTokenId - the first token id to be transferred\\n     * quantity - the amount to be transferred\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, `tokenId` will be burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _beforeTokenTransfers(\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after a set of serially-ordered token ids have been transferred. This includes\\n     * minting.\\n     * And also called after one token has been burned.\\n     *\\n     * startTokenId - the first token id to be transferred\\n     * quantity - the amount to be transferred\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` has been\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` has been minted for `to`.\\n     * - When `to` is zero, `tokenId` has been burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _afterTokenTransfers(\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[42] private __gap;\\n}\\n\",\"keccak256\":\"0x261da8ec505b55cf307604eefd0f0e6e374860ca4730efad50b87e43f7660b66\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "author": "Trader Joe",
    "events": {
      "AuctionSaleStartTimeSet(uint256)": {
        "details": "Emitted on setAuctionSaleStartTime()",
        "params": {
          "auctionSaleStartTime": "New auction sale start time"
        }
      },
      "Initialized(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)": {
        "details": "Emitted on initializePhases()",
        "params": {
          "allowlistDiscountPercent": "Discount applied to the last auction price during the allowlist mint",
          "allowlistStartTime": "allowlist mint start time in seconds",
          "auctionDropInterval": "Time elapsed between each drop in price in seconds",
          "auctionEndPrice": "Auction floor price in AVAX",
          "auctionSaleStartTime": "Auction start time in seconds",
          "auctionStartPrice": "Auction start price in AVAX",
          "preMintStartTime": "Pre-mint start time in seconds",
          "publicSaleDiscountPercent": "Discount applied to the last auction price during the public sale",
          "publicSaleEndTime": "Public sale end time in seconds",
          "publicSaleStartTime": "Public sale start time in seconds"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "allowlistMint(uint256)": {
        "params": {
          "_quantity": "Quantity of NFTs to mint"
        }
      },
      "allowlistPrice()": {
        "returns": {
          "_0": "allowlistSalePrice Mint List sale price"
        }
      },
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "auctionMint(uint256)": {
        "details": "The price decreases every `auctionDropInterval` by `auctionDropPerStep`",
        "params": {
          "_quantity": "Quantity of NFTs to buy"
        }
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "batchMintPreMintedNFTs(uint256)": {
        "params": {
          "_maxQuantity": "Max quantity of NFTs to mint"
        }
      },
      "currentPhase()": {
        "returns": {
          "_0": "phase Current phase"
        }
      },
      "devMint(uint256)": {
        "details": "Can only mint up to `amountForDevs`",
        "params": {
          "_quantity": "Quantity of NFTs to mint"
        }
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "getAuctionPrice(uint256)": {
        "params": {
          "_saleStartTime": "Auction sale start time"
        },
        "returns": {
          "_0": "auctionSalePrice Auction sale price"
        }
      },
      "getOwnershipData(uint256)": {
        "params": {
          "_tokenId": "Token ID"
        },
        "returns": {
          "_0": "TokenOwnership Ownership struct for a specific token ID"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleMember(bytes32,uint256)": {
        "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
      },
      "grantRole(bytes32,address)": {
        "details": "If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must be the `owner` or have ``role``'s admin role. - the role granted can't be `DEFAULT_ADMIN`",
        "params": {
          "account": "The address of the account",
          "role": "The role to grant"
        }
      },
      "hasBatchToReveal()": {
        "returns": {
          "_0": "bool Whether reveal can be triggered or not",
          "_1": "uint256 The number of the next batch that will be revealed"
        }
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "initialize(string,string,address,address,uint256,uint256,uint256,uint256,uint256)": {
        "params": {
          "_amountForAllowlist": "Amount of NFTs available for the allowlist mint (e.g 1000)",
          "_amountForAuction": "Amount of NFTs available for the auction (e.g 8000)",
          "_amountForDevs": "Amount of NFTs reserved for `projectOwner` (e.g 200)",
          "_collectionSize": "The collection size (e.g 10000)",
          "_maxBatchSize": "Max amount of NFTs that can be minted at once",
          "_name": "ERC721 name",
          "_projectOwner": "The project owner",
          "_royaltyReceiver": "Royalty fee collector",
          "_symbol": "ERC721 symbol"
        }
      },
      "initializeJoeFee(uint256,address)": {
        "params": {
          "_joeFeeCollector": "The address to which the fees on the sale will be sent",
          "_joeFeePercent": "The fees collected by Joepegs on the sale benefits"
        }
      },
      "initializePhases(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)": {
        "details": "Can only be called once",
        "params": {
          "_allowlistDiscountPercent": "Discount applied to the last auction price during the allowlist mint",
          "_allowlistStartTime": "Allowlist mint start time in seconds",
          "_auctionDropInterval": "Time elapsed between each drop in price in seconds",
          "_auctionEndPrice": "Auction floor price in AVAX",
          "_auctionSaleStartTime": "Auction start time in seconds",
          "_auctionStartPrice": "Auction start price in AVAX",
          "_preMintStartTime": "Pre-mint start time in seconds",
          "_publicSaleDiscountPercent": "Discount applied to the last auction price during the public sale",
          "_publicSaleEndTime": "Public sale end time in seconds",
          "_publicSaleStartTime": "Public sale start time in seconds"
        }
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "numberMinted(address)": {
        "params": {
          "_owner": "The owner of the NFTs"
        },
        "returns": {
          "_0": "numberMinted Number of NFTs minted"
        }
      },
      "owner()": {
        "returns": {
          "_0": "The address of the current owner"
        }
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "pause()": {
        "details": "Sensible part of a contract might be pausable for security reasons. Requirements: - the caller must be the `owner` or have the ``role`` role. - the contrat needs to be unpaused."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "pendingOwner()": {
        "returns": {
          "_0": "The address of the current pending owner"
        }
      },
      "preMint(uint256)": {
        "params": {
          "_quantity": "Quantity of NFTs to mint"
        }
      },
      "publicSaleMint(uint256)": {
        "params": {
          "_quantity": "Quantity of NFTs to mint"
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. - the role renounced can't be `DEFAULT_ADMIN`",
        "params": {
          "account": "The address of the account",
          "role": "The role to renounce"
        }
      },
      "revokeRole(bytes32,address)": {
        "details": "If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be the `owner` or have ``role``'s admin role. - the role revoked can't be `DEFAULT_ADMIN`",
        "params": {
          "account": "The address of the account",
          "role": "The role to revoke"
        }
      },
      "royaltyInfo(uint256,uint256)": {
        "details": "Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of exchange. The royalty amount is denominated and should be payed in that same unit of exchange."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "salePrice()": {
        "returns": {
          "_0": "publicSalePrice Public sale price"
        }
      },
      "seedAllowlist(address[],uint256[])": {
        "params": {
          "_addresses": "List of addresses allowed to mint during the allowlist phase",
          "_numNfts": "List of NFT quantities mintable per address"
        }
      },
      "setAllowlistStartTime(uint256)": {
        "details": "Only callable by owner",
        "params": {
          "_allowlistStartTime": "New allowlist start time"
        }
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "setAuctionSaleStartTime(uint256)": {
        "details": "Only callable by owner",
        "params": {
          "_auctionSaleStartTime": "New auction sale start time"
        }
      },
      "setBaseURI(string)": {
        "details": "This sets the URI for revealed tokens Only callable by project owner",
        "params": {
          "_baseURI": "Base URI to be set"
        }
      },
      "setBatchReveal(address)": {
        "details": "Can be set to zero address to disable batch reveal"
      },
      "setPreMintStartTime(uint256)": {
        "details": "Only callable by owner",
        "params": {
          "_preMintStartTime": "New pre-mint start time"
        }
      },
      "setPublicSaleEndTime(uint256)": {
        "details": "Only callable by owner",
        "params": {
          "_publicSaleEndTime": "New public sale end time"
        }
      },
      "setPublicSaleStartTime(uint256)": {
        "details": "Only callable by owner",
        "params": {
          "_publicSaleStartTime": "New public sale start time"
        }
      },
      "setRoyaltyInfo(address,uint96)": {
        "params": {
          "_feePercent": "Royalty fee percent in basis point",
          "_receiver": "Royalty fee collector"
        }
      },
      "setUnrevealedURI(string)": {
        "details": "Only callable by project owner",
        "params": {
          "_unrevealedURI": "Unrevealed URI to be set"
        }
      },
      "setWithdrawAVAXStartTime(uint256)": {
        "params": {
          "_withdrawAVAXStartTime": "New public sale end time"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these IDs are created. This function call must use less than 30 000 gas.",
        "params": {
          "_interfaceId": "InterfaceId to consider. Comes from type(InterfaceContract).interfaceId"
        },
        "returns": {
          "_0": "isInterfaceSupported True if the considered interface is supported"
        }
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "params": {
          "_id": "Token id"
        },
        "returns": {
          "_0": "URI Token URI"
        }
      },
      "totalSupply()": {
        "details": "Burned tokens are calculated here, use _totalMinted() if you want to count just minted tokens."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "unpause()": {
        "details": "Sensible part of a contract might be pausable for security reasons. Requirements: - the caller must be the `owner` or have the ``role`` role. - the contrat needs to be unpaused."
      },
      "withdrawAVAX(address)": {
        "params": {
          "_to": "Recipient of the earned AVAX"
        }
      }
    },
    "stateVariables": {
      "allowlistDiscountPercent": {
        "details": "In basis points e.g 500 for 5%"
      },
      "auctionDropInterval": {
        "details": "In seconds"
      },
      "auctionEndPrice": {
        "details": "auctionEndPrice is scaled to 1e18"
      },
      "auctionSaleDuration": {
        "details": "allowlistStartTime - auctionSaleStartTime"
      },
      "auctionSaleStartTime": {
        "details": "Timestamp"
      },
      "auctionStartPrice": {
        "details": "auctionStartPrice is scaled to 1e18"
      },
      "lastAuctionPrice": {
        "details": "lastAuctionPrice is scaled to 1e18"
      },
      "publicSaleDiscountPercent": {
        "details": "In basis points e.g 2500 for 25%"
      }
    },
    "title": "Launchpeg",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "BASIS_POINT_PRECISION()": {
        "notice": "Percentage base point"
      },
      "PROJECT_OWNER_ROLE()": {
        "notice": "Role granted to project owners"
      },
      "allowlist(address)": {
        "notice": "The amount of NFTs each allowed address can mint during the pre-mint or allowlist mint"
      },
      "allowlistDiscountPercent()": {
        "notice": "The discount applied to the last auction price during the allowlist mint"
      },
      "allowlistMint(uint256)": {
        "notice": "Mint NFTs during the allowlist mint"
      },
      "allowlistPrice()": {
        "notice": "Returns the price of the allowlist mint"
      },
      "allowlistStartTime()": {
        "notice": "Start time of the allowlist mint in seconds"
      },
      "amountBatchMinted()": {
        "notice": "Tracks the amount of NFTs batch minted"
      },
      "amountForAllowlist()": {
        "notice": "Amount of NFTs available for the allowlist mint (e.g 1000)"
      },
      "amountForAuction()": {
        "notice": "Amount of NFTs available for the auction (e.g 8000) Unsold items are put up for sale during the public sale."
      },
      "amountForDevs()": {
        "notice": "Amount of NFTs reserved for the project owner (e.g 200)"
      },
      "amountMintedByDevs()": {
        "notice": "Tracks the amount of NFTs minted by `projectOwner`"
      },
      "amountMintedDuringAllowlist()": {
        "notice": "Tracks the amount of NFTs minted on Allowlist phase"
      },
      "amountMintedDuringAuction()": {
        "notice": "Tracks the amount of NFTs minted during the dutch auction"
      },
      "amountMintedDuringPreMint()": {
        "notice": "Tracks the amount of NFTs minted in the Pre-Mint phase"
      },
      "amountMintedDuringPublicSale()": {
        "notice": "Tracks the amount of NFTs minted on Public Sale phase"
      },
      "auctionDropInterval()": {
        "notice": "Time elapsed between each drop in price"
      },
      "auctionDropPerStep()": {
        "notice": "Amount in AVAX deducted at each interval"
      },
      "auctionEndPrice()": {
        "notice": "Auction floor price in AVAX"
      },
      "auctionMint(uint256)": {
        "notice": "Mint NFTs during the dutch auction"
      },
      "auctionSaleDuration()": {
        "notice": "Duration of the auction in seconds"
      },
      "auctionSaleStartTime()": {
        "notice": "Start time of the dutch auction in seconds"
      },
      "auctionStartPrice()": {
        "notice": "Auction start price in AVAX"
      },
      "baseURI()": {
        "notice": "Token URI after collection reveal"
      },
      "batchMintPreMintedNFTs(uint256)": {
        "notice": "Batch mint NFTs requested during the pre-mint"
      },
      "becomeOwner()": {
        "notice": "Transfers the ownership to the new owner (`pendingOwner`). Can only be called by the pending owner"
      },
      "collectionSize()": {
        "notice": "The collection size (e.g 10000)"
      },
      "currentPhase()": {
        "notice": "Returns the current phase"
      },
      "devMint(uint256)": {
        "notice": "Mint NFTs to the project owner"
      },
      "getAuctionPrice(uint256)": {
        "notice": "Returns the current price of the dutch auction"
      },
      "getOwnershipData(uint256)": {
        "notice": "Returns the ownership data of a specific token ID"
      },
      "grantRole(bytes32,address)": {
        "notice": "Grants `role` to `account`."
      },
      "hasBatchToReveal()": {
        "notice": "Tells you if a batch can be revealed"
      },
      "initialize(string,string,address,address,uint256,uint256,uint256,uint256,uint256)": {
        "notice": "Launchpeg initialization Can only be called once"
      },
      "initializeJoeFee(uint256,address)": {
        "notice": "Initialize the sales fee percent taken by Joepegs and address that collects the fees"
      },
      "initializePhases(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)": {
        "notice": "Initialize the three phases of the sale"
      },
      "joeFeeCollector()": {
        "notice": "The address to which the fees on the sale will be sent"
      },
      "joeFeePercent()": {
        "notice": "The fees collected by Joepegs on the sale benefits"
      },
      "lastAuctionPrice()": {
        "notice": "The price of the last NFT sold during the auction"
      },
      "maxBatchSize()": {
        "notice": "Max amount of NFTs that can be minted at once"
      },
      "maxPerAddressDuringMint()": {
        "notice": "Max amount of NFTs an address can mint"
      },
      "numberMinted(address)": {
        "notice": "Returns the number of NFTs minted by a specific address"
      },
      "owner()": {
        "notice": "Returns the address of the current owner"
      },
      "pause()": {
        "notice": "Pauses the contract."
      },
      "pendingOwner()": {
        "notice": "Returns the address of the current pending owner"
      },
      "preMint(uint256)": {
        "notice": "Mint NFTs during the pre-mint"
      },
      "preMintStartTime()": {
        "notice": "Start time of the pre-mint in seconds"
      },
      "publicSaleDiscountPercent()": {
        "notice": "The discount applied to the last auction price during the public sale"
      },
      "publicSaleEndTime()": {
        "notice": "End time of the public sale in seconds"
      },
      "publicSaleMint(uint256)": {
        "notice": "Mint NFTs during the public sale"
      },
      "publicSaleStartTime()": {
        "notice": "Start time of the public sale in seconds"
      },
      "renounceOwnership()": {
        "notice": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "renounceRole(bytes32,address)": {
        "notice": "Revokes `role` from the calling account."
      },
      "revealNextBatch()": {
        "notice": "Reveals the next batch if the reveal conditions are met"
      },
      "revokePendingOwner()": {
        "notice": "Revoke the pending owner address. This address will not be able to call {becomeOwner} to become the owner anymore. Can only be called by the owner"
      },
      "revokeRole(bytes32,address)": {
        "notice": "Revokes `role` from `account`."
      },
      "salePrice()": {
        "notice": "Returns the price of the public sale"
      },
      "seedAllowlist(address[],uint256[])": {
        "notice": "Set amount of NFTs mintable per address during the allowlist phase"
      },
      "setAllowlistStartTime(uint256)": {
        "notice": "Set the allowlist start time. Can only be set after phases have been initialized."
      },
      "setAuctionSaleStartTime(uint256)": {
        "notice": "Set the auction sale start time. Can only be set after phases have been initialized."
      },
      "setBaseURI(string)": {
        "notice": "Set the base URI"
      },
      "setBatchReveal(address)": {
        "notice": "Update batch reveal"
      },
      "setPendingOwner(address)": {
        "notice": "Sets the pending owner address. This address will be able to become the owner of this contract by calling {becomeOwner}"
      },
      "setPreMintStartTime(uint256)": {
        "notice": "Set the pre-mint start time. Can only be set after phases have been initialized."
      },
      "setPublicSaleEndTime(uint256)": {
        "notice": "Set the public sale end time. Can only be set after phases have been initialized."
      },
      "setPublicSaleStartTime(uint256)": {
        "notice": "Set the public sale start time. Can only be set after phases have been initialized."
      },
      "setRoyaltyInfo(address,uint96)": {
        "notice": "Set the royalty fee"
      },
      "setUnrevealedURI(string)": {
        "notice": "Set the unrevealed URI"
      },
      "setWithdrawAVAXStartTime(uint256)": {
        "notice": "Set the withdraw AVAX start time."
      },
      "tokenURI(uint256)": {
        "notice": "Returns the Uniform Resource Identifier (URI) for `tokenId` token."
      },
      "unpause()": {
        "notice": "Unpauses the contract."
      },
      "unrevealedURI()": {
        "notice": "Token URI before the collection reveal"
      },
      "withdrawAVAX(address)": {
        "notice": "Withdraw AVAX to the given recipient"
      },
      "withdrawAVAXStartTime()": {
        "notice": "Start time when funds can be withdrawn"
      }
    },
    "notice": "Implements a fair and gas efficient NFT launch mechanism. The sale takes place in 3 phases: dutch auction, allowlist mint, public sale.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 810,
        "contract": "contracts/Launchpeg.sol:Launchpeg",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 813,
        "contract": "contracts/Launchpeg.sol:Launchpeg",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1710,
        "contract": "contracts/Launchpeg.sol:Launchpeg",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1957,
        "contract": "contracts/Launchpeg.sol:Launchpeg",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 11650,
        "contract": "contracts/Launchpeg.sol:Launchpeg",
        "label": "_currentIndex",
        "offset": 0,
        "slot": "101",
        "type": "t_uint256"
      },
      {
        "astId": 11652,
        "contract": "contracts/Launchpeg.sol:Launchpeg",
        "label": "_burnCounter",
        "offset": 0,
        "slot": "102",
        "type": "t_uint256"
      },
      {
        "astId": 11654,
        "contract": "contracts/Launchpeg.sol:Launchpeg",
        "label": "_name",
        "offset": 0,
        "slot": "103",
        "type": "t_string_storage"
      },
      {
        "astId": 11656,
        "contract": "contracts/Launchpeg.sol:Launchpeg",
        "label": "_symbol",
        "offset": 0,
        "slot": "104",
        "type": "t_string_storage"
      },
      {
        "astId": 11661,
        "contract": "contracts/Launchpeg.sol:Launchpeg",
        "label": "_ownerships",
        "offset": 0,
        "slot": "105",
        "type": "t_mapping(t_uint256,t_struct(TokenOwnership)11639_storage)"
      },
      {
        "astId": 11666,
        "contract": "contracts/Launchpeg.sol:Launchpeg",
        "label": "_addressData",
        "offset": 0,
        "slot": "106",
        "type": "t_mapping(t_address,t_struct(AddressData)11648_storage)"
      },
      {
        "astId": 11670,
        "contract": "contracts/Launchpeg.sol:Launchpeg",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "107",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 11676,
        "contract": "contracts/Launchpeg.sol:Launchpeg",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "108",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 12924,
        "contract": "contracts/Launchpeg.sol:Launchpeg",
        "label": "__gap",
        "offset": 0,
        "slot": "109",
        "type": "t_array(t_uint256)42_storage"
      },
      {
        "astId": 11028,
        "contract": "contracts/Launchpeg.sol:Launchpeg",
        "label": "_owner",
        "offset": 0,
        "slot": "151",
        "type": "t_address"
      },
      {
        "astId": 11030,
        "contract": "contracts/Launchpeg.sol:Launchpeg",
        "label": "_pendingOwner",
        "offset": 0,
        "slot": "152",
        "type": "t_address"
      },
      {
        "astId": 273,
        "contract": "contracts/Launchpeg.sol:Launchpeg",
        "label": "_roles",
        "offset": 0,
        "slot": "153",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)268_storage)"
      },
      {
        "astId": 561,
        "contract": "contracts/Launchpeg.sol:Launchpeg",
        "label": "__gap",
        "offset": 0,
        "slot": "154",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 122,
        "contract": "contracts/Launchpeg.sol:Launchpeg",
        "label": "_roleMembers",
        "offset": 0,
        "slot": "203",
        "type": "t_mapping(t_bytes32,t_struct(AddressSet)2282_storage)"
      },
      {
        "astId": 232,
        "contract": "contracts/Launchpeg.sol:Launchpeg",
        "label": "__gap",
        "offset": 0,
        "slot": "204",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 898,
        "contract": "contracts/Launchpeg.sol:Launchpeg",
        "label": "_paused",
        "offset": 0,
        "slot": "253",
        "type": "t_bool"
      },
      {
        "astId": 987,
        "contract": "contracts/Launchpeg.sol:Launchpeg",
        "label": "__gap",
        "offset": 0,
        "slot": "254",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 1002,
        "contract": "contracts/Launchpeg.sol:Launchpeg",
        "label": "_status",
        "offset": 0,
        "slot": "303",
        "type": "t_uint256"
      },
      {
        "astId": 1046,
        "contract": "contracts/Launchpeg.sol:Launchpeg",
        "label": "__gap",
        "offset": 0,
        "slot": "304",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 1240,
        "contract": "contracts/Launchpeg.sol:Launchpeg",
        "label": "_defaultRoyaltyInfo",
        "offset": 0,
        "slot": "353",
        "type": "t_struct(RoyaltyInfo)1237_storage"
      },
      {
        "astId": 1245,
        "contract": "contracts/Launchpeg.sol:Launchpeg",
        "label": "_tokenRoyaltyInfo",
        "offset": 0,
        "slot": "354",
        "type": "t_mapping(t_uint256,t_struct(RoyaltyInfo)1237_storage)"
      },
      {
        "astId": 1425,
        "contract": "contracts/Launchpeg.sol:Launchpeg",
        "label": "__gap",
        "offset": 0,
        "slot": "355",
        "type": "t_array(t_uint256)48_storage"
      },
      {
        "astId": 3275,
        "contract": "contracts/Launchpeg.sol:Launchpeg",
        "label": "batchReveal",
        "offset": 0,
        "slot": "403",
        "type": "t_contract(IBatchReveal)10547"
      },
      {
        "astId": 3286,
        "contract": "contracts/Launchpeg.sol:Launchpeg",
        "label": "collectionSize",
        "offset": 0,
        "slot": "404",
        "type": "t_uint256"
      },
      {
        "astId": 3290,
        "contract": "contracts/Launchpeg.sol:Launchpeg",
        "label": "amountForDevs",
        "offset": 0,
        "slot": "405",
        "type": "t_uint256"
      },
      {
        "astId": 3294,
        "contract": "contracts/Launchpeg.sol:Launchpeg",
        "label": "amountForAllowlist",
        "offset": 0,
        "slot": "406",
        "type": "t_uint256"
      },
      {
        "astId": 3298,
        "contract": "contracts/Launchpeg.sol:Launchpeg",
        "label": "maxBatchSize",
        "offset": 0,
        "slot": "407",
        "type": "t_uint256"
      },
      {
        "astId": 3302,
        "contract": "contracts/Launchpeg.sol:Launchpeg",
        "label": "maxPerAddressDuringMint",
        "offset": 0,
        "slot": "408",
        "type": "t_uint256"
      },
      {
        "astId": 3306,
        "contract": "contracts/Launchpeg.sol:Launchpeg",
        "label": "joeFeePercent",
        "offset": 0,
        "slot": "409",
        "type": "t_uint256"
      },
      {
        "astId": 3310,
        "contract": "contracts/Launchpeg.sol:Launchpeg",
        "label": "joeFeeCollector",
        "offset": 0,
        "slot": "410",
        "type": "t_address"
      },
      {
        "astId": 3318,
        "contract": "contracts/Launchpeg.sol:Launchpeg",
        "label": "baseURI",
        "offset": 0,
        "slot": "411",
        "type": "t_string_storage"
      },
      {
        "astId": 3322,
        "contract": "contracts/Launchpeg.sol:Launchpeg",
        "label": "unrevealedURI",
        "offset": 0,
        "slot": "412",
        "type": "t_string_storage"
      },
      {
        "astId": 3328,
        "contract": "contracts/Launchpeg.sol:Launchpeg",
        "label": "allowlist",
        "offset": 0,
        "slot": "413",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3333,
        "contract": "contracts/Launchpeg.sol:Launchpeg",
        "label": "userAddressToPreMintAmount",
        "offset": 0,
        "slot": "414",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3337,
        "contract": "contracts/Launchpeg.sol:Launchpeg",
        "label": "amountMintedByDevs",
        "offset": 0,
        "slot": "415",
        "type": "t_uint256"
      },
      {
        "astId": 3341,
        "contract": "contracts/Launchpeg.sol:Launchpeg",
        "label": "amountMintedDuringPreMint",
        "offset": 0,
        "slot": "416",
        "type": "t_uint256"
      },
      {
        "astId": 3345,
        "contract": "contracts/Launchpeg.sol:Launchpeg",
        "label": "amountBatchMinted",
        "offset": 0,
        "slot": "417",
        "type": "t_uint256"
      },
      {
        "astId": 3349,
        "contract": "contracts/Launchpeg.sol:Launchpeg",
        "label": "amountMintedDuringAllowlist",
        "offset": 0,
        "slot": "418",
        "type": "t_uint256"
      },
      {
        "astId": 3353,
        "contract": "contracts/Launchpeg.sol:Launchpeg",
        "label": "amountMintedDuringPublicSale",
        "offset": 0,
        "slot": "419",
        "type": "t_uint256"
      },
      {
        "astId": 3357,
        "contract": "contracts/Launchpeg.sol:Launchpeg",
        "label": "preMintStartTime",
        "offset": 0,
        "slot": "420",
        "type": "t_uint256"
      },
      {
        "astId": 3361,
        "contract": "contracts/Launchpeg.sol:Launchpeg",
        "label": "allowlistStartTime",
        "offset": 0,
        "slot": "421",
        "type": "t_uint256"
      },
      {
        "astId": 3365,
        "contract": "contracts/Launchpeg.sol:Launchpeg",
        "label": "publicSaleStartTime",
        "offset": 0,
        "slot": "422",
        "type": "t_uint256"
      },
      {
        "astId": 3369,
        "contract": "contracts/Launchpeg.sol:Launchpeg",
        "label": "publicSaleEndTime",
        "offset": 0,
        "slot": "423",
        "type": "t_uint256"
      },
      {
        "astId": 3373,
        "contract": "contracts/Launchpeg.sol:Launchpeg",
        "label": "withdrawAVAXStartTime",
        "offset": 0,
        "slot": "424",
        "type": "t_uint256"
      },
      {
        "astId": 3378,
        "contract": "contracts/Launchpeg.sol:Launchpeg",
        "label": "preMintQueue",
        "offset": 0,
        "slot": "425",
        "type": "t_array(t_struct(PreMintData)3386_storage)dyn_storage"
      },
      {
        "astId": 3381,
        "contract": "contracts/Launchpeg.sol:Launchpeg",
        "label": "preMintQueueIdx",
        "offset": 0,
        "slot": "426",
        "type": "t_uint256"
      },
      {
        "astId": 6742,
        "contract": "contracts/Launchpeg.sol:Launchpeg",
        "label": "amountForAuction",
        "offset": 0,
        "slot": "427",
        "type": "t_uint256"
      },
      {
        "astId": 6746,
        "contract": "contracts/Launchpeg.sol:Launchpeg",
        "label": "auctionSaleStartTime",
        "offset": 0,
        "slot": "428",
        "type": "t_uint256"
      },
      {
        "astId": 6750,
        "contract": "contracts/Launchpeg.sol:Launchpeg",
        "label": "auctionStartPrice",
        "offset": 0,
        "slot": "429",
        "type": "t_uint256"
      },
      {
        "astId": 6754,
        "contract": "contracts/Launchpeg.sol:Launchpeg",
        "label": "auctionEndPrice",
        "offset": 0,
        "slot": "430",
        "type": "t_uint256"
      },
      {
        "astId": 6758,
        "contract": "contracts/Launchpeg.sol:Launchpeg",
        "label": "auctionSaleDuration",
        "offset": 0,
        "slot": "431",
        "type": "t_uint256"
      },
      {
        "astId": 6762,
        "contract": "contracts/Launchpeg.sol:Launchpeg",
        "label": "auctionDropInterval",
        "offset": 0,
        "slot": "432",
        "type": "t_uint256"
      },
      {
        "astId": 6766,
        "contract": "contracts/Launchpeg.sol:Launchpeg",
        "label": "auctionDropPerStep",
        "offset": 0,
        "slot": "433",
        "type": "t_uint256"
      },
      {
        "astId": 6770,
        "contract": "contracts/Launchpeg.sol:Launchpeg",
        "label": "allowlistDiscountPercent",
        "offset": 0,
        "slot": "434",
        "type": "t_uint256"
      },
      {
        "astId": 6774,
        "contract": "contracts/Launchpeg.sol:Launchpeg",
        "label": "publicSaleDiscountPercent",
        "offset": 0,
        "slot": "435",
        "type": "t_uint256"
      },
      {
        "astId": 6778,
        "contract": "contracts/Launchpeg.sol:Launchpeg",
        "label": "amountMintedDuringAuction",
        "offset": 0,
        "slot": "436",
        "type": "t_uint256"
      },
      {
        "astId": 6782,
        "contract": "contracts/Launchpeg.sol:Launchpeg",
        "label": "lastAuctionPrice",
        "offset": 0,
        "slot": "437",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(PreMintData)3386_storage)dyn_storage": {
        "base": "t_struct(PreMintData)3386_storage",
        "encoding": "dynamic_array",
        "label": "struct BaseLaunchpeg.PreMintData[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)42_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[42]",
        "numberOfBytes": "1344"
      },
      "t_array(t_uint256)48_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[48]",
        "numberOfBytes": "1536"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IBatchReveal)10547": {
        "encoding": "inplace",
        "label": "contract IBatchReveal",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_struct(AddressData)11648_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ERC721AUpgradeable.AddressData)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressData)11648_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(AddressSet)2282_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)2282_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)268_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)268_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(RoyaltyInfo)1237_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ERC2981Upgradeable.RoyaltyInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(RoyaltyInfo)1237_storage"
      },
      "t_mapping(t_uint256,t_struct(TokenOwnership)11639_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ERC721AUpgradeable.TokenOwnership)",
        "numberOfBytes": "32",
        "value": "t_struct(TokenOwnership)11639_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressData)11648_storage": {
        "encoding": "inplace",
        "label": "struct ERC721AUpgradeable.AddressData",
        "members": [
          {
            "astId": 11641,
            "contract": "contracts/Launchpeg.sol:Launchpeg",
            "label": "balance",
            "offset": 0,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 11643,
            "contract": "contracts/Launchpeg.sol:Launchpeg",
            "label": "numberMinted",
            "offset": 8,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 11645,
            "contract": "contracts/Launchpeg.sol:Launchpeg",
            "label": "numberBurned",
            "offset": 16,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 11647,
            "contract": "contracts/Launchpeg.sol:Launchpeg",
            "label": "aux",
            "offset": 24,
            "slot": "0",
            "type": "t_uint64"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(AddressSet)2282_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSetUpgradeable.AddressSet",
        "members": [
          {
            "astId": 2281,
            "contract": "contracts/Launchpeg.sol:Launchpeg",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)1981_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(PreMintData)3386_storage": {
        "encoding": "inplace",
        "label": "struct BaseLaunchpeg.PreMintData",
        "members": [
          {
            "astId": 3383,
            "contract": "contracts/Launchpeg.sol:Launchpeg",
            "label": "sender",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 3385,
            "contract": "contracts/Launchpeg.sol:Launchpeg",
            "label": "quantity",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoleData)268_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 265,
            "contract": "contracts/Launchpeg.sol:Launchpeg",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 267,
            "contract": "contracts/Launchpeg.sol:Launchpeg",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoyaltyInfo)1237_storage": {
        "encoding": "inplace",
        "label": "struct ERC2981Upgradeable.RoyaltyInfo",
        "members": [
          {
            "astId": 1234,
            "contract": "contracts/Launchpeg.sol:Launchpeg",
            "label": "receiver",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1236,
            "contract": "contracts/Launchpeg.sol:Launchpeg",
            "label": "royaltyFraction",
            "offset": 20,
            "slot": "0",
            "type": "t_uint96"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Set)1981_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSetUpgradeable.Set",
        "members": [
          {
            "astId": 1976,
            "contract": "contracts/Launchpeg.sol:Launchpeg",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 1980,
            "contract": "contracts/Launchpeg.sol:Launchpeg",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(TokenOwnership)11639_storage": {
        "encoding": "inplace",
        "label": "struct ERC721AUpgradeable.TokenOwnership",
        "members": [
          {
            "astId": 11634,
            "contract": "contracts/Launchpeg.sol:Launchpeg",
            "label": "addr",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 11636,
            "contract": "contracts/Launchpeg.sol:Launchpeg",
            "label": "startTimestamp",
            "offset": 20,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 11638,
            "contract": "contracts/Launchpeg.sol:Launchpeg",
            "label": "burned",
            "offset": 28,
            "slot": "0",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint96": {
        "encoding": "inplace",
        "label": "uint96",
        "numberOfBytes": "12"
      }
    }
  }
}