{
  "address": "0xcBe8DE956feD366920F12AC246f63F9D9D833d47",
  "abi": [
    {
      "inputs": [],
      "name": "ApprovalCallerNotOwnerNorApproved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ApprovalQueryForNonexistentToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ApprovalToCurrentOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ApproveToCaller",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BalanceQueryForZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Launchpeg__AllowlistBeforePreMint",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Launchpeg__BatchRevealDisabled",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Launchpeg__CanNotMintThisMany",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Launchpeg__InvalidAllowlistPrice",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Launchpeg__InvalidJoeFeeCollector",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Launchpeg__InvalidMaxBatchSize",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Launchpeg__InvalidPercent",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Launchpeg__InvalidProjectOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Launchpeg__InvalidQuantity",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Launchpeg__InvalidRoyaltyInfo",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Launchpeg__InvalidStartTime",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Launchpeg__JoeFeeAlreadyInitialized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Launchpeg__LargerCollectionSizeNeeded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Launchpeg__MaxSupplyForBatchMintReached",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Launchpeg__MaxSupplyForDevReached",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Launchpeg__MaxSupplyReached",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Launchpeg__NotEligibleForAllowlistMint",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "avaxSent",
          "type": "uint256"
        }
      ],
      "name": "Launchpeg__NotEnoughAVAX",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Launchpeg__NotInitialized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Launchpeg__PublicSaleBeforeAllowlist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Launchpeg__PublicSaleEndBeforePublicSaleStart",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Launchpeg__RevealNextBatchNotAvailable",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Launchpeg__TransferFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Launchpeg__Unauthorized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Launchpeg__WithdrawAVAXNotAvailable",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Launchpeg__WrongAddressesAndNumSlotsLength",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Launchpeg__WrongPhase",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MintToZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MintZeroQuantity",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OwnerQueryForNonexistentToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PendingOwnableUpgradeable__AddressZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PendingOwnableUpgradeable__NoPendingOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PendingOwnableUpgradeable__NotOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PendingOwnableUpgradeable__NotPendingOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PendingOwnableUpgradeable__PendingOwnerAlreadySet",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SafeAccessControlEnumerableUpgradeable__RoleIsDefaultAdmin",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "SafeAccessControlEnumerableUpgradeable__SenderMissingRoleAndIsNotOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SafePausableUpgradeable__AlreadyPaused",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SafePausableUpgradeable__AlreadyUnpaused",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferCallerNotOwnerNorApproved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferFromIncorrectOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferToNonERC721ReceiverImplementer",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferToZeroAddress",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "AllowlistSeeded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "allowlistStartTime",
          "type": "uint256"
        }
      ],
      "name": "AllowlistStartTimeSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "AvaxWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "baseURI",
          "type": "string"
        }
      ],
      "name": "BaseURISet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "feePercent",
          "type": "uint256"
        }
      ],
      "name": "DefaultRoyaltySet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        }
      ],
      "name": "DevMint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "preMintStartTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "allowlistStartTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "publicSaleStartTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "publicSaleEndTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "allowlistPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "salePrice",
          "type": "uint256"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "feePercent",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "feeCollector",
          "type": "address"
        }
      ],
      "name": "JoeFeeInitialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum IBaseLaunchpeg.Phase",
          "name": "phase",
          "type": "uint8"
        }
      ],
      "name": "Mint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "pendingOwner",
          "type": "address"
        }
      ],
      "name": "PendingOwnerSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "PreMint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "preMintStartTime",
          "type": "uint256"
        }
      ],
      "name": "PreMintStartTimeSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "publicSaleEndTime",
          "type": "uint256"
        }
      ],
      "name": "PublicSaleEndTimeSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "publicSaleStartTime",
          "type": "uint256"
        }
      ],
      "name": "PublicSaleStartTimeSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "unrevealedURI",
          "type": "string"
        }
      ],
      "name": "UnrevealedURISet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "withdrawAVAXStartTime",
          "type": "uint256"
        }
      ],
      "name": "WithdrawAVAXStartTimeSet",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BASIS_POINT_PRECISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PAUSER_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PAUSER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PROJECT_OWNER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UNPAUSER_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UNPAUSER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "allowlist",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_quantity",
          "type": "uint256"
        }
      ],
      "name": "allowlistMint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allowlistPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allowlistStartTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "amountBatchMinted",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "amountForAllowlist",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "amountForDevs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "amountMintedByDevs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "amountMintedDuringAllowlist",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "amountMintedDuringPreMint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "amountMintedDuringPublicSale",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxQuantity",
          "type": "uint256"
        }
      ],
      "name": "batchMintPreMintedNFTs",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "batchReveal",
      "outputs": [
        {
          "internalType": "contract IBatchReveal",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "becomeOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collectionSize",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentPhase",
      "outputs": [
        {
          "internalType": "enum IBaseLaunchpeg.Phase",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_quantity",
          "type": "uint256"
        }
      ],
      "name": "devMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getOwnershipData",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "addr",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "startTimestamp",
              "type": "uint64"
            },
            {
              "internalType": "bool",
              "name": "burned",
              "type": "bool"
            }
          ],
          "internalType": "struct ERC721AUpgradeable.TokenOwnership",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hasBatchToReveal",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_projectOwner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_royaltyReceiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_maxBatchSize",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_collectionSize",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amountForDevs",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amountForAllowlist",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_joeFeePercent",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_joeFeeCollector",
          "type": "address"
        }
      ],
      "name": "initializeJoeFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_preMintStartTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_allowlistStartTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_publicSaleStartTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_publicSaleEndTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_allowlistPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_salePrice",
          "type": "uint256"
        }
      ],
      "name": "initializePhases",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "joeFeeCollector",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "joeFeePercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxBatchSize",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxPerAddressDuringMint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "numberMinted",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "numberMintedWithPreMint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_quantity",
          "type": "uint256"
        }
      ],
      "name": "preMint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "preMintStartTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "publicSaleEndTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_quantity",
          "type": "uint256"
        }
      ],
      "name": "publicSaleMint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "publicSaleStartTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "revealNextBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "revokePendingOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_salePrice",
          "type": "uint256"
        }
      ],
      "name": "royaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "salePrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_addresses",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_numNfts",
          "type": "uint256[]"
        }
      ],
      "name": "seedAllowlist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_allowlistStartTime",
          "type": "uint256"
        }
      ],
      "name": "setAllowlistStartTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_baseURI",
          "type": "string"
        }
      ],
      "name": "setBaseURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_batchReveal",
          "type": "address"
        }
      ],
      "name": "setBatchReveal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pendingOwner_",
          "type": "address"
        }
      ],
      "name": "setPendingOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_preMintStartTime",
          "type": "uint256"
        }
      ],
      "name": "setPreMintStartTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_publicSaleEndTime",
          "type": "uint256"
        }
      ],
      "name": "setPublicSaleEndTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_publicSaleStartTime",
          "type": "uint256"
        }
      ],
      "name": "setPublicSaleStartTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "_feePercent",
          "type": "uint96"
        }
      ],
      "name": "setRoyaltyInfo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_unrevealedURI",
          "type": "string"
        }
      ],
      "name": "setUnrevealedURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_withdrawAVAXStartTime",
          "type": "uint256"
        }
      ],
      "name": "setWithdrawAVAXStartTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "_interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unrevealedURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userAddressToPreMintAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "withdrawAVAX",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawAVAXStartTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x9bc0cc3ba0e95fed5a2ee9333717b2af64ead32e39de25da3deb3b10a6ece23b",
  "receipt": {
    "to": null,
    "from": "0xbd01F28226254a94E42A987a81E5Aa36d1821116",
    "contractAddress": "0xcBe8DE956feD366920F12AC246f63F9D9D833d47",
    "transactionIndex": 0,
    "gasUsed": "4624858",
    "logsBloom": "0x
    "blockHash": "0xb9b147cf389e04d04ec59f904ac6001d55e3cfd635d9c61c7659585a8b144777",
    "transactionHash": "0x9bc0cc3ba0e95fed5a2ee9333717b2af64ead32e39de25da3deb3b10a6ece23b",
    "logs": [],
    "blockNumber": 14041006,
    "cumulativeGasUsed": "4624858",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 9,
  "solcInputHash": "9d21c1a763ce0d94877fbf85becde524",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ApprovalCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalToCurrentOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApproveToCaller\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BalanceQueryForZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Launchpeg__AllowlistBeforePreMint\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Launchpeg__BatchRevealDisabled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Launchpeg__CanNotMintThisMany\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Launchpeg__InvalidAllowlistPrice\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Launchpeg__InvalidJoeFeeCollector\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Launchpeg__InvalidMaxBatchSize\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Launchpeg__InvalidPercent\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Launchpeg__InvalidProjectOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Launchpeg__InvalidQuantity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Launchpeg__InvalidRoyaltyInfo\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Launchpeg__InvalidStartTime\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Launchpeg__JoeFeeAlreadyInitialized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Launchpeg__LargerCollectionSizeNeeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Launchpeg__MaxSupplyForBatchMintReached\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Launchpeg__MaxSupplyForDevReached\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Launchpeg__MaxSupplyReached\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Launchpeg__NotEligibleForAllowlistMint\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"avaxSent\",\"type\":\"uint256\"}],\"name\":\"Launchpeg__NotEnoughAVAX\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Launchpeg__NotInitialized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Launchpeg__PublicSaleBeforeAllowlist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Launchpeg__PublicSaleEndBeforePublicSaleStart\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Launchpeg__RevealNextBatchNotAvailable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Launchpeg__TransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Launchpeg__Unauthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Launchpeg__WithdrawAVAXNotAvailable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Launchpeg__WrongAddressesAndNumSlotsLength\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Launchpeg__WrongPhase\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintZeroQuantity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnerQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PendingOwnableUpgradeable__AddressZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PendingOwnableUpgradeable__NoPendingOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PendingOwnableUpgradeable__NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PendingOwnableUpgradeable__NotPendingOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PendingOwnableUpgradeable__PendingOwnerAlreadySet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SafeAccessControlEnumerableUpgradeable__RoleIsDefaultAdmin\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"SafeAccessControlEnumerableUpgradeable__SenderMissingRoleAndIsNotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SafePausableUpgradeable__AlreadyPaused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SafePausableUpgradeable__AlreadyUnpaused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFromIncorrectOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToNonERC721ReceiverImplementer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"AllowlistSeeded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"allowlistStartTime\",\"type\":\"uint256\"}],\"name\":\"AllowlistStartTimeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"AvaxWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"}],\"name\":\"BaseURISet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feePercent\",\"type\":\"uint256\"}],\"name\":\"DefaultRoyaltySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"DevMint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"preMintStartTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"allowlistStartTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"publicSaleStartTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"publicSaleEndTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"allowlistPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"salePrice\",\"type\":\"uint256\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feePercent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeCollector\",\"type\":\"address\"}],\"name\":\"JoeFeeInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum IBaseLaunchpeg.Phase\",\"name\":\"phase\",\"type\":\"uint8\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pendingOwner\",\"type\":\"address\"}],\"name\":\"PendingOwnerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"PreMint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"preMintStartTime\",\"type\":\"uint256\"}],\"name\":\"PreMintStartTimeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"publicSaleEndTime\",\"type\":\"uint256\"}],\"name\":\"PublicSaleEndTimeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"publicSaleStartTime\",\"type\":\"uint256\"}],\"name\":\"PublicSaleStartTimeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"unrevealedURI\",\"type\":\"string\"}],\"name\":\"UnrevealedURISet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawAVAXStartTime\",\"type\":\"uint256\"}],\"name\":\"WithdrawAVAXStartTimeSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BASIS_POINT_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROJECT_OWNER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNPAUSER_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNPAUSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowlist\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"}],\"name\":\"allowlistMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allowlistPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allowlistStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountBatchMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountForAllowlist\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountForDevs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountMintedByDevs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountMintedDuringAllowlist\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountMintedDuringPreMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountMintedDuringPublicSale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxQuantity\",\"type\":\"uint256\"}],\"name\":\"batchMintPreMintedNFTs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"batchReveal\",\"outputs\":[{\"internalType\":\"contract IBatchReveal\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"becomeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectionSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentPhase\",\"outputs\":[{\"internalType\":\"enum IBaseLaunchpeg.Phase\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"}],\"name\":\"devMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getOwnershipData\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"startTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"burned\",\"type\":\"bool\"}],\"internalType\":\"struct ERC721AUpgradeable.TokenOwnership\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasBatchToReveal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_projectOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_royaltyReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxBatchSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_collectionSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountForDevs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountForAllowlist\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_joeFeePercent\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_joeFeeCollector\",\"type\":\"address\"}],\"name\":\"initializeJoeFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_preMintStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allowlistStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_publicSaleStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_publicSaleEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allowlistPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_salePrice\",\"type\":\"uint256\"}],\"name\":\"initializePhases\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"joeFeeCollector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"joeFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBatchSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPerAddressDuringMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"numberMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"numberMintedWithPreMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"}],\"name\":\"preMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"preMintStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicSaleEndTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"}],\"name\":\"publicSaleMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicSaleStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revealNextBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revokePendingOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"salePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_numNfts\",\"type\":\"uint256[]\"}],\"name\":\"seedAllowlist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_allowlistStartTime\",\"type\":\"uint256\"}],\"name\":\"setAllowlistStartTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_baseURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_batchReveal\",\"type\":\"address\"}],\"name\":\"setBatchReveal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pendingOwner_\",\"type\":\"address\"}],\"name\":\"setPendingOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_preMintStartTime\",\"type\":\"uint256\"}],\"name\":\"setPreMintStartTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_publicSaleEndTime\",\"type\":\"uint256\"}],\"name\":\"setPublicSaleEndTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_publicSaleStartTime\",\"type\":\"uint256\"}],\"name\":\"setPublicSaleStartTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"_feePercent\",\"type\":\"uint96\"}],\"name\":\"setRoyaltyInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_unrevealedURI\",\"type\":\"string\"}],\"name\":\"setUnrevealedURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_withdrawAVAXStartTime\",\"type\":\"uint256\"}],\"name\":\"setWithdrawAVAXStartTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unrevealedURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userAddressToPreMintAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdrawAVAX\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAVAXStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Trader Joe\",\"events\":{\"Initialized(uint256,uint256,uint256,uint256,uint256,uint256)\":{\"details\":\"Emitted on initializePhases()\",\"params\":{\"allowlistPrice\":\"Price of the allowlist sale in Avax\",\"allowlistStartTime\":\"Allowlist mint start time in seconds\",\"preMintStartTime\":\"Pre-mint start time in seconds\",\"publicSaleEndTime\":\"Public sale end time in seconds\",\"publicSaleStartTime\":\"Public sale start time in seconds\",\"salePrice\":\"Price of the public sale in Avax\"}}},\"kind\":\"dev\",\"methods\":{\"allowlistMint(uint256)\":{\"params\":{\"_quantity\":\"Quantity of NFTs to mint\"}},\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"batchMintPreMintedNFTs(uint256)\":{\"params\":{\"_maxQuantity\":\"Max quantity of NFTs to mint\"}},\"currentPhase()\":{\"returns\":{\"_0\":\"phase Current phase\"}},\"devMint(uint256)\":{\"details\":\"Can only mint up to `amountForDevs`\",\"params\":{\"_quantity\":\"Quantity of NFTs to mint\"}},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"getOwnershipData(uint256)\":{\"params\":{\"_tokenId\":\"Token ID\"},\"returns\":{\"_0\":\"TokenOwnership Ownership struct for a specific token ID\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must be the `owner` or have ``role``'s admin role. - the role granted can't be `DEFAULT_ADMIN`\",\"params\":{\"account\":\"The address of the account\",\"role\":\"The role to grant\"}},\"hasBatchToReveal()\":{\"returns\":{\"_0\":\"bool Whether reveal can be triggered or not\",\"_1\":\"uint256 The number of the next batch that will be revealed\"}},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"initialize(string,string,address,address,uint256,uint256,uint256,uint256)\":{\"params\":{\"_amountForAllowlist\":\"Amount of NFTs available for the allowlist mint (e.g 1000)\",\"_amountForDevs\":\"Amount of NFTs reserved for `projectOwner` (e.g 200)\",\"_collectionSize\":\"The collection size (e.g 10000)\",\"_maxBatchSize\":\"Max amount of NFTs that can be minted at once\",\"_name\":\"ERC721 name\",\"_projectOwner\":\"The project owner\",\"_royaltyReceiver\":\"Royalty fee collector\",\"_symbol\":\"ERC721 symbol\"}},\"initializeJoeFee(uint256,address)\":{\"params\":{\"_joeFeeCollector\":\"The address to which the fees on the sale will be sent\",\"_joeFeePercent\":\"The fees collected by Joepegs on the sale benefits\"}},\"initializePhases(uint256,uint256,uint256,uint256,uint256,uint256)\":{\"details\":\"Can only be called once\",\"params\":{\"_allowlistPrice\":\"Price of the allowlist sale in Avax\",\"_allowlistStartTime\":\"Allowlist mint start time in seconds\",\"_preMintStartTime\":\"Pre-mint start time in seconds\",\"_publicSaleEndTime\":\"Public sale end time in seconds\",\"_publicSaleStartTime\":\"Public sale start time in seconds\",\"_salePrice\":\"Price of the public sale in Avax\"}},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"numberMinted(address)\":{\"params\":{\"_owner\":\"The owner of the NFTs\"},\"returns\":{\"_0\":\"numberMinted Number of NFTs minted\"}},\"owner()\":{\"returns\":{\"_0\":\"The address of the current owner\"}},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"pause()\":{\"details\":\"Sensible part of a contract might be pausable for security reasons. Requirements: - the caller must be the `owner` or have the ``role`` role. - the contrat needs to be unpaused.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"pendingOwner()\":{\"returns\":{\"_0\":\"The address of the current pending owner\"}},\"preMint(uint256)\":{\"params\":{\"_quantity\":\"Quantity of NFTs to mint\"}},\"publicSaleMint(uint256)\":{\"params\":{\"_quantity\":\"Quantity of NFTs to mint\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. - the role renounced can't be `DEFAULT_ADMIN`\",\"params\":{\"account\":\"The address of the account\",\"role\":\"The role to renounce\"}},\"revokeRole(bytes32,address)\":{\"details\":\"If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be the `owner` or have ``role``'s admin role. - the role revoked can't be `DEFAULT_ADMIN`\",\"params\":{\"account\":\"The address of the account\",\"role\":\"The role to revoke\"}},\"royaltyInfo(uint256,uint256)\":{\"details\":\"Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of exchange. The royalty amount is denominated and should be payed in that same unit of exchange.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"seedAllowlist(address[],uint256[])\":{\"params\":{\"_addresses\":\"List of addresses allowed to mint during the allowlist phase\",\"_numNfts\":\"List of NFT quantities mintable per address\"}},\"setAllowlistStartTime(uint256)\":{\"details\":\"Only callable by owner\",\"params\":{\"_allowlistStartTime\":\"New allowlist start time\"}},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"setBaseURI(string)\":{\"details\":\"This sets the URI for revealed tokens Only callable by project owner\",\"params\":{\"_baseURI\":\"Base URI to be set\"}},\"setBatchReveal(address)\":{\"details\":\"Can be set to zero address to disable batch reveal\"},\"setPreMintStartTime(uint256)\":{\"details\":\"Only callable by owner\",\"params\":{\"_preMintStartTime\":\"New pre-mint start time\"}},\"setPublicSaleEndTime(uint256)\":{\"details\":\"Only callable by owner\",\"params\":{\"_publicSaleEndTime\":\"New public sale end time\"}},\"setPublicSaleStartTime(uint256)\":{\"details\":\"Only callable by owner\",\"params\":{\"_publicSaleStartTime\":\"New public sale start time\"}},\"setRoyaltyInfo(address,uint96)\":{\"params\":{\"_feePercent\":\"Royalty fee percent in basis point\",\"_receiver\":\"Royalty fee collector\"}},\"setUnrevealedURI(string)\":{\"details\":\"Only callable by project owner\",\"params\":{\"_unrevealedURI\":\"Unrevealed URI to be set\"}},\"setWithdrawAVAXStartTime(uint256)\":{\"params\":{\"_withdrawAVAXStartTime\":\"New public sale end time\"}},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these IDs are created. This function call must use less than 30 000 gas.\",\"params\":{\"_interfaceId\":\"InterfaceId to consider. Comes from type(Interface).interfaceId\"},\"returns\":{\"_0\":\"isInterfaceSupported True if the considered interface is supported\"}},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"params\":{\"_id\":\"Token id\"},\"returns\":{\"_0\":\"URI Token URI\"}},\"totalSupply()\":{\"details\":\"Burned tokens are calculated here, use _totalMinted() if you want to count just minted tokens.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"unpause()\":{\"details\":\"Sensible part of a contract might be pausable for security reasons. Requirements: - the caller must be the `owner` or have the ``role`` role. - the contrat needs to be unpaused.\"},\"withdrawAVAX(address)\":{\"params\":{\"_to\":\"Recipient of the earned AVAX\"}}},\"stateVariables\":{\"allowlistPrice\":{\"details\":\"allowlistPrice is scaled to 1e18\"},\"salePrice\":{\"details\":\"salePrice is scaled to 1e18\"}},\"title\":\"FlatLaunchpeg\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"BASIS_POINT_PRECISION()\":{\"notice\":\"Percentage base point\"},\"PROJECT_OWNER_ROLE()\":{\"notice\":\"Role granted to project owners\"},\"allowlist(address)\":{\"notice\":\"The amount of NFTs each allowed address can mint during the pre-mint or allowlist mint\"},\"allowlistMint(uint256)\":{\"notice\":\"Mint NFTs during the allowlist mint\"},\"allowlistPrice()\":{\"notice\":\"Price of one NFT for people on the mint list\"},\"allowlistStartTime()\":{\"notice\":\"Start time of the allowlist mint in seconds\"},\"amountBatchMinted()\":{\"notice\":\"Tracks the amount of NFTs batch minted\"},\"amountForAllowlist()\":{\"notice\":\"Amount of NFTs available for the allowlist mint (e.g 1000)\"},\"amountForDevs()\":{\"notice\":\"Amount of NFTs reserved for the project owner (e.g 200)\"},\"amountMintedByDevs()\":{\"notice\":\"Tracks the amount of NFTs minted by `projectOwner`\"},\"amountMintedDuringAllowlist()\":{\"notice\":\"Tracks the amount of NFTs minted on Allowlist phase\"},\"amountMintedDuringPreMint()\":{\"notice\":\"Tracks the amount of NFTs minted in the Pre-Mint phase\"},\"amountMintedDuringPublicSale()\":{\"notice\":\"Tracks the amount of NFTs minted on Public Sale phase\"},\"baseURI()\":{\"notice\":\"Token URI after collection reveal\"},\"batchMintPreMintedNFTs(uint256)\":{\"notice\":\"Batch mint NFTs requested during the pre-mint\"},\"becomeOwner()\":{\"notice\":\"Transfers the ownership to the new owner (`pendingOwner`). Can only be called by the pending owner\"},\"collectionSize()\":{\"notice\":\"The collection size (e.g 10000)\"},\"currentPhase()\":{\"notice\":\"Returns the current phase\"},\"devMint(uint256)\":{\"notice\":\"Mint NFTs to the project owner\"},\"getOwnershipData(uint256)\":{\"notice\":\"Returns the ownership data of a specific token ID\"},\"grantRole(bytes32,address)\":{\"notice\":\"Grants `role` to `account`.\"},\"hasBatchToReveal()\":{\"notice\":\"Tells you if a batch can be revealed\"},\"initialize(string,string,address,address,uint256,uint256,uint256,uint256)\":{\"notice\":\"FlatLaunchpeg initialization Can only be called once\"},\"initializeJoeFee(uint256,address)\":{\"notice\":\"Initialize the sales fee percent taken by Joepegs and address that collects the fees\"},\"initializePhases(uint256,uint256,uint256,uint256,uint256,uint256)\":{\"notice\":\"Initialize the two phases of the sale\"},\"joeFeeCollector()\":{\"notice\":\"The address to which the fees on the sale will be sent\"},\"joeFeePercent()\":{\"notice\":\"The fees collected by Joepegs on the sale benefits\"},\"maxBatchSize()\":{\"notice\":\"Max amount of NFTs that can be minted at once\"},\"maxPerAddressDuringMint()\":{\"notice\":\"Max amount of NFTs an address can mint\"},\"numberMinted(address)\":{\"notice\":\"Returns the number of NFTs minted by a specific address\"},\"owner()\":{\"notice\":\"Returns the address of the current owner\"},\"pause()\":{\"notice\":\"Pauses the contract.\"},\"pendingOwner()\":{\"notice\":\"Returns the address of the current pending owner\"},\"preMint(uint256)\":{\"notice\":\"Mint NFTs during the pre-mint\"},\"preMintStartTime()\":{\"notice\":\"Start time of the pre-mint in seconds\"},\"publicSaleEndTime()\":{\"notice\":\"End time of the public sale in seconds\"},\"publicSaleMint(uint256)\":{\"notice\":\"Mint NFTs during the public sale\"},\"publicSaleStartTime()\":{\"notice\":\"Start time of the public sale in seconds\"},\"renounceOwnership()\":{\"notice\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"renounceRole(bytes32,address)\":{\"notice\":\"Revokes `role` from the calling account.\"},\"revealNextBatch()\":{\"notice\":\"Reveals the next batch if the reveal conditions are met\"},\"revokePendingOwner()\":{\"notice\":\"Revoke the pending owner address. This address will not be able to call {becomeOwner} to become the owner anymore. Can only be called by the owner\"},\"revokeRole(bytes32,address)\":{\"notice\":\"Revokes `role` from `account`.\"},\"salePrice()\":{\"notice\":\"Price of one NFT during the public sale\"},\"seedAllowlist(address[],uint256[])\":{\"notice\":\"Set amount of NFTs mintable per address during the allowlist phase\"},\"setAllowlistStartTime(uint256)\":{\"notice\":\"Set the allowlist start time. Can only be set after phases have been initialized.\"},\"setBaseURI(string)\":{\"notice\":\"Set the base URI\"},\"setBatchReveal(address)\":{\"notice\":\"Update batch reveal\"},\"setPendingOwner(address)\":{\"notice\":\"Sets the pending owner address. This address will be able to become the owner of this contract by calling {becomeOwner}\"},\"setPreMintStartTime(uint256)\":{\"notice\":\"Set the pre-mint start time. Can only be set after phases have been initialized.\"},\"setPublicSaleEndTime(uint256)\":{\"notice\":\"Set the public sale end time. Can only be set after phases have been initialized.\"},\"setPublicSaleStartTime(uint256)\":{\"notice\":\"Set the public sale start time. Can only be set after phases have been initialized.\"},\"setRoyaltyInfo(address,uint96)\":{\"notice\":\"Set the royalty fee\"},\"setUnrevealedURI(string)\":{\"notice\":\"Set the unrevealed URI\"},\"setWithdrawAVAXStartTime(uint256)\":{\"notice\":\"Set the withdraw AVAX start time.\"},\"tokenURI(uint256)\":{\"notice\":\"Returns the Uniform Resource Identifier (URI) for `tokenId` token.\"},\"unpause()\":{\"notice\":\"Unpauses the contract.\"},\"unrevealedURI()\":{\"notice\":\"Token URI before the collection reveal\"},\"withdrawAVAX(address)\":{\"notice\":\"Withdraw AVAX to the given recipient\"},\"withdrawAVAXStartTime()\":{\"notice\":\"Start time when funds can be withdrawn\"}},\"notice\":\"Implements a simple minting NFT contract with an allowlist and public sale phase.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FlatLaunchpeg.sol\":\"FlatLaunchpeg\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n}\\n\",\"keccak256\":\"0xcb29ee50ee2b05441e4deebf8b4756a0feec4f5497e36b6a1ca320f7ce561802\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerableUpgradeable.sol\\\";\\nimport \\\"./AccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/structs/EnumerableSetUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerableUpgradeable is Initializable, IAccessControlEnumerableUpgradeable, AccessControlUpgradeable {\\n    function __AccessControlEnumerable_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControlEnumerable_init_unchained() internal onlyInitializing {\\n    }\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSetUpgradeable.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerableUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override {\\n        super._grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override {\\n        super._revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xc2dfd6ba9449f61b6b03b262182faf302f093a8c05dd10792aeecb4ed1663c0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2ffe9655abbb3741fcb84ad10e2f628d5dbec46b3f84a69ceec4752e807e2757\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerableUpgradeable is IAccessControlUpgradeable {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x7acbc538aad6eb4614e26612a8c5c0149bb8808db95e2638d245a8365f63e572\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC2981Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n *\\n * _Available since v4.5._\\n */\\ninterface IERC2981Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be payed in that same unit of exchange.\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0xf710fb524203921ca2fca7201672900fbfb354a37b56dd3f4f2e1592b3edb999\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x041af89e5e60b74e1203d5a34614c9de379726f52ecb8cf064cab78b9fdcdf9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x8cc03c5ac17e8a7396e487cda41fc1f1dfdb91db7d528e6da84bee3b6dd7e167\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x2f359f9d5c56394e60d74401487ab55d8ef0012907b07c9abbb8f998bf5ddfec\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x714a33fd66816f608f6eda908da24eb6009eee50adf4062c86639d4fe508a7b6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x95a471796eb5f030fdc438660bebec121ad5d063763e64d92376ffb4b5ce8b70\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/common/ERC2981Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/common/ERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/IERC2981Upgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the NFT Royalty Standard, a standardized way to retrieve royalty payment information.\\n *\\n * Royalty information can be specified globally for all token ids via {_setDefaultRoyalty}, and/or individually for\\n * specific token ids via {_setTokenRoyalty}. The latter takes precedence over the first.\\n *\\n * Royalty is specified as a fraction of sale price. {_feeDenominator} is overridable but defaults to 10000, meaning the\\n * fee is specified in basis points by default.\\n *\\n * IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See\\n * https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the EIP. Marketplaces are expected to\\n * voluntarily pay royalties together with sales, but note that this standard is not yet widely supported.\\n *\\n * _Available since v4.5._\\n */\\nabstract contract ERC2981Upgradeable is Initializable, IERC2981Upgradeable, ERC165Upgradeable {\\n    function __ERC2981_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC2981_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoyaltyInfo {\\n        address receiver;\\n        uint96 royaltyFraction;\\n    }\\n\\n    RoyaltyInfo private _defaultRoyaltyInfo;\\n    mapping(uint256 => RoyaltyInfo) private _tokenRoyaltyInfo;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165Upgradeable, ERC165Upgradeable) returns (bool) {\\n        return interfaceId == type(IERC2981Upgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC2981Upgradeable\\n     */\\n    function royaltyInfo(uint256 _tokenId, uint256 _salePrice)\\n        external\\n        view\\n        virtual\\n        override\\n        returns (address, uint256)\\n    {\\n        RoyaltyInfo memory royalty = _tokenRoyaltyInfo[_tokenId];\\n\\n        if (royalty.receiver == address(0)) {\\n            royalty = _defaultRoyaltyInfo;\\n        }\\n\\n        uint256 royaltyAmount = (_salePrice * royalty.royaltyFraction) / _feeDenominator();\\n\\n        return (royalty.receiver, royaltyAmount);\\n    }\\n\\n    /**\\n     * @dev The denominator with which to interpret the fee set in {_setTokenRoyalty} and {_setDefaultRoyalty} as a\\n     * fraction of the sale price. Defaults to 10000 so fees are expressed in basis points, but may be customized by an\\n     * override.\\n     */\\n    function _feeDenominator() internal pure virtual returns (uint96) {\\n        return 10000;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information that all ids in this contract will default to.\\n     *\\n     * Requirements:\\n     *\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setDefaultRoyalty(address receiver, uint96 feeNumerator) internal virtual {\\n        require(feeNumerator <= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\n        require(receiver != address(0), \\\"ERC2981: invalid receiver\\\");\\n\\n        _defaultRoyaltyInfo = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Removes default royalty information.\\n     */\\n    function _deleteDefaultRoyalty() internal virtual {\\n        delete _defaultRoyaltyInfo;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information for a specific token id, overriding the global default.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must be already minted.\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setTokenRoyalty(\\n        uint256 tokenId,\\n        address receiver,\\n        uint96 feeNumerator\\n    ) internal virtual {\\n        require(feeNumerator <= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\n        require(receiver != address(0), \\\"ERC2981: Invalid parameters\\\");\\n\\n        _tokenRoyaltyInfo[tokenId] = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Resets royalty information for the token id back to the global default.\\n     */\\n    function _resetTokenRoyalty(uint256 tokenId) internal virtual {\\n        delete _tokenRoyaltyInfo[tokenId];\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[48] private __gap;\\n}\\n\",\"keccak256\":\"0x77922571fd4422e5503bcf79fb428fb2764b813d07de23c5738a290f0ede72b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x398d3323c1932a5986bf36be7c57593e121e69d5db5b6574b4ee0d031443de37\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSetUpgradeable {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x0004699ba89fa356eb0d58d815b42dcf52eccd2765e95256631b838bce2556bc\",\"license\":\"MIT\"},\"contracts/BaseLaunchpeg.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/common/ERC2981Upgradeable.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\n\\nimport \\\"erc721a-upgradeable/contracts/ERC721AUpgradeable.sol\\\";\\n\\nimport \\\"./LaunchpegErrors.sol\\\";\\nimport \\\"./interfaces/IBaseLaunchpeg.sol\\\";\\nimport \\\"./interfaces/IBatchReveal.sol\\\";\\nimport \\\"./utils/SafePausableUpgradeable.sol\\\";\\n\\n/// @title BaseLaunchpeg\\n/// @author Trader Joe\\n/// @notice Implements the functionalities shared between Launchpeg and FlatLaunchpeg contracts.\\nabstract contract BaseLaunchpeg is\\n    IBaseLaunchpeg,\\n    ERC721AUpgradeable,\\n    SafePausableUpgradeable,\\n    ReentrancyGuardUpgradeable,\\n    ERC2981Upgradeable\\n{\\n    using StringsUpgradeable for uint256;\\n\\n    IBatchReveal public batchReveal;\\n\\n    /// @notice Role granted to project owners\\n    bytes32 public constant override PROJECT_OWNER_ROLE =\\n        keccak256(\\\"PROJECT_OWNER_ROLE\\\");\\n\\n    /// @notice The collection size (e.g 10000)\\n    uint256 public override collectionSize;\\n\\n    /// @notice Amount of NFTs reserved for the project owner (e.g 200)\\n    /// @dev It can be minted any time via `devMint`\\n    uint256 public override amountForDevs;\\n\\n    /// @notice Amount of NFTs available for the allowlist mint (e.g 1000)\\n    uint256 public override amountForAllowlist;\\n\\n    /// @notice Max amount of NFTs that can be minted at once\\n    uint256 public override maxBatchSize;\\n\\n    /// @notice Max amount of NFTs an address can mint\\n    uint256 public override maxPerAddressDuringMint;\\n\\n    /// @notice The fees collected by Joepegs on the sale benefits\\n    /// @dev In basis points e.g 100 for 1%\\n    uint256 public override joeFeePercent;\\n\\n    /// @notice The address to which the fees on the sale will be sent\\n    address public override joeFeeCollector;\\n\\n    /// @notice Percentage base point\\n    uint256 public constant BASIS_POINT_PRECISION = 10_000;\\n\\n    /// @notice Token URI after collection reveal\\n    string public override baseURI;\\n\\n    /// @notice Token URI before the collection reveal\\n    string public override unrevealedURI;\\n\\n    /// @notice The amount of NFTs each allowed address can mint during\\n    /// the pre-mint or allowlist mint\\n    mapping(address => uint256) public override allowlist;\\n\\n    // @notice The remaining no. of pre-minted NFTs for the user address\\n    mapping(address => uint256) public override userAddressToPreMintAmount;\\n\\n    /// @notice Tracks the amount of NFTs minted by `projectOwner`\\n    uint256 public override amountMintedByDevs;\\n\\n    /// @notice Tracks the amount of NFTs minted in the Pre-Mint phase\\n    uint256 public override amountMintedDuringPreMint;\\n\\n    /// @notice Tracks the amount of NFTs batch minted\\n    uint256 public override amountBatchMinted;\\n\\n    /// @notice Tracks the amount of NFTs minted on Allowlist phase\\n    uint256 public override amountMintedDuringAllowlist;\\n\\n    /// @notice Tracks the amount of NFTs minted on Public Sale phase\\n    uint256 public override amountMintedDuringPublicSale;\\n\\n    /// @notice Start time of the pre-mint in seconds\\n    uint256 public override preMintStartTime;\\n\\n    /// @notice Start time of the allowlist mint in seconds\\n    uint256 public override allowlistStartTime;\\n\\n    /// @notice Start time of the public sale in seconds\\n    /// @dev A timestamp greater than the allowlist mint start\\n    uint256 public override publicSaleStartTime;\\n\\n    /// @notice End time of the public sale in seconds\\n    /// @dev A timestamp greater than the public sale start\\n    uint256 public override publicSaleEndTime;\\n\\n    /// @notice Start time when funds can be withdrawn\\n    uint256 public override withdrawAVAXStartTime;\\n\\n    /// @dev Queue of pre-mint requests by allowlist users\\n    PreMintData[] private preMintQueue;\\n\\n    /// @dev Next index of the `preMintQueue` to be processed by batch mint\\n    uint256 private preMintQueueIdx;\\n\\n    struct PreMintData {\\n        address sender;\\n        uint256 quantity;\\n    }\\n\\n    /// @dev Emitted on initializeJoeFee()\\n    /// @param feePercent The fees collected by Joepegs on the sale benefits\\n    /// @param feeCollector The address to which the fees on the sale will be sent\\n    event JoeFeeInitialized(uint256 feePercent, address feeCollector);\\n\\n    /// @dev Emitted on devMint()\\n    /// @param sender The address that minted\\n    /// @param quantity Amount of NFTs minted\\n    event DevMint(address indexed sender, uint256 quantity);\\n\\n    /// @dev Emitted on preMint()\\n    /// @param sender The address that minted\\n    /// @param quantity Amount of NFTs minted\\n    /// @param price Price of 1 NFT\\n    event PreMint(address indexed sender, uint256 quantity, uint256 price);\\n\\n    /// @dev Emitted on auctionMint(), batchMintPreMintedNFTs(),\\n    /// allowlistMint(), publicSaleMint()\\n    /// @param sender The address that minted\\n    /// @param quantity Amount of NFTs minted\\n    /// @param price Price in AVAX for the NFTs\\n    /// @param startTokenId The token ID of the first minted NFT:\\n    /// if `startTokenId` = 100 and `quantity` = 2, `sender` minted 100 and 101\\n    /// @param phase The phase in which the mint occurs\\n    event Mint(\\n        address indexed sender,\\n        uint256 quantity,\\n        uint256 price,\\n        uint256 startTokenId,\\n        Phase phase\\n    );\\n\\n    /// @dev Emitted on withdrawAVAX()\\n    /// @param sender The address that withdrew the tokens\\n    /// @param amount Amount of AVAX transfered to `sender`\\n    /// @param fee Amount of AVAX paid to the fee collector\\n    event AvaxWithdraw(address indexed sender, uint256 amount, uint256 fee);\\n\\n    /// @dev Emitted on setBaseURI()\\n    /// @param baseURI The new base URI\\n    event BaseURISet(string baseURI);\\n\\n    /// @dev Emitted on setUnrevealedURI()\\n    /// @param unrevealedURI The new base URI\\n    event UnrevealedURISet(string unrevealedURI);\\n\\n    /// @dev Emitted on seedAllowlist()\\n    event AllowlistSeeded();\\n\\n    /// @dev Emitted on _setDefaultRoyalty()\\n    /// @param receiver Royalty fee collector\\n    /// @param feePercent Royalty fee percent in basis point\\n    event DefaultRoyaltySet(address indexed receiver, uint256 feePercent);\\n\\n    /// @dev Emitted on setPreMintStartTime()\\n    /// @param preMintStartTime New pre-mint start time\\n    event PreMintStartTimeSet(uint256 preMintStartTime);\\n\\n    /// @dev Emitted on setAllowlistStartTime()\\n    /// @param allowlistStartTime New allowlist start time\\n    event AllowlistStartTimeSet(uint256 allowlistStartTime);\\n\\n    /// @dev Emitted on setPublicSaleStartTime()\\n    /// @param publicSaleStartTime New public sale start time\\n    event PublicSaleStartTimeSet(uint256 publicSaleStartTime);\\n\\n    /// @dev Emitted on setPublicSaleEndTime()\\n    /// @param publicSaleEndTime New public sale end time\\n    event PublicSaleEndTimeSet(uint256 publicSaleEndTime);\\n\\n    /// @dev Emitted on setWithdrawAVAXStartTime()\\n    /// @param withdrawAVAXStartTime New withdraw AVAX start time\\n    event WithdrawAVAXStartTimeSet(uint256 withdrawAVAXStartTime);\\n\\n    modifier isEOA() {\\n        if (tx.origin != msg.sender) {\\n            revert Launchpeg__Unauthorized();\\n        }\\n        _;\\n    }\\n\\n    /// @dev BaseLaunchpeg initialization\\n    /// @param _name ERC721 name\\n    /// @param _symbol ERC721 symbol\\n    /// @param _projectOwner The project owner\\n    /// @param _royaltyReceiver Royalty fee collector\\n    /// @param _maxBatchSize Max amount of NFTs that can be minted at once\\n    /// @param _collectionSize The collection size (e.g 10000)\\n    /// @param _amountForDevs Amount of NFTs reserved for `projectOwner` (e.g 200)\\n    /// @param _amountForAllowlist Amount of NFTs available for the allowlist mint (e.g 1000)\\n    function initializeBaseLaunchpeg(\\n        string memory _name,\\n        string memory _symbol,\\n        address _projectOwner,\\n        address _royaltyReceiver,\\n        uint256 _maxBatchSize,\\n        uint256 _collectionSize,\\n        uint256 _amountForDevs,\\n        uint256 _amountForAllowlist\\n    ) internal onlyInitializing {\\n        __SafePausable_init();\\n        __ReentrancyGuard_init();\\n        __ERC2981_init();\\n        __ERC721A_init(_name, _symbol);\\n\\n        if (_projectOwner == address(0)) {\\n            revert Launchpeg__InvalidProjectOwner();\\n        }\\n\\n        if (\\n            _collectionSize == 0 ||\\n            _amountForDevs + _amountForAllowlist > _collectionSize\\n        ) {\\n            revert Launchpeg__LargerCollectionSizeNeeded();\\n        }\\n\\n        if (_maxBatchSize > _collectionSize) {\\n            revert Launchpeg__InvalidMaxBatchSize();\\n        }\\n\\n        grantRole(PROJECT_OWNER_ROLE, _projectOwner);\\n        // Default royalty is 5%\\n        _setDefaultRoyalty(_royaltyReceiver, 500);\\n\\n        maxBatchSize = _maxBatchSize;\\n        collectionSize = _collectionSize;\\n        maxPerAddressDuringMint = _maxBatchSize;\\n        amountForDevs = _amountForDevs;\\n        amountForAllowlist = _amountForAllowlist;\\n    }\\n\\n    /// @notice Initialize the sales fee percent taken by Joepegs and address that collects the fees\\n    /// @param _joeFeePercent The fees collected by Joepegs on the sale benefits\\n    /// @param _joeFeeCollector The address to which the fees on the sale will be sent\\n    function initializeJoeFee(uint256 _joeFeePercent, address _joeFeeCollector)\\n        external\\n        override\\n        onlyOwner\\n    {\\n        if (joeFeeCollector != address(0)) {\\n            revert Launchpeg__JoeFeeAlreadyInitialized();\\n        }\\n        if (_joeFeePercent > BASIS_POINT_PRECISION) {\\n            revert Launchpeg__InvalidPercent();\\n        }\\n        if (_joeFeeCollector == address(0)) {\\n            revert Launchpeg__InvalidJoeFeeCollector();\\n        }\\n        joeFeePercent = _joeFeePercent;\\n        joeFeeCollector = _joeFeeCollector;\\n        emit JoeFeeInitialized(_joeFeePercent, _joeFeeCollector);\\n    }\\n\\n    /// @notice Set the royalty fee\\n    /// @param _receiver Royalty fee collector\\n    /// @param _feePercent Royalty fee percent in basis point\\n    function setRoyaltyInfo(address _receiver, uint96 _feePercent)\\n        external\\n        override\\n        onlyOwner\\n    {\\n        // Royalty fees are limited to 25%\\n        if (_feePercent > 2_500) {\\n            revert Launchpeg__InvalidRoyaltyInfo();\\n        }\\n        _setDefaultRoyalty(_receiver, _feePercent);\\n        emit DefaultRoyaltySet(_receiver, _feePercent);\\n    }\\n\\n    /// @notice Set amount of NFTs mintable per address during the allowlist phase\\n    /// @param _addresses List of addresses allowed to mint during the allowlist phase\\n    /// @param _numNfts List of NFT quantities mintable per address\\n    function seedAllowlist(\\n        address[] calldata _addresses,\\n        uint256[] calldata _numNfts\\n    ) external override onlyOwner {\\n        uint256 addressesLength = _addresses.length;\\n        if (addressesLength != _numNfts.length) {\\n            revert Launchpeg__WrongAddressesAndNumSlotsLength();\\n        }\\n        for (uint256 i; i < addressesLength; i++) {\\n            allowlist[_addresses[i]] = _numNfts[i];\\n        }\\n\\n        emit AllowlistSeeded();\\n    }\\n\\n    /// @notice Set the base URI\\n    /// @dev This sets the URI for revealed tokens\\n    /// Only callable by project owner\\n    /// @param _baseURI Base URI to be set\\n    function setBaseURI(string calldata _baseURI) external override onlyOwner {\\n        baseURI = _baseURI;\\n        emit BaseURISet(baseURI);\\n    }\\n\\n    /// @notice Set the unrevealed URI\\n    /// @dev Only callable by project owner\\n    /// @param _unrevealedURI Unrevealed URI to be set\\n    function setUnrevealedURI(string calldata _unrevealedURI)\\n        external\\n        override\\n        onlyOwner\\n    {\\n        unrevealedURI = _unrevealedURI;\\n        emit UnrevealedURISet(unrevealedURI);\\n    }\\n\\n    /// @notice Set the allowlist start time. Can only be set after phases\\n    /// have been initialized.\\n    /// @dev Only callable by owner\\n    /// @param _allowlistStartTime New allowlist start time\\n    function setAllowlistStartTime(uint256 _allowlistStartTime)\\n        external\\n        override\\n        onlyOwner\\n    {\\n        if (allowlistStartTime == 0) {\\n            revert Launchpeg__NotInitialized();\\n        }\\n        if (_allowlistStartTime < preMintStartTime) {\\n            revert Launchpeg__AllowlistBeforePreMint();\\n        }\\n        if (publicSaleStartTime < _allowlistStartTime) {\\n            revert Launchpeg__PublicSaleBeforeAllowlist();\\n        }\\n        allowlistStartTime = _allowlistStartTime;\\n        emit AllowlistStartTimeSet(_allowlistStartTime);\\n    }\\n\\n    /// @notice Set the public sale start time. Can only be set after phases\\n    /// have been initialized.\\n    /// @dev Only callable by owner\\n    /// @param _publicSaleStartTime New public sale start time\\n    function setPublicSaleStartTime(uint256 _publicSaleStartTime)\\n        external\\n        override\\n        onlyOwner\\n    {\\n        if (publicSaleStartTime == 0) {\\n            revert Launchpeg__NotInitialized();\\n        }\\n        if (_publicSaleStartTime < allowlistStartTime) {\\n            revert Launchpeg__PublicSaleBeforeAllowlist();\\n        }\\n        if (publicSaleEndTime < _publicSaleStartTime) {\\n            revert Launchpeg__PublicSaleEndBeforePublicSaleStart();\\n        }\\n        publicSaleStartTime = _publicSaleStartTime;\\n        emit PublicSaleStartTimeSet(_publicSaleStartTime);\\n    }\\n\\n    /// @notice Set the public sale end time. Can only be set after phases\\n    /// have been initialized.\\n    /// @dev Only callable by owner\\n    /// @param _publicSaleEndTime New public sale end time\\n    function setPublicSaleEndTime(uint256 _publicSaleEndTime)\\n        external\\n        override\\n        onlyOwner\\n    {\\n        if (publicSaleEndTime == 0) {\\n            revert Launchpeg__NotInitialized();\\n        }\\n        if (_publicSaleEndTime < publicSaleStartTime) {\\n            revert Launchpeg__PublicSaleEndBeforePublicSaleStart();\\n        }\\n        publicSaleEndTime = _publicSaleEndTime;\\n        emit PublicSaleEndTimeSet(_publicSaleEndTime);\\n    }\\n\\n    /// @notice Set the withdraw AVAX start time.\\n    /// @param _withdrawAVAXStartTime New public sale end time\\n    function setWithdrawAVAXStartTime(uint256 _withdrawAVAXStartTime)\\n        external\\n        override\\n        onlyOwner\\n    {\\n        if (_withdrawAVAXStartTime < block.timestamp) {\\n            revert Launchpeg__InvalidStartTime();\\n        }\\n        withdrawAVAXStartTime = _withdrawAVAXStartTime;\\n        emit WithdrawAVAXStartTimeSet(_withdrawAVAXStartTime);\\n    }\\n\\n    /// @notice Update batch reveal\\n    /// @dev Can be set to zero address to disable batch reveal\\n    function setBatchReveal(address _batchReveal) external override onlyOwner {\\n        batchReveal = IBatchReveal(_batchReveal);\\n    }\\n\\n    /// @notice Mint NFTs to the project owner\\n    /// @dev Can only mint up to `amountForDevs`\\n    /// @param _quantity Quantity of NFTs to mint\\n    function devMint(uint256 _quantity)\\n        external\\n        override\\n        onlyOwnerOrRole(PROJECT_OWNER_ROLE)\\n        whenNotPaused\\n    {\\n        if (_totalSupplyWithPreMint() + _quantity > collectionSize) {\\n            revert Launchpeg__MaxSupplyReached();\\n        }\\n        if (amountMintedByDevs + _quantity > amountForDevs) {\\n            revert Launchpeg__MaxSupplyForDevReached();\\n        }\\n        amountMintedByDevs = amountMintedByDevs + _quantity;\\n        uint256 numChunks = _quantity / maxBatchSize;\\n        for (uint256 i; i < numChunks; i++) {\\n            _mint(msg.sender, maxBatchSize, \\\"\\\", false);\\n        }\\n        uint256 remainingQty = _quantity % maxBatchSize;\\n        if (remainingQty != 0) {\\n            _mint(msg.sender, remainingQty, \\\"\\\", false);\\n        }\\n        emit DevMint(msg.sender, _quantity);\\n    }\\n\\n    /// @dev Should only be called in the pre-mint phase\\n    /// @param _quantity Quantity of NFTs to mint\\n    function _preMint(uint256 _quantity) internal {\\n        if (_quantity == 0) {\\n            revert Launchpeg__InvalidQuantity();\\n        }\\n        if (_quantity > allowlist[msg.sender]) {\\n            revert Launchpeg__NotEligibleForAllowlistMint();\\n        }\\n        if (\\n            (_totalSupplyWithPreMint() + _quantity > collectionSize) ||\\n            (amountMintedDuringPreMint + _quantity > amountForAllowlist)\\n        ) {\\n            revert Launchpeg__MaxSupplyReached();\\n        }\\n        allowlist[msg.sender] -= _quantity;\\n        userAddressToPreMintAmount[msg.sender] += _quantity;\\n        amountMintedDuringPreMint += _quantity;\\n        preMintQueue.push(\\n            PreMintData({sender: msg.sender, quantity: _quantity})\\n        );\\n        uint256 price = _preMintPrice();\\n        uint256 totalCost = price * _quantity;\\n        emit PreMint(msg.sender, _quantity, price);\\n        _refundIfOver(totalCost);\\n    }\\n\\n    /// @dev Should only be called in the allowlist and public sale phases.\\n    /// @param _maxQuantity Max quantity of NFTs to mint\\n    function _batchMintPreMintedNFTs(uint256 _maxQuantity) internal {\\n        if (_maxQuantity == 0) {\\n            revert Launchpeg__InvalidQuantity();\\n        }\\n        if (amountMintedDuringPreMint == amountBatchMinted) {\\n            revert Launchpeg__MaxSupplyForBatchMintReached();\\n        }\\n        uint256 remQuantity = _maxQuantity;\\n        uint256 price = _preMintPrice();\\n        address sender;\\n        uint256 quantity;\\n        uint256 i = preMintQueueIdx;\\n        uint256 length = preMintQueue.length;\\n        while (i < length && remQuantity > 0) {\\n            PreMintData memory data = preMintQueue[i];\\n            sender = data.sender;\\n            if (data.quantity > remQuantity) {\\n                quantity = remQuantity;\\n                preMintQueue[i].quantity -= quantity;\\n            } else {\\n                quantity = data.quantity;\\n                delete preMintQueue[i];\\n                i++;\\n            }\\n            remQuantity -= quantity;\\n            userAddressToPreMintAmount[sender] -= quantity;\\n            _mint(sender, quantity, \\\"\\\", false);\\n            emit Mint(\\n                sender,\\n                quantity,\\n                price,\\n                _totalMinted() - quantity,\\n                Phase.PreMint\\n            );\\n        }\\n        amountBatchMinted += (_maxQuantity - remQuantity);\\n        preMintQueueIdx = i;\\n    }\\n\\n    function _preMintPrice() internal view virtual returns (uint256);\\n\\n    /// @notice Withdraw AVAX to the given recipient\\n    /// @param _to Recipient of the earned AVAX\\n    function withdrawAVAX(address _to)\\n        external\\n        override\\n        onlyOwnerOrRole(PROJECT_OWNER_ROLE)\\n        nonReentrant\\n        whenNotPaused\\n    {\\n        if (\\n            withdrawAVAXStartTime > block.timestamp ||\\n            withdrawAVAXStartTime == 0\\n        ) {\\n            revert Launchpeg__WithdrawAVAXNotAvailable();\\n        }\\n\\n        uint256 amount = address(this).balance;\\n        uint256 fee;\\n        bool sent;\\n\\n        if (joeFeePercent > 0) {\\n            fee = (amount * joeFeePercent) / BASIS_POINT_PRECISION;\\n            amount = amount - fee;\\n\\n            (sent, ) = joeFeeCollector.call{value: fee}(\\\"\\\");\\n            if (!sent) {\\n                revert Launchpeg__TransferFailed();\\n            }\\n        }\\n\\n        (sent, ) = _to.call{value: amount}(\\\"\\\");\\n        if (!sent) {\\n            revert Launchpeg__TransferFailed();\\n        }\\n\\n        emit AvaxWithdraw(_to, amount, fee);\\n    }\\n\\n    /// @notice Returns the ownership data of a specific token ID\\n    /// @param _tokenId Token ID\\n    /// @return TokenOwnership Ownership struct for a specific token ID\\n    function getOwnershipData(uint256 _tokenId)\\n        external\\n        view\\n        override\\n        returns (TokenOwnership memory)\\n    {\\n        return _ownershipOf(_tokenId);\\n    }\\n\\n    /// @notice Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n    /// @param _id Token id\\n    /// @return URI Token URI\\n    function tokenURI(uint256 _id)\\n        public\\n        view\\n        override(ERC721AUpgradeable, IERC721MetadataUpgradeable)\\n        returns (string memory)\\n    {\\n        if (address(batchReveal) == address(0)) {\\n            return string(abi.encodePacked(baseURI, _id.toString()));\\n        } else if (\\n            _id >= batchReveal.launchpegToLastTokenReveal(address(this))\\n        ) {\\n            return unrevealedURI;\\n        } else {\\n            return\\n                string(\\n                    abi.encodePacked(\\n                        baseURI,\\n                        batchReveal\\n                            .getShuffledTokenId(address(this), _id)\\n                            .toString()\\n                    )\\n                );\\n        }\\n    }\\n\\n    /// @notice Returns the number of NFTs minted by a specific address\\n    /// @param _owner The owner of the NFTs\\n    /// @return numberMinted Number of NFTs minted\\n    function numberMinted(address _owner)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return _numberMinted(_owner);\\n    }\\n\\n    /// @dev Returns true if this contract implements the interface defined by\\n    /// `interfaceId`. See the corresponding\\n    /// https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n    /// to learn more about how these IDs are created.\\n    /// This function call must use less than 30 000 gas.\\n    /// @param _interfaceId InterfaceId to consider. Comes from type(InterfaceContract).interfaceId\\n    /// @return isInterfaceSupported True if the considered interface is supported\\n    function supportsInterface(bytes4 _interfaceId)\\n        public\\n        view\\n        virtual\\n        override(\\n            ERC721AUpgradeable,\\n            ERC2981Upgradeable,\\n            IERC165Upgradeable,\\n            SafePausableUpgradeable\\n        )\\n        returns (bool)\\n    {\\n        return\\n            _interfaceId == type(IBaseLaunchpeg).interfaceId ||\\n            ERC721AUpgradeable.supportsInterface(_interfaceId) ||\\n            ERC2981Upgradeable.supportsInterface(_interfaceId) ||\\n            ERC165Upgradeable.supportsInterface(_interfaceId) ||\\n            SafePausableUpgradeable.supportsInterface(_interfaceId) ||\\n            super.supportsInterface(_interfaceId);\\n    }\\n\\n    /// @dev Verifies that enough AVAX has been sent by the sender and refunds the extra tokens if any\\n    /// @param _price The price paid by the sender for minting NFTs\\n    function _refundIfOver(uint256 _price) internal {\\n        if (msg.value < _price) {\\n            revert Launchpeg__NotEnoughAVAX(msg.value);\\n        }\\n        if (msg.value > _price) {\\n            (bool success, ) = msg.sender.call{value: msg.value - _price}(\\\"\\\");\\n            if (!success) {\\n                revert Launchpeg__TransferFailed();\\n            }\\n        }\\n    }\\n\\n    /// @notice Reveals the next batch if the reveal conditions are met\\n    function revealNextBatch() external override isEOA whenNotPaused {\\n        if (address(batchReveal) == address(0)) {\\n            revert Launchpeg__BatchRevealDisabled();\\n        }\\n        if (!batchReveal.revealNextBatch(address(this), totalSupply())) {\\n            revert Launchpeg__RevealNextBatchNotAvailable();\\n        }\\n    }\\n\\n    /// @notice Tells you if a batch can be revealed\\n    /// @return bool Whether reveal can be triggered or not\\n    /// @return uint256 The number of the next batch that will be revealed\\n    function hasBatchToReveal() external view override returns (bool, uint256) {\\n        if (address(batchReveal) == address(0)) {\\n            return (false, 0);\\n        }\\n        return batchReveal.hasBatchToReveal(address(this), totalSupply());\\n    }\\n\\n    // @dev Total supply including pre-mints\\n    function _totalSupplyWithPreMint() internal view returns (uint256) {\\n        return totalSupply() + amountMintedDuringPreMint - amountBatchMinted;\\n    }\\n\\n    // @notice Number minted by user including pre-mints\\n    function numberMintedWithPreMint(address _owner)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return _numberMinted(_owner) + userAddressToPreMintAmount[_owner];\\n    }\\n}\\n\",\"keccak256\":\"0x76c9ef0718a541abf75cc285e9c3c7af8c3482f1c05cc112fbd0f16093ad4f77\",\"license\":\"MIT\"},\"contracts/FlatLaunchpeg.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./interfaces/IFlatLaunchpeg.sol\\\";\\nimport \\\"./BaseLaunchpeg.sol\\\";\\n\\n/// @title FlatLaunchpeg\\n/// @author Trader Joe\\n/// @notice Implements a simple minting NFT contract with an allowlist and public sale phase.\\ncontract FlatLaunchpeg is BaseLaunchpeg, IFlatLaunchpeg {\\n    /// @notice Price of one NFT for people on the mint list\\n    /// @dev allowlistPrice is scaled to 1e18\\n    uint256 public override allowlistPrice;\\n\\n    /// @notice Price of one NFT during the public sale\\n    /// @dev salePrice is scaled to 1e18\\n    uint256 public override salePrice;\\n\\n    /// @dev Emitted on initializePhases()\\n    /// @param preMintStartTime Pre-mint start time in seconds\\n    /// @param allowlistStartTime Allowlist mint start time in seconds\\n    /// @param publicSaleStartTime Public sale start time in seconds\\n    /// @param publicSaleEndTime Public sale end time in seconds\\n    /// @param allowlistPrice Price of the allowlist sale in Avax\\n    /// @param salePrice Price of the public sale in Avax\\n    event Initialized(\\n        uint256 preMintStartTime,\\n        uint256 allowlistStartTime,\\n        uint256 publicSaleStartTime,\\n        uint256 publicSaleEndTime,\\n        uint256 allowlistPrice,\\n        uint256 salePrice\\n    );\\n\\n    modifier atPhase(Phase _phase) {\\n        if (currentPhase() != _phase) {\\n            revert Launchpeg__WrongPhase();\\n        }\\n        _;\\n    }\\n\\n    /// @dev Batch mint is allowed in the allowlist and public sale phases\\n    modifier isBatchMintAvailable() {\\n        Phase currPhase = currentPhase();\\n        if (currPhase != Phase.Allowlist && currPhase != Phase.PublicSale) {\\n            revert Launchpeg__WrongPhase();\\n        }\\n        _;\\n    }\\n\\n    /// @notice FlatLaunchpeg initialization\\n    /// Can only be called once\\n    /// @param _name ERC721 name\\n    /// @param _symbol ERC721 symbol\\n    /// @param _projectOwner The project owner\\n    /// @param _royaltyReceiver Royalty fee collector\\n    /// @param _maxBatchSize Max amount of NFTs that can be minted at once\\n    /// @param _collectionSize The collection size (e.g 10000)\\n    /// @param _amountForDevs Amount of NFTs reserved for `projectOwner` (e.g 200)\\n    /// @param _amountForAllowlist Amount of NFTs available for the allowlist mint (e.g 1000)\\n    function initialize(\\n        string memory _name,\\n        string memory _symbol,\\n        address _projectOwner,\\n        address _royaltyReceiver,\\n        uint256 _maxBatchSize,\\n        uint256 _collectionSize,\\n        uint256 _amountForDevs,\\n        uint256 _amountForAllowlist\\n    ) external override initializer {\\n        initializeBaseLaunchpeg(\\n            _name,\\n            _symbol,\\n            _projectOwner,\\n            _royaltyReceiver,\\n            _maxBatchSize,\\n            _collectionSize,\\n            _amountForDevs,\\n            _amountForAllowlist\\n        );\\n    }\\n\\n    /// @notice Initialize the two phases of the sale\\n    /// @dev Can only be called once\\n    /// @param _preMintStartTime Pre-mint start time in seconds\\n    /// @param _allowlistStartTime Allowlist mint start time in seconds\\n    /// @param _publicSaleStartTime Public sale start time in seconds\\n    /// @param _publicSaleEndTime Public sale end time in seconds\\n    /// @param _allowlistPrice Price of the allowlist sale in Avax\\n    /// @param _salePrice Price of the public sale in Avax\\n    function initializePhases(\\n        uint256 _preMintStartTime,\\n        uint256 _allowlistStartTime,\\n        uint256 _publicSaleStartTime,\\n        uint256 _publicSaleEndTime,\\n        uint256 _allowlistPrice,\\n        uint256 _salePrice\\n    ) external override onlyOwner atPhase(Phase.NotStarted) {\\n        if (_preMintStartTime < block.timestamp) {\\n            revert Launchpeg__InvalidStartTime();\\n        }\\n        if (_allowlistStartTime < _preMintStartTime) {\\n            revert Launchpeg__AllowlistBeforePreMint();\\n        }\\n        if (_publicSaleStartTime < _allowlistStartTime) {\\n            revert Launchpeg__PublicSaleBeforeAllowlist();\\n        }\\n        if (_publicSaleEndTime < _publicSaleStartTime) {\\n            revert Launchpeg__PublicSaleEndBeforePublicSaleStart();\\n        }\\n        if (_allowlistPrice > _salePrice) {\\n            revert Launchpeg__InvalidAllowlistPrice();\\n        }\\n\\n        salePrice = _salePrice;\\n        allowlistPrice = _allowlistPrice;\\n\\n        preMintStartTime = _preMintStartTime;\\n        allowlistStartTime = _allowlistStartTime;\\n        publicSaleStartTime = _publicSaleStartTime;\\n        publicSaleEndTime = _publicSaleEndTime;\\n\\n        emit Initialized(\\n            preMintStartTime,\\n            allowlistStartTime,\\n            publicSaleStartTime,\\n            publicSaleEndTime,\\n            allowlistPrice,\\n            salePrice\\n        );\\n    }\\n\\n    /// @notice Set the pre-mint start time. Can only be set after phases\\n    /// have been initialized.\\n    /// @dev Only callable by owner\\n    /// @param _preMintStartTime New pre-mint start time\\n    function setPreMintStartTime(uint256 _preMintStartTime)\\n        external\\n        override\\n        onlyOwner\\n    {\\n        if (preMintStartTime == 0) {\\n            revert Launchpeg__NotInitialized();\\n        }\\n        if (_preMintStartTime < block.timestamp) {\\n            revert Launchpeg__InvalidStartTime();\\n        }\\n        if (allowlistStartTime < _preMintStartTime) {\\n            revert Launchpeg__AllowlistBeforePreMint();\\n        }\\n        preMintStartTime = _preMintStartTime;\\n        emit PreMintStartTimeSet(_preMintStartTime);\\n    }\\n\\n    /// @notice Mint NFTs during the pre-mint\\n    /// @param _quantity Quantity of NFTs to mint\\n    function preMint(uint256 _quantity)\\n        external\\n        payable\\n        override\\n        whenNotPaused\\n        atPhase(Phase.PreMint)\\n    {\\n        _preMint(_quantity);\\n    }\\n\\n    /// @notice Batch mint NFTs requested during the pre-mint\\n    /// @param _maxQuantity Max quantity of NFTs to mint\\n    function batchMintPreMintedNFTs(uint256 _maxQuantity)\\n        external\\n        override\\n        whenNotPaused\\n        isBatchMintAvailable\\n    {\\n        _batchMintPreMintedNFTs(_maxQuantity);\\n    }\\n\\n    /// @notice Mint NFTs during the allowlist mint\\n    /// @param _quantity Quantity of NFTs to mint\\n    function allowlistMint(uint256 _quantity)\\n        external\\n        payable\\n        override\\n        whenNotPaused\\n        atPhase(Phase.Allowlist)\\n    {\\n        if (_quantity > allowlist[msg.sender]) {\\n            revert Launchpeg__NotEligibleForAllowlistMint();\\n        }\\n        if (\\n            (_totalSupplyWithPreMint() + _quantity > collectionSize) ||\\n            (amountMintedDuringPreMint +\\n                amountMintedDuringAllowlist +\\n                _quantity) >\\n            amountForAllowlist\\n        ) {\\n            revert Launchpeg__MaxSupplyReached();\\n        }\\n        allowlist[msg.sender] -= _quantity;\\n        uint256 totalCost = allowlistPrice * _quantity;\\n\\n        _mint(msg.sender, _quantity, \\\"\\\", false);\\n        amountMintedDuringAllowlist += _quantity;\\n        emit Mint(\\n            msg.sender,\\n            _quantity,\\n            allowlistPrice,\\n            _totalMinted() - _quantity,\\n            Phase.Allowlist\\n        );\\n        _refundIfOver(totalCost);\\n    }\\n\\n    /// @notice Mint NFTs during the public sale\\n    /// @param _quantity Quantity of NFTs to mint\\n    function publicSaleMint(uint256 _quantity)\\n        external\\n        payable\\n        override\\n        isEOA\\n        whenNotPaused\\n        atPhase(Phase.PublicSale)\\n    {\\n        if (\\n            numberMintedWithPreMint(msg.sender) + _quantity >\\n            maxPerAddressDuringMint\\n        ) {\\n            revert Launchpeg__CanNotMintThisMany();\\n        }\\n        if (_totalSupplyWithPreMint() + _quantity > collectionSize) {\\n            revert Launchpeg__MaxSupplyReached();\\n        }\\n        uint256 total = salePrice * _quantity;\\n\\n        _mint(msg.sender, _quantity, \\\"\\\", false);\\n        amountMintedDuringPublicSale += _quantity;\\n        emit Mint(\\n            msg.sender,\\n            _quantity,\\n            salePrice,\\n            _totalMinted() - _quantity,\\n            Phase.PublicSale\\n        );\\n        _refundIfOver(total);\\n    }\\n\\n    /// @notice Returns the current phase\\n    /// @return phase Current phase\\n    function currentPhase() public view override returns (Phase) {\\n        if (\\n            preMintStartTime == 0 ||\\n            allowlistStartTime == 0 ||\\n            publicSaleStartTime == 0 ||\\n            publicSaleEndTime == 0 ||\\n            block.timestamp < preMintStartTime\\n        ) {\\n            return Phase.NotStarted;\\n        } else if (totalSupply() >= collectionSize) {\\n            return Phase.Ended;\\n        } else if (\\n            block.timestamp >= preMintStartTime &&\\n            block.timestamp < allowlistStartTime\\n        ) {\\n            return Phase.PreMint;\\n        } else if (\\n            block.timestamp >= allowlistStartTime &&\\n            block.timestamp < publicSaleStartTime\\n        ) {\\n            return Phase.Allowlist;\\n        } else if (\\n            block.timestamp >= publicSaleStartTime &&\\n            block.timestamp < publicSaleEndTime\\n        ) {\\n            return Phase.PublicSale;\\n        }\\n        return Phase.Ended;\\n    }\\n\\n    /// @dev Returns true if this contract implements the interface defined by\\n    /// `interfaceId`. See the corresponding\\n    /// https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n    /// to learn more about how these IDs are created.\\n    /// This function call must use less than 30 000 gas.\\n    /// @param _interfaceId InterfaceId to consider. Comes from type(Interface).interfaceId\\n    /// @return isInterfaceSupported True if the considered interface is supported\\n    function supportsInterface(bytes4 _interfaceId)\\n        public\\n        view\\n        virtual\\n        override(BaseLaunchpeg, IERC165Upgradeable)\\n        returns (bool)\\n    {\\n        return\\n            _interfaceId == type(IFlatLaunchpeg).interfaceId ||\\n            super.supportsInterface(_interfaceId);\\n    }\\n\\n    /// @dev Returns pre-mint price. Used by _preMint() and _batchMintPreMintedNFTs() methods.\\n    function _preMintPrice() internal view override returns (uint256) {\\n        return allowlistPrice;\\n    }\\n}\\n\",\"keccak256\":\"0xf6270410857930ac7a7f8ff1bd7a3e6b2adf52bf3a68febc9546a5244395cd0b\",\"license\":\"MIT\"},\"contracts/LaunchpegErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n// LaunchpegFactory\\nerror LaunchpegFactory__InvalidBatchReveal();\\nerror LaunchpegFactory__InvalidImplementation();\\n\\n// Launchpeg\\nerror Launchpeg__AllowlistBeforePreMint();\\nerror Launchpeg__BatchRevealDisabled();\\nerror Launchpeg__BatchRevealNotInitialized();\\nerror Launchpeg__BatchRevealStarted();\\nerror Launchpeg__CanNotMintThisMany();\\nerror Launchpeg__EndPriceGreaterThanStartPrice();\\nerror Launchpeg__HasBeenForceRevealed();\\nerror Launchpeg__JoeFeeAlreadyInitialized();\\nerror Launchpeg__InvalidAllowlistPrice();\\nerror Launchpeg__InvalidAuctionDropInterval();\\nerror Launchpeg__InvalidBatchReveal();\\nerror Launchpeg__InvalidBatchRevealSize();\\nerror Launchpeg__InvalidCallbackGasLimit();\\nerror Launchpeg__InvalidCoordinator();\\nerror Launchpeg__InvalidKeyHash();\\nerror Launchpeg__InvalidJoeFeeCollector();\\nerror Launchpeg__InvalidMaxBatchSize();\\nerror Launchpeg__InvalidProjectOwner();\\nerror Launchpeg__InvalidPercent();\\nerror Launchpeg__InvalidQuantity();\\nerror Launchpeg__InvalidRevealDates();\\nerror Launchpeg__InvalidRoyaltyInfo();\\nerror Launchpeg__InvalidStartTime();\\nerror Launchpeg__IsNotInTheConsumerList();\\nerror Launchpeg__LargerCollectionSizeNeeded();\\nerror Launchpeg__MaxSupplyForDevReached();\\nerror Launchpeg__MaxSupplyForBatchMintReached();\\nerror Launchpeg__MaxSupplyReached();\\nerror Launchpeg__NotEligibleForAllowlistMint();\\nerror Launchpeg__NotEnoughAVAX(uint256 avaxSent);\\nerror Launchpeg__NotInitialized();\\nerror Launchpeg__PreMintBeforeAuction();\\nerror Launchpeg__PublicSaleBeforeAllowlist();\\nerror Launchpeg__PublicSaleEndBeforePublicSaleStart();\\nerror Launchpeg__RevealNextBatchNotAvailable();\\nerror Launchpeg__TransferFailed();\\nerror Launchpeg__Unauthorized();\\nerror Launchpeg__WithdrawAVAXNotAvailable();\\nerror Launchpeg__WrongAddressesAndNumSlotsLength();\\nerror Launchpeg__WrongPhase();\\n\\n// PendingOwnableUpgradeable\\nerror PendingOwnableUpgradeable__NotOwner();\\nerror PendingOwnableUpgradeable__AddressZero();\\nerror PendingOwnableUpgradeable__NotPendingOwner();\\nerror PendingOwnableUpgradeable__PendingOwnerAlreadySet();\\nerror PendingOwnableUpgradeable__NoPendingOwner();\\n\\n// SafeAccessControlEnumerableUpgradeable\\nerror SafeAccessControlEnumerableUpgradeable__SenderMissingRoleAndIsNotOwner(\\n    bytes32 role,\\n    address sender\\n);\\nerror SafeAccessControlEnumerableUpgradeable__RoleIsDefaultAdmin();\\n\\n// SafeAccessControlEnumerableUpgradeable\\nerror SafePausableUpgradeable__AlreadyPaused();\\nerror SafePausableUpgradeable__AlreadyUnpaused();\\n\",\"keccak256\":\"0xe1bf0cb688b2d22cddeae21e6370a7dc8903001b3666208db565662427f178b9\",\"license\":\"MIT\"},\"contracts/interfaces/IBaseLaunchpeg.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\\\";\\n\\nimport \\\"erc721a-upgradeable/contracts/ERC721AUpgradeable.sol\\\";\\n\\n/// @title IBaseLaunchpeg\\n/// @author Trader Joe\\n/// @notice Defines the basic interface of BaseLaunchpeg\\ninterface IBaseLaunchpeg is IERC721Upgradeable, IERC721MetadataUpgradeable {\\n    enum Phase {\\n        NotStarted,\\n        DutchAuction,\\n        PreMint,\\n        Allowlist,\\n        PublicSale,\\n        Ended\\n    }\\n\\n    function PROJECT_OWNER_ROLE() external view returns (bytes32);\\n\\n    function collectionSize() external view returns (uint256);\\n\\n    function unrevealedURI() external view returns (string memory);\\n\\n    function baseURI() external view returns (string memory);\\n\\n    function amountForDevs() external view returns (uint256);\\n\\n    function amountForAllowlist() external view returns (uint256);\\n\\n    function maxBatchSize() external view returns (uint256);\\n\\n    function maxPerAddressDuringMint() external view returns (uint256);\\n\\n    function joeFeePercent() external view returns (uint256);\\n\\n    function joeFeeCollector() external view returns (address);\\n\\n    function allowlist(address) external view returns (uint256);\\n\\n    function amountMintedByDevs() external view returns (uint256);\\n\\n    function amountMintedDuringPreMint() external view returns (uint256);\\n\\n    function amountBatchMinted() external view returns (uint256);\\n\\n    function amountMintedDuringAllowlist() external view returns (uint256);\\n\\n    function amountMintedDuringPublicSale() external view returns (uint256);\\n\\n    function preMintStartTime() external view returns (uint256);\\n\\n    function allowlistStartTime() external view returns (uint256);\\n\\n    function publicSaleStartTime() external view returns (uint256);\\n\\n    function publicSaleEndTime() external view returns (uint256);\\n\\n    function withdrawAVAXStartTime() external view returns (uint256);\\n\\n    function allowlistPrice() external view returns (uint256);\\n\\n    function salePrice() external view returns (uint256);\\n\\n    function initializeJoeFee(uint256 _joeFeePercent, address _joeFeeCollector)\\n        external;\\n\\n    function setRoyaltyInfo(address receiver, uint96 feePercent) external;\\n\\n    function seedAllowlist(\\n        address[] memory _addresses,\\n        uint256[] memory _numSlots\\n    ) external;\\n\\n    function setBaseURI(string calldata baseURI) external;\\n\\n    function setUnrevealedURI(string calldata baseURI) external;\\n\\n    function setPreMintStartTime(uint256 _preMintStartTime) external;\\n\\n    function setAllowlistStartTime(uint256 _allowlistStartTime) external;\\n\\n    function setPublicSaleStartTime(uint256 _publicSaleStartTime) external;\\n\\n    function setPublicSaleEndTime(uint256 _publicSaleEndTime) external;\\n\\n    function setWithdrawAVAXStartTime(uint256 _withdrawAVAXStartTime) external;\\n\\n    function setBatchReveal(address _batchReveal) external;\\n\\n    function devMint(uint256 quantity) external;\\n\\n    function preMint(uint256 _quantity) external payable;\\n\\n    function batchMintPreMintedNFTs(uint256 _maxQuantity) external;\\n\\n    function allowlistMint(uint256 _quantity) external payable;\\n\\n    function publicSaleMint(uint256 _quantity) external payable;\\n\\n    function withdrawAVAX(address to) external;\\n\\n    function getOwnershipData(uint256 tokenId)\\n        external\\n        view\\n        returns (ERC721AUpgradeable.TokenOwnership memory);\\n\\n    function userAddressToPreMintAmount(address owner)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function numberMinted(address owner) external view returns (uint256);\\n\\n    function numberMintedWithPreMint(address _owner)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function currentPhase() external view returns (Phase);\\n\\n    function revealNextBatch() external;\\n\\n    function hasBatchToReveal() external view returns (bool, uint256);\\n}\\n\",\"keccak256\":\"0x4c9f520b2ab3c30a480d1570f1670ba5237d97bb682b0fd0b098785cc2a8f4b5\",\"license\":\"MIT\"},\"contracts/interfaces/IBatchReveal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/// @title IBatchReveal\\n/// @author Trader Joe\\n/// @notice Defines the basic interface of BatchReveal\\ninterface IBatchReveal {\\n    struct BatchRevealConfig {\\n        uint256 collectionSize;\\n        int128 intCollectionSize;\\n        /// @notice Size of the batch reveal\\n        /// @dev Must divide collectionSize\\n        uint256 revealBatchSize;\\n        /// @notice Timestamp for the start of the reveal process\\n        /// @dev Can be set to zero for immediate reveal after token mint\\n        uint256 revealStartTime;\\n        /// @notice Time interval for gradual reveal\\n        /// @dev Can be set to zero in order to reveal the collection all at once\\n        uint256 revealInterval;\\n    }\\n\\n    function initialize() external;\\n\\n    function configure(\\n        address _baseLaunchpeg,\\n        uint256 _revealBatchSize,\\n        uint256 _revealStartTime,\\n        uint256 _revealInterval\\n    ) external;\\n\\n    function setRevealBatchSize(\\n        address _baseLaunchpeg,\\n        uint256 _revealBatchSize\\n    ) external;\\n\\n    function setRevealStartTime(\\n        address _baseLaunchpeg,\\n        uint256 _revealStartTime\\n    ) external;\\n\\n    function setRevealInterval(address _baseLaunchpeg, uint256 _revealInterval)\\n        external;\\n\\n    function setVRF(\\n        address _vrfCoordinator,\\n        bytes32 _keyHash,\\n        uint64 _subscriptionId,\\n        uint32 _callbackGasLimit\\n    ) external;\\n\\n    function launchpegToConfig(address)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            int128,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function launchpegToBatchToSeed(address, uint256)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function launchpegToLastTokenReveal(address)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function useVRF() external view returns (bool);\\n\\n    function subscriptionId() external view returns (uint64);\\n\\n    function keyHash() external view returns (bytes32);\\n\\n    function callbackGasLimit() external view returns (uint32);\\n\\n    function requestConfirmations() external view returns (uint16);\\n\\n    function launchpegToNextBatchToReveal(address)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function launchpegToHasBeenForceRevealed(address)\\n        external\\n        view\\n        returns (bool);\\n\\n    function launchpegToVrfRequestedForBatch(address, uint256)\\n        external\\n        view\\n        returns (bool);\\n\\n    function getShuffledTokenId(address _baseLaunchpeg, uint256 _startId)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function isBatchRevealInitialized(address _baseLaunchpeg)\\n        external\\n        view\\n        returns (bool);\\n\\n    function revealNextBatch(address _baseLaunchpeg, uint256 _totalSupply)\\n        external\\n        returns (bool);\\n\\n    function hasBatchToReveal(address _baseLaunchpeg, uint256 _totalSupply)\\n        external\\n        view\\n        returns (bool, uint256);\\n\\n    function forceReveal(address _baseLaunchpeg) external;\\n}\\n\",\"keccak256\":\"0xc3232cf50271c82a2ab5713261f97727592c6be0ae6ce0d70906c6429311baea\",\"license\":\"MIT\"},\"contracts/interfaces/IFlatLaunchpeg.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./IBaseLaunchpeg.sol\\\";\\n\\n/// @title ILaunchpeg\\n/// @author Trader Joe\\n/// @notice Defines the basic interface of FlatLaunchpeg\\ninterface IFlatLaunchpeg is IBaseLaunchpeg {\\n    function initialize(\\n        string memory _name,\\n        string memory _symbol,\\n        address _projectOwner,\\n        address _royaltyReceiver,\\n        uint256 _maxBatchSize,\\n        uint256 _collectionSize,\\n        uint256 _amountForDevs,\\n        uint256 _amountForAllowlist\\n    ) external;\\n\\n    function initializePhases(\\n        uint256 _preMintStartTime,\\n        uint256 _allowlistStartTime,\\n        uint256 _publicSaleStartTime,\\n        uint256 _publicSaleEndTime,\\n        uint256 _allowlistPrice,\\n        uint256 _salePrice\\n    ) external;\\n}\\n\",\"keccak256\":\"0x144810da8d5d375aec7db1b68761c0e3c69871e3ada2ef7ffb539630287a604d\",\"license\":\"MIT\"},\"contracts/interfaces/IPendingOwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\ninterface IPendingOwnableUpgradeable {\\n    event PendingOwnerSet(address indexed pendingOwner);\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    function owner() external view returns (address);\\n\\n    function pendingOwner() external view returns (address);\\n\\n    function setPendingOwner(address pendingOwner) external;\\n\\n    function revokePendingOwner() external;\\n\\n    function becomeOwner() external;\\n\\n    function renounceOwnership() external;\\n}\\n\",\"keccak256\":\"0x4a8abc7df1039d8119c2f75e656bc1398bea4609199cb0a7e1d70eaa49e68733\",\"license\":\"MIT\"},\"contracts/interfaces/ISafePausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol\\\";\\n\\nimport \\\"../interfaces/IPendingOwnableUpgradeable.sol\\\";\\n\\ninterface ISafePausableUpgradeable is\\n    IAccessControlEnumerableUpgradeable,\\n    IPendingOwnableUpgradeable\\n{\\n    function PAUSER_ROLE() external pure returns (bytes32);\\n\\n    function UNPAUSER_ROLE() external pure returns (bytes32);\\n\\n    function PAUSER_ADMIN_ROLE() external pure returns (bytes32);\\n\\n    function UNPAUSER_ADMIN_ROLE() external pure returns (bytes32);\\n\\n    function pause() external;\\n\\n    function unpause() external;\\n}\\n\",\"keccak256\":\"0x81b77fc513e18d58e3f4a4dfb52b73d1ff47d60b2e16cbc04e2499a53213976d\",\"license\":\"MIT\"},\"contracts/utils/PendingOwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nimport \\\"../interfaces/IPendingOwnableUpgradeable.sol\\\";\\nimport \\\"../LaunchpegErrors.sol\\\";\\n\\n/**\\n * @title Pending Ownable\\n * @author Trader Joe\\n * @notice Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions. The ownership of this contract is transferred using the\\n * push and pull pattern, the current owner set a `pendingOwner` using\\n * {setPendingOwner} and that address can then call {becomeOwner} to become the\\n * owner of that contract. The main logic and comments comes from OpenZeppelin's\\n * Ownable contract.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {setPendingOwner} and {becomeOwner}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner\\n */\\nabstract contract PendingOwnableUpgradeable is\\n    Initializable,\\n    ERC165Upgradeable,\\n    IPendingOwnableUpgradeable\\n{\\n    address private _owner;\\n    address private _pendingOwner;\\n\\n    /**\\n     * @notice Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        if (msg.sender != _owner) revert PendingOwnableUpgradeable__NotOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @notice Throws if called by any account other than the pending owner.\\n     */\\n    modifier onlyPendingOwner() {\\n        if (msg.sender != _pendingOwner || msg.sender == address(0))\\n            revert PendingOwnableUpgradeable__NotPendingOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Initializes the contract setting `msg.sender` as the initial owner\\n     */\\n    function __PendingOwnable_init() internal onlyInitializing {\\n        __ERC165_init();\\n        __PendingOwnable_init_unchained();\\n    }\\n\\n    function __PendingOwnable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(msg.sender);\\n    }\\n\\n    /**\\n     * @notice Returns the address of the current owner\\n     * @return The address of the current owner\\n     */\\n    function owner() public view virtual override returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @notice Returns the address of the current pending owner\\n     * @return The address of the current pending owner\\n     */\\n    function pendingOwner() public view virtual override returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /**\\n     * @notice Sets the pending owner address. This address will be able to become\\n     * the owner of this contract by calling {becomeOwner}\\n     */\\n    function setPendingOwner(address pendingOwner_)\\n        public\\n        virtual\\n        override\\n        onlyOwner\\n    {\\n        if (pendingOwner_ == address(0))\\n            revert PendingOwnableUpgradeable__AddressZero();\\n        if (_pendingOwner != address(0))\\n            revert PendingOwnableUpgradeable__PendingOwnerAlreadySet();\\n        _setPendingOwner(pendingOwner_);\\n    }\\n\\n    /**\\n     * @notice Revoke the pending owner address. This address will not be able to\\n     * call {becomeOwner} to become the owner anymore.\\n     * Can only be called by the owner\\n     */\\n    function revokePendingOwner() public virtual override onlyOwner {\\n        if (_pendingOwner == address(0))\\n            revert PendingOwnableUpgradeable__NoPendingOwner();\\n        _setPendingOwner(address(0));\\n    }\\n\\n    /**\\n     * @notice Transfers the ownership to the new owner (`pendingOwner`).\\n     * Can only be called by the pending owner\\n     */\\n    function becomeOwner() public virtual override onlyPendingOwner {\\n        _transferOwnership(msg.sender);\\n    }\\n\\n    /**\\n     * @notice Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual override onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == type(IPendingOwnableUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @notice Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     * @param _newOwner The address of the new owner\\n     */\\n    function _transferOwnership(address _newOwner) internal virtual {\\n        address _oldOwner = _owner;\\n        _owner = _newOwner;\\n        _pendingOwner = address(0);\\n        emit OwnershipTransferred(_oldOwner, _newOwner);\\n    }\\n\\n    /**\\n     * @notice Push the new owner, it needs to be pulled to be effective.\\n     * Internal function without access restriction.\\n     * @param pendingOwner_ The address of the new pending owner\\n     */\\n    function _setPendingOwner(address pendingOwner_) internal virtual {\\n        _pendingOwner = pendingOwner_;\\n        emit PendingOwnerSet(pendingOwner_);\\n    }\\n}\\n\",\"keccak256\":\"0xc00538b6e845aa8c71e0b1b2c79d49f29520f0a3fab9469b328d1d5c67f12af7\",\"license\":\"MIT\"},\"contracts/utils/SafeAccessControlEnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\\\";\\n\\nimport \\\"../LaunchpegErrors.sol\\\";\\nimport \\\"./PendingOwnableUpgradeable.sol\\\";\\n\\nabstract contract SafeAccessControlEnumerableUpgradeable is\\n    PendingOwnableUpgradeable,\\n    AccessControlEnumerableUpgradeable\\n{\\n    /**\\n     * @dev Modifier that checks that the role is not the `DEFAULT_ADMIN_ROLE`\\n     */\\n    modifier roleIsNotDefaultAdmin(bytes32 role) {\\n        if (role == DEFAULT_ADMIN_ROLE)\\n            revert SafeAccessControlEnumerableUpgradeable__RoleIsDefaultAdmin();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier that checks that an account is the `owner` or has a specific role\\n     */\\n    modifier onlyOwnerOrRole(bytes32 role) {\\n        if (msg.sender != owner() && !hasRole(role, msg.sender))\\n            revert SafeAccessControlEnumerableUpgradeable__SenderMissingRoleAndIsNotOwner(\\n                role,\\n                msg.sender\\n            );\\n        _;\\n    }\\n\\n    function __SafeAccessControlEnumerable_init() internal onlyInitializing {\\n        __PendingOwnable_init();\\n        __AccessControlEnumerable_init();\\n\\n        __SafeAccessControlEnumerable_init_unchained();\\n    }\\n\\n    function __SafeAccessControlEnumerable_init_unchained()\\n        internal\\n        onlyInitializing\\n    {}\\n\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(PendingOwnableUpgradeable, AccessControlEnumerableUpgradeable)\\n        returns (bool)\\n    {\\n        return\\n            PendingOwnableUpgradeable.supportsInterface(interfaceId) ||\\n            AccessControlEnumerableUpgradeable.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @notice Grants `role` to `account`.\\n     * @dev If `account` had not been already granted `role`, emits a {RoleGranted} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be the `owner` or have ``role``'s admin role.\\n     * - the role granted can't be `DEFAULT_ADMIN`\\n     *\\n     * @param role The role to grant\\n     * @param account The address of the account\\n     */\\n    function grantRole(bytes32 role, address account)\\n        public\\n        virtual\\n        override\\n        roleIsNotDefaultAdmin(role)\\n        onlyOwnerOrRole(getRoleAdmin(role))\\n    {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @notice Revokes `role` from `account`.\\n     * @dev If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be the `owner` or have ``role``'s admin role.\\n     * - the role revoked can't be `DEFAULT_ADMIN`\\n     *\\n     * @param role The role to revoke\\n     * @param account The address of the account\\n     */\\n    function revokeRole(bytes32 role, address account)\\n        public\\n        virtual\\n        override\\n        roleIsNotDefaultAdmin(role)\\n        onlyOwnerOrRole(getRoleAdmin(role))\\n    {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @notice Revokes `role` from the calling account.\\n     *\\n     * @dev Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     * - the role renounced can't be `DEFAULT_ADMIN`\\n     *\\n     * @param role The role to renounce\\n     * @param account The address of the account\\n     */\\n    function renounceRole(bytes32 role, address account)\\n        public\\n        virtual\\n        override\\n        roleIsNotDefaultAdmin(role)\\n    {\\n        super.renounceRole(role, account);\\n    }\\n\\n    /**\\n     * @notice Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     * @dev This also transfer the `DEFAULT_ADMIN` role to the new owner\\n     * @param _newOwner The address of the new owner\\n     */\\n    function _transferOwnership(address _newOwner) internal virtual override {\\n        _revokeRole(DEFAULT_ADMIN_ROLE, owner());\\n        if (_newOwner != address(0)) _grantRole(DEFAULT_ADMIN_ROLE, _newOwner);\\n\\n        super._transferOwnership(_newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x96a0962b07ed4ea2c7e2578755444e1c31cf4d698e2ae8c636f68ff2150edf3e\",\"license\":\"MIT\"},\"contracts/utils/SafePausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\n\\nimport \\\"../LaunchpegErrors.sol\\\";\\nimport \\\"../interfaces/ISafePausableUpgradeable.sol\\\";\\nimport \\\"./SafeAccessControlEnumerableUpgradeable.sol\\\";\\n\\nabstract contract SafePausableUpgradeable is\\n    SafeAccessControlEnumerableUpgradeable,\\n    PausableUpgradeable,\\n    ISafePausableUpgradeable\\n{\\n    bytes32 public constant override PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n    bytes32 public constant override UNPAUSER_ROLE = keccak256(\\\"UNPAUSER_ROLE\\\");\\n\\n    bytes32 public constant override PAUSER_ADMIN_ROLE =\\n        keccak256(\\\"PAUSER_ADMIN_ROLE\\\");\\n    bytes32 public constant override UNPAUSER_ADMIN_ROLE =\\n        keccak256(\\\"UNPAUSER_ADMIN_ROLE\\\");\\n\\n    function __SafePausable_init() internal onlyInitializing {\\n        __SafeAccessControlEnumerable_init();\\n        __Pausable_init();\\n\\n        __SafePausable_init_unchained();\\n    }\\n\\n    function __SafePausable_init_unchained() internal onlyInitializing {\\n        _setRoleAdmin(PAUSER_ROLE, PAUSER_ADMIN_ROLE);\\n        _setRoleAdmin(UNPAUSER_ROLE, UNPAUSER_ADMIN_ROLE);\\n    }\\n\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(SafeAccessControlEnumerableUpgradeable)\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == type(ISafePausableUpgradeable).interfaceId ||\\n            SafeAccessControlEnumerableUpgradeable.supportsInterface(\\n                interfaceId\\n            );\\n    }\\n\\n    /**\\n     * @notice Pauses the contract.\\n     * @dev Sensible part of a contract might be pausable for security reasons.\\n     *\\n     * Requirements:\\n     * - the caller must be the `owner` or have the ``role`` role.\\n     * - the contrat needs to be unpaused.\\n     */\\n    function pause() public virtual override onlyOwnerOrRole(PAUSER_ROLE) {\\n        if (paused()) revert SafePausableUpgradeable__AlreadyPaused();\\n        _pause();\\n    }\\n\\n    /**\\n     * @notice Unpauses the contract.\\n     * @dev Sensible part of a contract might be pausable for security reasons.\\n     *\\n     * Requirements:\\n     * - the caller must be the `owner` or have the ``role`` role.\\n     * - the contrat needs to be unpaused.\\n     */\\n    function unpause() public virtual override onlyOwnerOrRole(UNPAUSER_ROLE) {\\n        if (!paused()) revert SafePausableUpgradeable__AlreadyUnpaused();\\n        _unpause();\\n    }\\n}\\n\",\"keccak256\":\"0x160728cd5c6765035b0c8ff0aff1050e276532545572c804a8b0e777197ed934\",\"license\":\"MIT\"},\"erc721a-upgradeable/contracts/ERC721AUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nerror ApprovalCallerNotOwnerNorApproved();\\nerror ApprovalQueryForNonexistentToken();\\nerror ApproveToCaller();\\nerror ApprovalToCurrentOwner();\\nerror BalanceQueryForZeroAddress();\\nerror MintToZeroAddress();\\nerror MintZeroQuantity();\\nerror OwnerQueryForNonexistentToken();\\nerror TransferCallerNotOwnerNorApproved();\\nerror TransferFromIncorrectOwner();\\nerror TransferToNonERC721ReceiverImplementer();\\nerror TransferToZeroAddress();\\nerror URIQueryForNonexistentToken();\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension. Built to optimize for lower gas during batch mints.\\n *\\n * Assumes serials are sequentially minted starting at _startTokenId() (defaults to 0, e.g. 0, 1, 2, 3..).\\n *\\n * Assumes that an owner cannot have more than 2**64 - 1 (max value of uint64) of supply.\\n *\\n * Assumes that the maximum token id cannot exceed 2**256 - 1 (max value of uint256).\\n */\\ncontract ERC721AUpgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {\\n    using AddressUpgradeable for address;\\n    using StringsUpgradeable for uint256;\\n\\n    // Compiler will pack this into a single 256bit word.\\n    struct TokenOwnership {\\n        // The address of the owner.\\n        address addr;\\n        // Keeps track of the start time of ownership with minimal overhead for tokenomics.\\n        uint64 startTimestamp;\\n        // Whether the token has been burned.\\n        bool burned;\\n    }\\n\\n    // Compiler will pack this into a single 256bit word.\\n    struct AddressData {\\n        // Realistically, 2**64-1 is more than enough.\\n        uint64 balance;\\n        // Keeps track of mint count with minimal overhead for tokenomics.\\n        uint64 numberMinted;\\n        // Keeps track of burn count with minimal overhead for tokenomics.\\n        uint64 numberBurned;\\n        // For miscellaneous variable(s) pertaining to the address\\n        // (e.g. number of whitelist mint slots used).\\n        // If there are multiple variables, please pack them into a uint64.\\n        uint64 aux;\\n    }\\n\\n    // The tokenId of the next token to be minted.\\n    uint256 internal _currentIndex;\\n\\n    // The number of tokens burned.\\n    uint256 internal _burnCounter;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to ownership details\\n    // An empty struct value does not necessarily mean the token is unowned. See _ownershipOf implementation for details.\\n    mapping(uint256 => TokenOwnership) internal _ownerships;\\n\\n    // Mapping owner address to address data\\n    mapping(address => AddressData) private _addressData;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    function __ERC721A_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC721A_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC721A_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _currentIndex = _startTokenId();\\n    }\\n\\n    /**\\n     * To change the starting tokenId, please override this function.\\n     */\\n    function _startTokenId() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev Burned tokens are calculated here, use _totalMinted() if you want to count just minted tokens.\\n     */\\n    function totalSupply() public view returns (uint256) {\\n        // Counter underflow is impossible as _burnCounter cannot be incremented\\n        // more than _currentIndex - _startTokenId() times\\n        unchecked {\\n            return _currentIndex - _burnCounter - _startTokenId();\\n        }\\n    }\\n\\n    /**\\n     * Returns the total amount of tokens minted in the contract.\\n     */\\n    function _totalMinted() internal view returns (uint256) {\\n        // Counter underflow is impossible as _currentIndex does not decrement,\\n        // and it is initialized to _startTokenId()\\n        unchecked {\\n            return _currentIndex - _startTokenId();\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view override returns (uint256) {\\n        if (owner == address(0)) revert BalanceQueryForZeroAddress();\\n        return uint256(_addressData[owner].balance);\\n    }\\n\\n    /**\\n     * Returns the number of tokens minted by `owner`.\\n     */\\n    function _numberMinted(address owner) internal view returns (uint256) {\\n        return uint256(_addressData[owner].numberMinted);\\n    }\\n\\n    /**\\n     * Returns the number of tokens burned by or on behalf of `owner`.\\n     */\\n    function _numberBurned(address owner) internal view returns (uint256) {\\n        return uint256(_addressData[owner].numberBurned);\\n    }\\n\\n    /**\\n     * Returns the auxillary data for `owner`. (e.g. number of whitelist mint slots used).\\n     */\\n    function _getAux(address owner) internal view returns (uint64) {\\n        return _addressData[owner].aux;\\n    }\\n\\n    /**\\n     * Sets the auxillary data for `owner`. (e.g. number of whitelist mint slots used).\\n     * If there are multiple variables, please pack them into a uint64.\\n     */\\n    function _setAux(address owner, uint64 aux) internal {\\n        _addressData[owner].aux = aux;\\n    }\\n\\n    /**\\n     * Gas spent here starts off proportional to the maximum mint batch size.\\n     * It gradually moves to O(1) as tokens get transferred around in the collection over time.\\n     */\\n    function _ownershipOf(uint256 tokenId) internal view returns (TokenOwnership memory) {\\n        uint256 curr = tokenId;\\n\\n        unchecked {\\n            if (_startTokenId() <= curr && curr < _currentIndex) {\\n                TokenOwnership memory ownership = _ownerships[curr];\\n                if (!ownership.burned) {\\n                    if (ownership.addr != address(0)) {\\n                        return ownership;\\n                    }\\n                    // Invariant:\\n                    // There will always be an ownership that has an address and is not burned\\n                    // before an ownership that does not have an address and is not burned.\\n                    // Hence, curr will not underflow.\\n                    while (true) {\\n                        curr--;\\n                        ownership = _ownerships[curr];\\n                        if (ownership.addr != address(0)) {\\n                            return ownership;\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n        revert OwnerQueryForNonexistentToken();\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view override returns (address) {\\n        return _ownershipOf(tokenId).addr;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        if (!_exists(tokenId)) revert URIQueryForNonexistentToken();\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : '';\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return '';\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public override {\\n        address owner = ERC721AUpgradeable.ownerOf(tokenId);\\n        if (to == owner) revert ApprovalToCurrentOwner();\\n\\n        if (_msgSender() != owner && !isApprovedForAll(owner, _msgSender())) {\\n            revert ApprovalCallerNotOwnerNorApproved();\\n        }\\n\\n        _approve(to, tokenId, owner);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view override returns (address) {\\n        if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        if (operator == _msgSender()) revert ApproveToCaller();\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, '');\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        _transfer(from, to, tokenId);\\n        if (to.isContract() && !_checkContractOnERC721Received(from, to, tokenId, _data)) {\\n            revert TransferToNonERC721ReceiverImplementer();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     */\\n    function _exists(uint256 tokenId) internal view returns (bool) {\\n        return _startTokenId() <= tokenId && tokenId < _currentIndex && !_ownerships[tokenId].burned;\\n    }\\n\\n    function _safeMint(address to, uint256 quantity) internal {\\n        _safeMint(to, quantity, '');\\n    }\\n\\n    /**\\n     * @dev Safely mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called for each safe transfer.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 quantity,\\n        bytes memory _data\\n    ) internal {\\n        _mint(to, quantity, _data, true);\\n    }\\n\\n    /**\\n     * @dev Mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 quantity,\\n        bytes memory _data,\\n        bool safe\\n    ) internal {\\n        uint256 startTokenId = _currentIndex;\\n        if (to == address(0)) revert MintToZeroAddress();\\n        if (quantity == 0) revert MintZeroQuantity();\\n\\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\\n\\n        // Overflows are incredibly unrealistic.\\n        // balance or numberMinted overflow if current value of either + quantity > 1.8e19 (2**64) - 1\\n        // updatedIndex overflows if _currentIndex + quantity > 1.2e77 (2**256) - 1\\n        unchecked {\\n            _addressData[to].balance += uint64(quantity);\\n            _addressData[to].numberMinted += uint64(quantity);\\n\\n            _ownerships[startTokenId].addr = to;\\n            _ownerships[startTokenId].startTimestamp = uint64(block.timestamp);\\n\\n            uint256 updatedIndex = startTokenId;\\n            uint256 end = updatedIndex + quantity;\\n\\n            if (safe && to.isContract()) {\\n                do {\\n                    emit Transfer(address(0), to, updatedIndex);\\n                    if (!_checkContractOnERC721Received(address(0), to, updatedIndex++, _data)) {\\n                        revert TransferToNonERC721ReceiverImplementer();\\n                    }\\n                } while (updatedIndex != end);\\n                // Reentrancy protection\\n                if (_currentIndex != startTokenId) revert();\\n            } else {\\n                do {\\n                    emit Transfer(address(0), to, updatedIndex++);\\n                } while (updatedIndex != end);\\n            }\\n            _currentIndex = updatedIndex;\\n        }\\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) private {\\n        TokenOwnership memory prevOwnership = _ownershipOf(tokenId);\\n\\n        if (prevOwnership.addr != from) revert TransferFromIncorrectOwner();\\n\\n        bool isApprovedOrOwner = (_msgSender() == from ||\\n            isApprovedForAll(from, _msgSender()) ||\\n            getApproved(tokenId) == _msgSender());\\n\\n        if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();\\n        if (to == address(0)) revert TransferToZeroAddress();\\n\\n        _beforeTokenTransfers(from, to, tokenId, 1);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId, from);\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        // Counter overflow is incredibly unrealistic as tokenId would have to be 2**256.\\n        unchecked {\\n            _addressData[from].balance -= 1;\\n            _addressData[to].balance += 1;\\n\\n            TokenOwnership storage currSlot = _ownerships[tokenId];\\n            currSlot.addr = to;\\n            currSlot.startTimestamp = uint64(block.timestamp);\\n\\n            // If the ownership slot of tokenId+1 is not explicitly set, that means the transfer initiator owns it.\\n            // Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\\n            uint256 nextTokenId = tokenId + 1;\\n            TokenOwnership storage nextSlot = _ownerships[nextTokenId];\\n            if (nextSlot.addr == address(0)) {\\n                // This will suffice for checking _exists(nextTokenId),\\n                // as a burned slot cannot contain the zero address.\\n                if (nextTokenId != _currentIndex) {\\n                    nextSlot.addr = from;\\n                    nextSlot.startTimestamp = prevOwnership.startTimestamp;\\n                }\\n            }\\n        }\\n\\n        emit Transfer(from, to, tokenId);\\n        _afterTokenTransfers(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev This is equivalent to _burn(tokenId, false)\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        _burn(tokenId, false);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId, bool approvalCheck) internal virtual {\\n        TokenOwnership memory prevOwnership = _ownershipOf(tokenId);\\n\\n        address from = prevOwnership.addr;\\n\\n        if (approvalCheck) {\\n            bool isApprovedOrOwner = (_msgSender() == from ||\\n                isApprovedForAll(from, _msgSender()) ||\\n                getApproved(tokenId) == _msgSender());\\n\\n            if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();\\n        }\\n\\n        _beforeTokenTransfers(from, address(0), tokenId, 1);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId, from);\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        // Counter overflow is incredibly unrealistic as tokenId would have to be 2**256.\\n        unchecked {\\n            AddressData storage addressData = _addressData[from];\\n            addressData.balance -= 1;\\n            addressData.numberBurned += 1;\\n\\n            // Keep track of who burned the token, and the timestamp of burning.\\n            TokenOwnership storage currSlot = _ownerships[tokenId];\\n            currSlot.addr = from;\\n            currSlot.startTimestamp = uint64(block.timestamp);\\n            currSlot.burned = true;\\n\\n            // If the ownership slot of tokenId+1 is not explicitly set, that means the burn initiator owns it.\\n            // Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\\n            uint256 nextTokenId = tokenId + 1;\\n            TokenOwnership storage nextSlot = _ownerships[nextTokenId];\\n            if (nextSlot.addr == address(0)) {\\n                // This will suffice for checking _exists(nextTokenId),\\n                // as a burned slot cannot contain the zero address.\\n                if (nextTokenId != _currentIndex) {\\n                    nextSlot.addr = from;\\n                    nextSlot.startTimestamp = prevOwnership.startTimestamp;\\n                }\\n            }\\n        }\\n\\n        emit Transfer(from, address(0), tokenId);\\n        _afterTokenTransfers(from, address(0), tokenId, 1);\\n\\n        // Overflow not possible, as _burnCounter cannot be exceed _currentIndex times.\\n        unchecked {\\n            _burnCounter++;\\n        }\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(\\n        address to,\\n        uint256 tokenId,\\n        address owner\\n    ) private {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(owner, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkContractOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n            return retval == IERC721ReceiverUpgradeable(to).onERC721Received.selector;\\n        } catch (bytes memory reason) {\\n            if (reason.length == 0) {\\n                revert TransferToNonERC721ReceiverImplementer();\\n            } else {\\n                assembly {\\n                    revert(add(32, reason), mload(reason))\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before a set of serially-ordered token ids are about to be transferred. This includes minting.\\n     * And also called before burning one token.\\n     *\\n     * startTokenId - the first token id to be transferred\\n     * quantity - the amount to be transferred\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, `tokenId` will be burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _beforeTokenTransfers(\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after a set of serially-ordered token ids have been transferred. This includes\\n     * minting.\\n     * And also called after one token has been burned.\\n     *\\n     * startTokenId - the first token id to be transferred\\n     * quantity - the amount to be transferred\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` has been\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` has been minted for `to`.\\n     * - When `to` is zero, `tokenId` has been burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _afterTokenTransfers(\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[42] private __gap;\\n}\\n\",\"keccak256\":\"0x261da8ec505b55cf307604eefd0f0e6e374860ca4730efad50b87e43f7660b66\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506152af806100206000396000f3fe6080604052600436106104c05760003560e01c8063715018a611610276578063c180526a1161014f578063e30c3978116100c1578063f35e231c11610085578063f35e231c14610ee1578063f51f96dd14610f01578063f9dca98914610f18578063fb1bb9de14610f2d578063fbe1aa5114610f61578063fe2c7fee14610f7857600080fd5b8063e30c397814610e06578063e4b26d8414610e24578063e63ab1e914610e44578063e985e9c514610e78578063ecbbfea314610ec157600080fd5b8063ca15c87311610113578063ca15c87314610d4b578063d3486d5b14610d6b578063d547741f14610d99578063d62b630314610db9578063d9a6f70514610dd0578063dc33e68114610de657600080fd5b8063c180526a14610cca578063c42069ec14610cdd578063c5482fe314610cfd578063c792e16714610d14578063c87b56dd14610d2b57600080fd5b8063984b67d6116101e8578063a7cd52cb116101ac578063a7cd52cb14610c07578063aec3922b14610c35578063b05863d514610c55578063b3ab66b014610c75578063b88d4fde14610c88578063be62da0e14610ca857600080fd5b8063984b67d614610b72578063995b94f214610b92578063a1ef0e5414610bb2578063a217fddf14610bd2578063a22cb46514610be757600080fd5b80639010d07c1161023a5780639010d07c14610a9957806390967a5214610ab957806391d1485414610ad05780639231ab2a14610af057806395d89b4114610b46578063963331d814610b5b57600080fd5b8063715018a614610a275780638456cb5914610a3c5780638ad433ac14610a515780638bc35c2f14610a645780638da5cb5b14610a7b57600080fd5b8063375a069a116103a85780635c975abb1161031a5780636bb7b1d9116102de5780636bb7b1d9146109725780636c0360eb146109895780636d5d40c61461099e5780637035bf18146109be57806370a08231146109d357806370a95250146109f357600080fd5b80635c975abb146108f9578063622f1c471461091157806362f4fb2d146109265780636352211e1461093d57806367ab8a4e1461095d57600080fd5b806345afb0021161036c57806345afb0021461085357806345c0f5331461087357806355f804b31461088a57806359d7bc4d146108aa5780635bb21376146108c15780635c7034af146108e257600080fd5b8063375a069a146107d05780633ba8671f146107f05780633cc4cadb146108075780633f4ba83a1461081e57806342842e0e1461083357600080fd5b80631c0310a51161044157806325a004731161040557806325a00473146106ef5780632913daa0146107235780632a55205a1461073a5780632e8f1f50146107795780632f2ff15d1461079057806336568abe146107b057600080fd5b80631c0310a5146106475780631e4d185f1461066757806321cc16111461067e57806323b872dd1461069f578063248a9ca3146106bf57600080fd5b806306fdde031161048857806306fdde031461058a578063081812fc146105ac578063095ea7b3146105e45780630c2c39a31461060457806318160ddd1461062457600080fd5b806301ffc9a7146104c557806302fa7c47146104fa57806303851c281461051c57806303b674d314610548578063055ad42e14610568575b600080fd5b3480156104d157600080fd5b506104e56104e0366004614cb6565b610f98565b60405190151581526020015b60405180910390f35b34801561050657600080fd5b5061051a610515366004614b6a565b610fc3565b005b34801561052857600080fd5b5061053161106f565b6040805192151583526020830191909152016104f1565b34801561055457600080fd5b5061051a610563366004614c58565b611131565b34801561057457600080fd5b5061057d611202565b6040516104f19190614f73565b34801561059657600080fd5b5061059f6112c3565b6040516104f19190614f81565b3480156105b857600080fd5b506105cc6105c7366004614c58565b611355565b6040516001600160a01b0390911681526020016104f1565b3480156105f057600080fd5b5061051a6105ff366004614b40565b611399565b34801561061057600080fd5b5061051a61061f366004614c58565b611427565b34801561063057600080fd5b50606654606554035b6040519081526020016104f1565b34801561065357600080fd5b5061051a610662366004614a04565b6114a9565b34801561067357600080fd5b506106396101a75481565b34801561068a57600080fd5b50610193546105cc906001600160a01b031681565b3480156106ab57600080fd5b5061051a6106ba366004614a52565b61173e565b3480156106cb57600080fd5b506106396106da366004614c58565b60009081526099602052604090206001015490565b3480156106fb57600080fd5b506106397fe0e65c783ac33ff1c5ccf4399c9185066773921d6f8d050bf80781603021f09781565b34801561072f57600080fd5b506106396101975481565b34801561074657600080fd5b5061075a610755366004614c94565b611749565b604080516001600160a01b0390931683526020830191909152016104f1565b34801561078557600080fd5b506106396101a05481565b34801561079c57600080fd5b5061051a6107ab366004614c71565b6117f9565b3480156107bc57600080fd5b5061051a6107cb366004614c71565b611883565b3480156107dc57600080fd5b5061051a6107eb366004614c58565b6118ac565b3480156107fc57600080fd5b506106396101a15481565b34801561081357600080fd5b506106396101a25481565b34801561082a57600080fd5b5061051a611a7a565b34801561083f57600080fd5b5061051a61084e366004614a52565b611b2a565b34801561085f57600080fd5b5061051a61086e366004614c58565b611b45565b34801561087f57600080fd5b506106396101945481565b34801561089657600080fd5b5061051a6108a5366004614cf0565b611bd3565b3480156108b657600080fd5b506106396101a55481565b3480156108cd57600080fd5b5061019a546105cc906001600160a01b031681565b3480156108ee57600080fd5b5061063961019f5481565b34801561090557600080fd5b5060fd5460ff166104e5565b34801561091d57600080fd5b5061051a611c49565b34801561093257600080fd5b506106396101a45481565b34801561094957600080fd5b506105cc610958366004614c58565b611d73565b34801561096957600080fd5b5061051a611d85565b34801561097e57600080fd5b506106396101a65481565b34801561099557600080fd5b5061059f611de3565b3480156109aa57600080fd5b5061051a6109b9366004614c58565b611e72565b3480156109ca57600080fd5b5061059f611f3c565b3480156109df57600080fd5b506106396109ee366004614a04565b611f4a565b3480156109ff57600080fd5b506106397fe516f7ac9747f401e208331379a0bafe3c9c4dbb6501fd23bcef278f7ebaf4e581565b348015610a3357600080fd5b5061051a611f98565b348015610a4857600080fd5b5061051a611fcd565b61051a610a5f366004614c58565b61207b565b348015610a7057600080fd5b506106396101985481565b348015610a8757600080fd5b506097546001600160a01b03166105cc565b348015610aa557600080fd5b506105cc610ab4366004614c94565b6120e1565b348015610ac557600080fd5b506106396101ab5481565b348015610adc57600080fd5b506104e5610aeb366004614c71565b612100565b348015610afc57600080fd5b50610b10610b0b366004614c58565b61212b565b6040805182516001600160a01b031681526020808401516001600160401b031690820152918101511515908201526060016104f1565b348015610b5257600080fd5b5061059f612151565b348015610b6757600080fd5b506106396101a35481565b348015610b7e57600080fd5b5061051a610b8d366004614c58565b612160565b348015610b9e57600080fd5b5061051a610bad366004614d61565b612227565b348015610bbe57600080fd5b5061051a610bcd366004614c58565b6122f8565b348015610bde57600080fd5b50610639600081565b348015610bf357600080fd5b5061051a610c02366004614b09565b61239e565b348015610c1357600080fd5b50610639610c22366004614a04565b61019d6020526000908152604090205481565b348015610c4157600080fd5b50610639610c50366004614a04565b612434565b348015610c6157600080fd5b5061051a610c70366004614ba2565b612473565b61051a610c83366004614c58565b61256c565b348015610c9457600080fd5b5061051a610ca3366004614a8e565b6126fe565b348015610cb457600080fd5b5061063960008051602061525a83398151915281565b61051a610cd8366004614c58565b612749565b348015610ce957600080fd5b5061051a610cf8366004614a04565b6128f3565b348015610d0957600080fd5b506106396101995481565b348015610d2057600080fd5b506106396101a85481565b348015610d3757600080fd5b5061059f610d46366004614c58565b612978565b348015610d5757600080fd5b50610639610d66366004614c58565b612b69565b348015610d7757600080fd5b50610639610d86366004614a04565b61019e6020526000908152604090205481565b348015610da557600080fd5b5061051a610db4366004614c71565b612b80565b348015610dc557600080fd5b506106396101965481565b348015610ddc57600080fd5b5061063961271081565b348015610df257600080fd5b50610639610e01366004614a04565b612c04565b348015610e1257600080fd5b506098546001600160a01b03166105cc565b348015610e3057600080fd5b5061051a610e3f366004614a04565b612c32565b348015610e5057600080fd5b506106397f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a81565b348015610e8457600080fd5b506104e5610e93366004614a1f565b6001600160a01b039182166000908152606c6020908152604080832093909416825291909152205460ff1690565b348015610ecd57600080fd5b5061051a610edc366004614c71565b612c80565b348015610eed57600080fd5b5061051a610efc366004614e22565b612d7c565b348015610f0d57600080fd5b506106396101ac5481565b348015610f2457600080fd5b5061051a612f09565b348015610f3957600080fd5b506106397f427da25fe773164f88948d3e215c94b6554e2ed5e5f203a821c9f2f6131cf75a81565b348015610f6d57600080fd5b506106396101955481565b348015610f8457600080fd5b5061051a610f93366004614cf0565b612f48565b60006001600160e01b03198216633502dbf760e11b1480610fbd5750610fbd82612fb2565b92915050565b6097546001600160a01b03163314610fee57604051630202a8bf60e61b815260040160405180910390fd5b6109c4816001600160601b0316111561101a576040516306f644f160e31b815260040160405180910390fd5b6110248282613013565b6040516001600160601b03821681526001600160a01b038316907fd85b7816dca44c313f0fdadd9567f99f3620a2fac7c21a8a7872e1ac4d10fe559060200160405180910390a25050565b6101935460009081906001600160a01b031661108e5750600091829150565b610193546001600160a01b031663ad9e22af306110ae6066546065540390565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401604080518083038186803b1580156110f157600080fd5b505afa158015611105573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111299190614c2a565b915091509091565b6097546001600160a01b0316331461115c57604051630202a8bf60e61b815260040160405180910390fd5b6101a55461117d576040516356a4234d60e11b815260040160405180910390fd5b6101a4548110156111a1576040516312d3f13560e01b815260040160405180910390fd5b806101a65410156111c5576040516335bcfe2b60e21b815260040160405180910390fd5b6101a58190556040518181527f9bcdfa29202b48178635d9cf5c57896f671198685cf6b8ddb5e20f3eb4bb1e60906020015b60405180910390a150565b60006101a4546000148061121757506101a554155b8061122357506101a654155b8061122f57506101a754155b8061123c57506101a45442105b156112475750600090565b61019454606654606554031061125d5750600590565b6101a454421015801561127257506101a55442105b1561127d5750600290565b6101a554421015801561129257506101a65442105b1561129d5750600390565b6101a65442101580156112b257506101a75442105b156112bd5750600490565b50600590565b6060606780546112d290615147565b80601f01602080910402602001604051908101604052809291908181526020018280546112fe90615147565b801561134b5780601f106113205761010080835404028352916020019161134b565b820191906000526020600020905b81548152906001019060200180831161132e57829003601f168201915b5050505050905090565b600061136082613111565b61137d576040516333d1c03960e21b815260040160405180910390fd5b506000908152606b60205260409020546001600160a01b031690565b60006113a482611d73565b9050806001600160a01b0316836001600160a01b031614156113d95760405163250fdee360e21b815260040160405180910390fd5b336001600160a01b038216148015906113f957506113f78133610e93565b155b15611417576040516367d9dca160e11b815260040160405180910390fd5b61142283838361313d565b505050565b6097546001600160a01b0316331461145257604051630202a8bf60e61b815260040160405180910390fd5b4281101561147357604051639db169d760e01b815260040160405180910390fd5b6101a88190556040518181527f90513fea331bb55e4ca73a8d0c053a255347ccb17c621338052705ea997383b3906020016111f7565b60008051602061525a8339815191526114ca6097546001600160a01b031690565b6001600160a01b0316336001600160a01b0316141580156114f257506114f08133612100565b155b1561151e5760405163f9019a8d60e01b8152600481018290523360248201526044015b60405180910390fd5b600261012f5414156115725760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401611515565b600261012f5560fd5460ff161561159b5760405162461bcd60e51b815260040161151590615019565b426101a85411806115ad57506101a854155b156115cb57604051633bd1a57d60e11b815260040160405180910390fd5b61019954479060009081901561167b5761271061019954846115ed91906150e5565b6115f791906150d1565b91506116038284615104565b61019a546040519194506001600160a01b0316908390600081818185875af1925050503d8060008114611652576040519150601f19603f3d011682016040523d82523d6000602084013e611657565b606091505b5050809150508061167b57604051633aa9e60d60e21b815260040160405180910390fd5b6040516001600160a01b038616908490600081818185875af1925050503d80600081146116c4576040519150601f19603f3d011682016040523d82523d6000602084013e6116c9565b606091505b505080915050806116ed57604051633aa9e60d60e21b815260040160405180910390fd5b60408051848152602081018490526001600160a01b038716917f12eb5d7ccd4ce398edc94007dfbaa22fa2ac8775a3633530f36053ad765262f4910160405180910390a25050600161012f55505050565b611422838383613199565b6000828152610162602090815260408083208151808301909252546001600160a01b038116808352600160a01b9091046001600160601b03169282019290925282916117c0575060408051808201909152610161546001600160a01b0381168252600160a01b90046001600160601b031660208201525b6020810151600090612710906117df906001600160601b0316876150e5565b6117e991906150d1565b91519350909150505b9250929050565b81806118185760405163e466584960e01b815260040160405180910390fd5b6000838152609960205260409020600101546097546001600160a01b0316331480159061184c575061184a8133612100565b155b156118735760405163f9019a8d60e01b815260048101829052336024820152604401611515565b61187d8484613387565b50505050565b81806118a25760405163e466584960e01b815260040160405180910390fd5b61142283836133a9565b60008051602061525a8339815191526118cd6097546001600160a01b031690565b6001600160a01b0316336001600160a01b0316141580156118f557506118f38133612100565b155b1561191c5760405163f9019a8d60e01b815260048101829052336024820152604401611515565b60fd5460ff161561193f5760405162461bcd60e51b815260040161151590615019565b610194548261194c613423565b61195691906150b9565b111561197557604051631eddc6a360e11b815260040160405180910390fd5b610195548261019f5461198891906150b9565b11156119a75760405163011310dd60e31b815260040160405180910390fd5b8161019f546119b691906150b9565b61019f55610197546000906119cb90846150d1565b905060005b81811015611a09576119f73361019754604051806020016040528060008152506000613453565b80611a0181615182565b9150506119d0565b5060006101975484611a1b919061519d565b90508015611a3f57611a3f3382604051806020016040528060008152506000613453565b60405184815233907f7d8400f0e58ae2e14f85b63f3afb0ca5b29328d8f48046b205fc7f174cf9b5ed9060200160405180910390a250505050565b7f427da25fe773164f88948d3e215c94b6554e2ed5e5f203a821c9f2f6131cf75a611aad6097546001600160a01b031690565b6001600160a01b0316336001600160a01b031614158015611ad55750611ad38133612100565b155b15611afc5760405163f9019a8d60e01b815260048101829052336024820152604401611515565b60fd5460ff16611b1f57604051637514f14160e11b815260040160405180910390fd5b611b2761361e565b50565b611422838383604051806020016040528060008152506126fe565b60fd5460ff1615611b685760405162461bcd60e51b815260040161151590615019565b6000611b72611202565b90506003816005811115611b8857611b886151dd565b14158015611ba857506004816005811115611ba557611ba56151dd565b14155b15611bc6576040516338df794b60e01b815260040160405180910390fd5b611bcf826136b1565b5050565b6097546001600160a01b03163314611bfe57604051630202a8bf60e61b815260040160405180910390fd5b611c0b61019b8383614807565b507ff9c7803e94e0d3c02900d8a90893a6d5e90dd04d32a4cfe825520f82bf9f32f661019b604051611c3d9190614f94565b60405180910390a15050565b323314611c6957604051633059e46160e21b815260040160405180910390fd5b60fd5460ff1615611c8c5760405162461bcd60e51b815260040161151590615019565b610193546001600160a01b0316611cb65760405163114d098b60e31b815260040160405180910390fd5b610193546001600160a01b031663fbbc872b30611cd66066546065540390565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b158015611d1c57600080fd5b505af1158015611d30573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d549190614c0d565b611d715760405163fc58cf3f60e01b815260040160405180910390fd5b565b6000611d7e826138f5565b5192915050565b6097546001600160a01b03163314611db057604051630202a8bf60e61b815260040160405180910390fd5b6098546001600160a01b0316611dd95760405163128be5bf60e31b815260040160405180910390fd5b611d716000613a0f565b61019b8054611df190615147565b80601f0160208091040260200160405190810160405280929190818152602001828054611e1d90615147565b8015611e6a5780601f10611e3f57610100808354040283529160200191611e6a565b820191906000526020600020905b815481529060010190602001808311611e4d57829003601f168201915b505050505081565b6097546001600160a01b03163314611e9d57604051630202a8bf60e61b815260040160405180910390fd5b6101a654611ebe576040516356a4234d60e11b815260040160405180910390fd5b6101a554811015611ee2576040516335bcfe2b60e21b815260040160405180910390fd5b806101a7541015611f0657604051631e3804ab60e21b815260040160405180910390fd5b6101a68190556040518181527f4fe26bfd1cf59c4428b13357bea5ab8239f9889b3f94cd575f98b4c6811dcdc5906020016111f7565b61019c8054611df190615147565b60006001600160a01b038216611f73576040516323d3ad8160e21b815260040160405180910390fd5b506001600160a01b03166000908152606a60205260409020546001600160401b031690565b6097546001600160a01b03163314611fc357604051630202a8bf60e61b815260040160405180910390fd5b611d716000613a59565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a6120006097546001600160a01b031690565b6001600160a01b0316336001600160a01b03161415801561202857506120268133612100565b155b1561204f5760405163f9019a8d60e01b815260048101829052336024820152604401611515565b60fd5460ff1615612073576040516329c0c03160e11b815260040160405180910390fd5b611b27613a98565b60fd5460ff161561209e5760405162461bcd60e51b815260040161151590615019565b6002806120a9611202565b60058111156120ba576120ba6151dd565b146120d8576040516338df794b60e01b815260040160405180910390fd5b611bcf82613af0565b600082815260cb602052604081206120f99083613cd7565b9392505050565b60009182526099602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6040805160608101825260008082526020820181905291810191909152610fbd826138f5565b6060606880546112d290615147565b6097546001600160a01b0316331461218b57604051630202a8bf60e61b815260040160405180910390fd5b6101a4546121ac576040516356a4234d60e11b815260040160405180910390fd5b428110156121cd57604051639db169d760e01b815260040160405180910390fd5b806101a55410156121f1576040516312d3f13560e01b815260040160405180910390fd5b6101a48190556040518181527f9776e1b1502b2f97161fccc0d9f830da6ad81a796cf67c136801fd59dd0444cd906020016111f7565b600054610100900460ff166122425760005460ff1615612246565b303b155b6122a95760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401611515565b600054610100900460ff161580156122cb576000805461ffff19166101011790555b6122db8989898989898989613ce3565b80156122ed576000805461ff00191690555b505050505050505050565b6097546001600160a01b0316331461232357604051630202a8bf60e61b815260040160405180910390fd5b6101a754612344576040516356a4234d60e11b815260040160405180910390fd5b6101a65481101561236857604051631e3804ab60e21b815260040160405180910390fd5b6101a78190556040518181527fdb76c49adfe8600a5db82e1d85e7c1f7565676dac577c6a39744e9c95ad68e3c906020016111f7565b6001600160a01b0382163314156123c85760405163b06307db60e01b815260040160405180910390fd5b336000818152606c602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b6001600160a01b038116600090815261019e6020908152604080832054606a909252822054600160401b90046001600160401b0316610fbd91906150b9565b6097546001600160a01b0316331461249e57604051630202a8bf60e61b815260040160405180910390fd5b828181146124bf57604051638d62a9d560e01b815260040160405180910390fd5b60005b8181101561253b578383828181106124dc576124dc615209565b9050602002013561019d60008888858181106124fa576124fa615209565b905060200201602081019061250f9190614a04565b6001600160a01b031681526020810191909152604001600020558061253381615182565b9150506124c2565b506040517f0df27beb8d16f5e61d125286ba69a986a702ac83921bb1864629ca5e662e84d490600090a15050505050565b32331461258c57604051633059e46160e21b815260040160405180910390fd5b60fd5460ff16156125af5760405162461bcd60e51b815260040161151590615019565b6004806125ba611202565b60058111156125cb576125cb6151dd565b146125e9576040516338df794b60e01b815260040160405180910390fd5b61019854826125f733612434565b61260191906150b9565b1115612620576040516335e62b7b60e21b815260040160405180910390fd5b610194548261262d613423565b61263791906150b9565b111561265657604051631eddc6a360e11b815260040160405180910390fd5b6000826101ac5461266791906150e5565b90506126853384604051806020016040528060008152506000613453565b826101a3600082825461269891906150b9565b90915550506101ac5433907fbb20f716bd7ca9427b818f6de485952ab3a5acec2559fb794e3f9a4d9f70e722908590816126d160655490565b6126db9190615104565b60046040516126ed949392919061508e565b60405180910390a261142281613df0565b612709848484613199565b6001600160a01b0383163b1515801561272b575061272984848484613e8b565b155b1561187d576040516368d2bf6b60e11b815260040160405180910390fd5b60fd5460ff161561276c5760405162461bcd60e51b815260040161151590615019565b600380612777611202565b6005811115612788576127886151dd565b146127a6576040516338df794b60e01b815260040160405180910390fd5b33600090815261019d60205260409020548211156127d7576040516390e50aa560e01b815260040160405180910390fd5b61019454826127e4613423565b6127ee91906150b9565b1180612818575061019654826101a2546101a05461280c91906150b9565b61281691906150b9565b115b1561283657604051631eddc6a360e11b815260040160405180910390fd5b33600090815261019d602052604081208054849290612856908490615104565b90915550506101ab5460009061286d9084906150e5565b905061288b3384604051806020016040528060008152506000613453565b826101a2600082825461289e91906150b9565b90915550506101ab5433907fbb20f716bd7ca9427b818f6de485952ab3a5acec2559fb794e3f9a4d9f70e722908590816128d760655490565b6128e19190615104565b60036040516126ed949392919061508e565b6097546001600160a01b0316331461291e57604051630202a8bf60e61b815260040160405180910390fd5b6001600160a01b038116612945576040516386850cc360e01b815260040160405180910390fd5b6098546001600160a01b03161561296f5760405163033c108960e01b815260040160405180910390fd5b611b2781613a0f565b610193546060906001600160a01b03166129bf5761019b61299883613f83565b6040516020016129a9929190614eb3565b6040516020818303038152906040529050919050565b61019354604051635e1578db60e11b81523060048201526001600160a01b039091169063bc2af1b69060240160206040518083038186803b158015612a0357600080fd5b505afa158015612a17573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a3b9190614e09565b8210612ad45761019c8054612a4f90615147565b80601f0160208091040260200160405190810160405280929190818152602001828054612a7b90615147565b8015612ac85780601f10612a9d57610100808354040283529160200191612ac8565b820191906000526020600020905b815481529060010190602001808311612aab57829003601f168201915b50505050509050919050565b61019354604051631f4b3c0160e11b81523060048201526024810184905261019b91612998916001600160a01b0390911690633e9678029060440160206040518083038186803b158015612b2757600080fd5b505afa158015612b3b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b5f9190614e09565b613f83565b919050565b600081815260cb60205260408120610fbd90614080565b8180612b9f5760405163e466584960e01b815260040160405180910390fd5b6000838152609960205260409020600101546097546001600160a01b03163314801590612bd35750612bd18133612100565b155b15612bfa5760405163f9019a8d60e01b815260048101829052336024820152604401611515565b61187d848461408a565b6001600160a01b0381166000908152606a6020526040812054600160401b90046001600160401b0316610fbd565b6097546001600160a01b03163314612c5d57604051630202a8bf60e61b815260040160405180910390fd5b61019380546001600160a01b0319166001600160a01b0392909216919091179055565b6097546001600160a01b03163314612cab57604051630202a8bf60e61b815260040160405180910390fd5b61019a546001600160a01b031615612cd6576040516345db6e6960e11b815260040160405180910390fd5b612710821115612cf9576040516346b7d95d60e11b815260040160405180910390fd5b6001600160a01b038116612d2057604051631a1b629760e21b815260040160405180910390fd5b61019982905561019a80546001600160a01b0319166001600160a01b0383169081179091556040805184815260208101929092527fd7d086964f00d2604a80288c460231fe9cfc8e9605e838d49017401111f63adb9101611c3d565b6097546001600160a01b03163314612da757604051630202a8bf60e61b815260040160405180910390fd5b600080612db2611202565b6005811115612dc357612dc36151dd565b14612de1576040516338df794b60e01b815260040160405180910390fd5b42871015612e0257604051639db169d760e01b815260040160405180910390fd5b86861015612e23576040516312d3f13560e01b815260040160405180910390fd5b85851015612e44576040516335bcfe2b60e21b815260040160405180910390fd5b84841015612e6557604051631e3804ab60e21b815260040160405180910390fd5b81831115612e8657604051631da61f9760e11b815260040160405180910390fd5b6101ac8290556101ab8390556101a48790556101a58690556101a68590556101a78490556040805188815260208101889052908101869052606081018590526080810184905260a081018390527f880fa85ac6969827fc8f6a2a8b236fc9789ece8c82b41b17d0865b747de1b9139060c00160405180910390a150505050505050565b6098546001600160a01b031633141580612f21575033155b15612f3f5760405163134aa98760e31b815260040160405180910390fd5b611d7133613a59565b6097546001600160a01b03163314612f7357604051630202a8bf60e61b815260040160405180910390fd5b612f8061019c8383614807565b507f4012c6d278d4b460acbc560e9fa4425e187c3b40c848b8dfa248139729efee4361019c604051611c3d9190614f94565b60006001600160e01b0319821663d5b7d1ad60e01b1480612fd75750612fd7826140ac565b80612fe65750612fe6826140ec565b80612ff55750612ff582614111565b80613004575061300482614127565b80610fbd5750610fbd826140ec565b6127106001600160601b03821611156130815760405162461bcd60e51b815260206004820152602a60248201527f455243323938313a20726f79616c7479206665652077696c6c206578636565646044820152692073616c65507269636560b01b6064820152608401611515565b6001600160a01b0382166130d75760405162461bcd60e51b815260206004820152601960248201527f455243323938313a20696e76616c6964207265636569766572000000000000006044820152606401611515565b604080518082019091526001600160a01b039092168083526001600160601b039091166020909201829052600160a01b9091021761016155565b600060655482108015610fbd575050600090815260696020526040902054600160e01b900460ff161590565b6000828152606b602052604080822080546001600160a01b0319166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b60006131a4826138f5565b9050836001600160a01b031681600001516001600160a01b0316146131db5760405162a1148160e81b815260040160405180910390fd5b6000336001600160a01b03861614806131f957506131f98533610e93565b8061321457503361320984611355565b6001600160a01b0316145b90508061323457604051632ce44b5f60e11b815260040160405180910390fd5b6001600160a01b03841661325b57604051633a954ecd60e21b815260040160405180910390fd5b6132676000848761313d565b6001600160a01b038581166000908152606a60209081526040808320805467ffffffffffffffff198082166001600160401b0392831660001901831617909255898616808652838620805493841693831660019081018416949094179055898652606990945282852080546001600160e01b031916909417600160a01b4290921691909102178355870180845292208054919390911661333b57606554821461333b57805460208601516001600160401b0316600160a01b026001600160e01b03199091166001600160a01b038a16171781555b50505082846001600160a01b0316866001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45b5050505050565b613391828261414c565b600082815260cb6020526040902061142290826141d2565b6001600160a01b03811633146134195760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401611515565b611bcf828261408a565b60006101a1546101a05461343a6066546065540390565b61344491906150b9565b61344e9190615104565b905090565b6065546001600160a01b03851661347c57604051622e076360e81b815260040160405180910390fd5b8361349a5760405163b562e8dd60e01b815260040160405180910390fd5b6001600160a01b0385166000818152606a6020908152604080832080546fffffffffffffffffffffffffffffffff1981166001600160401b038083168c018116918217600160401b67ffffffffffffffff1990941690921783900481168c01811690920217909155858452606990925290912080546001600160e01b031916909217600160a01b42909216919091021790558080850183801561354657506001600160a01b0387163b15155b156135cf575b60405182906001600160a01b038916906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a46135976000888480600101955088613e8b565b6135b4576040516368d2bf6b60e11b815260040160405180910390fd5b8082141561354c5782606554146135ca57600080fd5b613615565b5b6040516001830192906001600160a01b038916906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a4808214156135d0575b50606555613380565b60fd5460ff166136675760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401611515565b60fd805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b806136cf57604051636e5fd58f60e01b815260040160405180910390fd5b6101a1546101a05414156136f65760405163aa9eff6760e01b815260040160405180910390fd5b8060006137036101ab5490565b6101aa546101a9549192506000918291905b80821080156137245750600086115b156138c85760006101a9838154811061373f5761373f615209565b60009182526020918290206040805180820190915260029092020180546001600160a01b0316808352600190910154928201839052965091508710156137c257869350836101a9848154811061379757613797615209565b906000526020600020906002020160010160008282546137b79190615104565b9091555061380c9050565b806020015193506101a983815481106137dd576137dd615209565b60009182526020822060029091020180546001600160a01b0319168155600101558261380881615182565b9350505b6138168488615104565b6001600160a01b038616600090815261019e6020526040812080549299508692909190613844908490615104565b925050819055506138678585604051806020016040528060008152506000613453565b846001600160a01b03167fbb20f716bd7ca9427b818f6de485952ab3a5acec2559fb794e3f9a4d9f70e72285888761389e60655490565b6138a89190615104565b60026040516138ba949392919061508e565b60405180910390a250613715565b6138d28688615104565b6101a160008282546138e491906150b9565b9091555050506101aa555050505050565b6040805160608101825260008082526020820181905291810191909152816065548110156139f657600081815260696020908152604091829020825160608101845290546001600160a01b0381168252600160a01b81046001600160401b031692820192909252600160e01b90910460ff161515918101829052906139f45780516001600160a01b03161561398b579392505050565b5060001901600081815260696020908152604091829020825160608101845290546001600160a01b038116808352600160a01b82046001600160401b031693830193909352600160e01b900460ff16151592810192909252156139ef579392505050565b61398b565b505b604051636f96cda160e11b815260040160405180910390fd5b609880546001600160a01b0319166001600160a01b0383169081179091556040517f68f49b346b94582a8b5f9d10e3fe3365318fe8f191ff8dce7c59c6cad06b02f590600090a250565b613a756000613a706097546001600160a01b031690565b61408a565b6001600160a01b03811615613a8f57613a8f600082613387565b611b27816141e7565b60fd5460ff1615613abb5760405162461bcd60e51b815260040161151590615019565b60fd805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586136943390565b80613b0e57604051636e5fd58f60e01b815260040160405180910390fd5b33600090815261019d6020526040902054811115613b3f576040516390e50aa560e01b815260040160405180910390fd5b6101945481613b4c613423565b613b5691906150b9565b1180613b72575061019654816101a054613b7091906150b9565b115b15613b9057604051631eddc6a360e11b815260040160405180910390fd5b33600090815261019d602052604081208054839290613bb0908490615104565b909155505033600090815261019e602052604081208054839290613bd59084906150b9565b92505081905550806101a06000828254613bef91906150b9565b909155505060408051808201909152338152602081018281526101a98054600181018255600091825292517f46e9bb78ef9a1e3ee9f53f39e4c4ee2bed6dca07e6229ea5dcb5d0732af60d17600290940293840180546001600160a01b0319166001600160a01b0390921691909117905590517f46e9bb78ef9a1e3ee9f53f39e4c4ee2bed6dca07e6229ea5dcb5d0732af60d18909201919091556101ab5490506000613c9c83836150e5565b604080518581526020810185905291925033917faaa4209473b0e01252afb37fc6a883231b6189d78f5fb75fec9d8345d716d6ba91016126ed565b60006120f98383614244565b600054610100900460ff16613d0a5760405162461bcd60e51b815260040161151590615043565b613d1261426e565b613d1a6142ad565b613d226142dc565b613d2c8888614303565b6001600160a01b038616613d53576040516331ae7ba360e21b815260040160405180910390fd5b821580613d68575082613d6682846150b9565b115b15613d8657604051631a231d4360e21b815260040160405180910390fd5b82841115613da757604051631ddf40b160e01b815260040160405180910390fd5b613dbf60008051602061525a833981519152876117f9565b613dcb856101f4613013565b6101978490556101949290925561019892909255610195919091556101965550505050565b80341015613e1357604051639968ec3d60e01b8152346004820152602401611515565b80341115611b2757600033613e288334615104565b604051600081818185875af1925050503d8060008114613e64576040519150601f19603f3d011682016040523d82523d6000602084013e613e69565b606091505b5050905080611bcf57604051633aa9e60d60e21b815260040160405180910390fd5b604051630a85bd0160e11b81526000906001600160a01b0385169063150b7a0290613ec0903390899088908890600401614f36565b602060405180830381600087803b158015613eda57600080fd5b505af1925050508015613f0a575060408051601f3d908101601f19168201909252613f0791810190614cd3565b60015b613f65573d808015613f38576040519150601f19603f3d011682016040523d82523d6000602084013e613f3d565b606091505b508051613f5d576040516368d2bf6b60e11b815260040160405180910390fd5b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490505b949350505050565b606081613fa75750506040805180820190915260018152600360fc1b602082015290565b8160005b8115613fd15780613fbb81615182565b9150613fca9050600a836150d1565b9150613fab565b6000816001600160401b03811115613feb57613feb61521f565b6040519080825280601f01601f191660200182016040528015614015576020820181803683370190505b5090505b8415613f7b5761402a600183615104565b9150614037600a8661519d565b6140429060306150b9565b60f81b81838151811061405757614057615209565b60200101906001600160f81b031916908160001a905350614079600a866150d1565b9450614019565b6000610fbd825490565b6140948282614334565b600082815260cb60205260409020611422908261439b565b60006001600160e01b031982166380ac58cd60e01b14806140dd57506001600160e01b03198216635b5e139f60e01b145b80610fbd5750610fbd82614111565b60006001600160e01b0319821663152a902d60e11b1480610fbd5750610fbd82614127565b6001600160e01b0319166301ffc9a760e01b1490565b60006001600160e01b0319821663f3353d7760e01b1480610fbd5750610fbd826143b0565b6141568282612100565b611bcf5760008281526099602090815260408083206001600160a01b03851684529091529020805460ff1916600117905561418e3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60006120f9836001600160a01b0384166143ca565b609780546001600160a01b038381166001600160a01b03198084168217909455609880549094169093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600082600001828154811061425b5761425b615209565b9060005260206000200154905092915050565b600054610100900460ff166142955760405162461bcd60e51b815260040161151590615043565b61429d614419565b6142a5614458565b611d71614487565b600054610100900460ff166142d45760405162461bcd60e51b815260040161151590615043565b611d71614542565b600054610100900460ff16611d715760405162461bcd60e51b815260040161151590615043565b600054610100900460ff1661432a5760405162461bcd60e51b815260040161151590615043565b611bcf8282614571565b61433e8282612100565b15611bcf5760008281526099602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60006120f9836001600160a01b0384166145c9565b60006143bb826146bc565b80610fbd5750610fbd826146e1565b600081815260018301602052604081205461441157508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610fbd565b506000610fbd565b600054610100900460ff166144405760405162461bcd60e51b815260040161151590615043565b614448614706565b6144506142dc565b611d716142dc565b600054610100900460ff1661447f5760405162461bcd60e51b815260040161151590615043565b611d7161473d565b600054610100900460ff166144ae5760405162461bcd60e51b815260040161151590615043565b6144f87f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a7fe0e65c783ac33ff1c5ccf4399c9185066773921d6f8d050bf80781603021f097614770565b611d717f427da25fe773164f88948d3e215c94b6554e2ed5e5f203a821c9f2f6131cf75a7fe516f7ac9747f401e208331379a0bafe3c9c4dbb6501fd23bcef278f7ebaf4e5614770565b600054610100900460ff166145695760405162461bcd60e51b815260040161151590615043565b600161012f55565b600054610100900460ff166145985760405162461bcd60e51b815260040161151590615043565b81516145ab90606790602085019061488b565b5080516145bf90606890602084019061488b565b5060006065555050565b600081815260018301602052604081205480156146b25760006145ed600183615104565b855490915060009061460190600190615104565b905081811461466657600086600001828154811061462157614621615209565b906000526020600020015490508087600001848154811061464457614644615209565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080614677576146776151f3565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610fbd565b6000915050610fbd565b60006001600160e01b031982166322d7505760e11b1480610fbd5750610fbd826140ac565b60006001600160e01b03198216635a05180f60e01b1480610fbd5750610fbd826147bb565b600054610100900460ff1661472d5760405162461bcd60e51b815260040161151590615043565b6147356142dc565b611d716147e0565b600054610100900460ff166147645760405162461bcd60e51b815260040161151590615043565b60fd805460ff19169055565b600082815260996020526040808220600101805490849055905190918391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b60006001600160e01b03198216637965db0b60e01b1480610fbd5750610fbd826146bc565b600054610100900460ff16612f3f5760405162461bcd60e51b815260040161151590615043565b82805461481390615147565b90600052602060002090601f016020900481019282614835576000855561487b565b82601f1061484e5782800160ff1982351617855561487b565b8280016001018555821561487b579182015b8281111561487b578235825591602001919060010190614860565b506148879291506148ff565b5090565b82805461489790615147565b90600052602060002090601f0160209004810192826148b9576000855561487b565b82601f106148d257805160ff191683800117855561487b565b8280016001018555821561487b579182015b8281111561487b5782518255916020019190600101906148e4565b5b808211156148875760008155600101614900565b60006001600160401b038084111561492e5761492e61521f565b604051601f8501601f19908116603f011681019082821181831017156149565761495661521f565b8160405280935085815286868601111561496f57600080fd5b858560208301376000602087830101525050509392505050565b80356001600160a01b0381168114612b6457600080fd5b60008083601f8401126149b257600080fd5b5081356001600160401b038111156149c957600080fd5b6020830191508360208260051b85010111156117f257600080fd5b600082601f8301126149f557600080fd5b6120f983833560208501614914565b600060208284031215614a1657600080fd5b6120f982614989565b60008060408385031215614a3257600080fd5b614a3b83614989565b9150614a4960208401614989565b90509250929050565b600080600060608486031215614a6757600080fd5b614a7084614989565b9250614a7e60208501614989565b9150604084013590509250925092565b60008060008060808587031215614aa457600080fd5b614aad85614989565b9350614abb60208601614989565b92506040850135915060608501356001600160401b03811115614add57600080fd5b8501601f81018713614aee57600080fd5b614afd87823560208401614914565b91505092959194509250565b60008060408385031215614b1c57600080fd5b614b2583614989565b91506020830135614b3581615235565b809150509250929050565b60008060408385031215614b5357600080fd5b614b5c83614989565b946020939093013593505050565b60008060408385031215614b7d57600080fd5b614b8683614989565b915060208301356001600160601b0381168114614b3557600080fd5b60008060008060408587031215614bb857600080fd5b84356001600160401b0380821115614bcf57600080fd5b614bdb888389016149a0565b90965094506020870135915080821115614bf457600080fd5b50614c01878288016149a0565b95989497509550505050565b600060208284031215614c1f57600080fd5b81516120f981615235565b60008060408385031215614c3d57600080fd5b8251614c4881615235565b6020939093015192949293505050565b600060208284031215614c6a57600080fd5b5035919050565b60008060408385031215614c8457600080fd5b82359150614a4960208401614989565b60008060408385031215614ca757600080fd5b50508035926020909101359150565b600060208284031215614cc857600080fd5b81356120f981615243565b600060208284031215614ce557600080fd5b81516120f981615243565b60008060208385031215614d0357600080fd5b82356001600160401b0380821115614d1a57600080fd5b818501915085601f830112614d2e57600080fd5b813581811115614d3d57600080fd5b866020828501011115614d4f57600080fd5b60209290920196919550909350505050565b600080600080600080600080610100898b031215614d7e57600080fd5b88356001600160401b0380821115614d9557600080fd5b614da18c838d016149e4565b995060208b0135915080821115614db757600080fd5b50614dc48b828c016149e4565b975050614dd360408a01614989565b9550614de160608a01614989565b979a969950949760808101359660a0820135965060c0820135955060e0909101359350915050565b600060208284031215614e1b57600080fd5b5051919050565b60008060008060008060c08789031215614e3b57600080fd5b505084359660208601359650604086013595606081013595506080810135945060a0013592509050565b60008151808452614e7d81602086016020860161511b565b601f01601f19169290920160200192915050565b60068110614eaf57634e487b7160e01b600052602160045260246000fd5b9052565b6000808454614ec181615147565b60018281168015614ed95760018114614eea57614f19565b60ff19841687528287019450614f19565b8860005260208060002060005b85811015614f105781548a820152908401908201614ef7565b50505082870194505b505050508351614f2d81836020880161511b565b01949350505050565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090614f6990830184614e65565b9695505050505050565b60208101610fbd8284614e91565b6020815260006120f96020830184614e65565b6000602080835260008454614fa881615147565b80848701526040600180841660008114614fc95760018114614fdd5761500b565b60ff1985168984015260608901955061500b565b896000528660002060005b858110156150035781548b8201860152908301908801614fe8565b8a0184019650505b509398975050505050505050565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b8481526020810184905260408101839052608081016150b06060830184614e91565b95945050505050565b600082198211156150cc576150cc6151b1565b500190565b6000826150e0576150e06151c7565b500490565b60008160001904831182151516156150ff576150ff6151b1565b500290565b600082821015615116576151166151b1565b500390565b60005b8381101561513657818101518382015260200161511e565b8381111561187d5750506000910152565b600181811c9082168061515b57607f821691505b6020821081141561517c57634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415615196576151966151b1565b5060010190565b6000826151ac576151ac6151c7565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b8015158114611b2757600080fd5b6001600160e01b031981168114611b2757600080fdfe770fadb28e0e3026382976ee8b810cb0eb8666922148dd9e10b20cfb9b477ba8a2646970667358221220471e20034e2a7d336d34488f56f20903e69e55acee6830a2a1472cfa800c8de964736f6c63430008060033",
  "deployedBytecode": "",
  "devdoc": {
    "author": "Trader Joe",
    "events": {
      "Initialized(uint256,uint256,uint256,uint256,uint256,uint256)": {
        "details": "Emitted on initializePhases()",
        "params": {
          "allowlistPrice": "Price of the allowlist sale in Avax",
          "allowlistStartTime": "Allowlist mint start time in seconds",
          "preMintStartTime": "Pre-mint start time in seconds",
          "publicSaleEndTime": "Public sale end time in seconds",
          "publicSaleStartTime": "Public sale start time in seconds",
          "salePrice": "Price of the public sale in Avax"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "allowlistMint(uint256)": {
        "params": {
          "_quantity": "Quantity of NFTs to mint"
        }
      },
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "batchMintPreMintedNFTs(uint256)": {
        "params": {
          "_maxQuantity": "Max quantity of NFTs to mint"
        }
      },
      "currentPhase()": {
        "returns": {
          "_0": "phase Current phase"
        }
      },
      "devMint(uint256)": {
        "details": "Can only mint up to `amountForDevs`",
        "params": {
          "_quantity": "Quantity of NFTs to mint"
        }
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "getOwnershipData(uint256)": {
        "params": {
          "_tokenId": "Token ID"
        },
        "returns": {
          "_0": "TokenOwnership Ownership struct for a specific token ID"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleMember(bytes32,uint256)": {
        "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
      },
      "grantRole(bytes32,address)": {
        "details": "If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must be the `owner` or have ``role``'s admin role. - the role granted can't be `DEFAULT_ADMIN`",
        "params": {
          "account": "The address of the account",
          "role": "The role to grant"
        }
      },
      "hasBatchToReveal()": {
        "returns": {
          "_0": "bool Whether reveal can be triggered or not",
          "_1": "uint256 The number of the next batch that will be revealed"
        }
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "initialize(string,string,address,address,uint256,uint256,uint256,uint256)": {
        "params": {
          "_amountForAllowlist": "Amount of NFTs available for the allowlist mint (e.g 1000)",
          "_amountForDevs": "Amount of NFTs reserved for `projectOwner` (e.g 200)",
          "_collectionSize": "The collection size (e.g 10000)",
          "_maxBatchSize": "Max amount of NFTs that can be minted at once",
          "_name": "ERC721 name",
          "_projectOwner": "The project owner",
          "_royaltyReceiver": "Royalty fee collector",
          "_symbol": "ERC721 symbol"
        }
      },
      "initializeJoeFee(uint256,address)": {
        "params": {
          "_joeFeeCollector": "The address to which the fees on the sale will be sent",
          "_joeFeePercent": "The fees collected by Joepegs on the sale benefits"
        }
      },
      "initializePhases(uint256,uint256,uint256,uint256,uint256,uint256)": {
        "details": "Can only be called once",
        "params": {
          "_allowlistPrice": "Price of the allowlist sale in Avax",
          "_allowlistStartTime": "Allowlist mint start time in seconds",
          "_preMintStartTime": "Pre-mint start time in seconds",
          "_publicSaleEndTime": "Public sale end time in seconds",
          "_publicSaleStartTime": "Public sale start time in seconds",
          "_salePrice": "Price of the public sale in Avax"
        }
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "numberMinted(address)": {
        "params": {
          "_owner": "The owner of the NFTs"
        },
        "returns": {
          "_0": "numberMinted Number of NFTs minted"
        }
      },
      "owner()": {
        "returns": {
          "_0": "The address of the current owner"
        }
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "pause()": {
        "details": "Sensible part of a contract might be pausable for security reasons. Requirements: - the caller must be the `owner` or have the ``role`` role. - the contrat needs to be unpaused."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "pendingOwner()": {
        "returns": {
          "_0": "The address of the current pending owner"
        }
      },
      "preMint(uint256)": {
        "params": {
          "_quantity": "Quantity of NFTs to mint"
        }
      },
      "publicSaleMint(uint256)": {
        "params": {
          "_quantity": "Quantity of NFTs to mint"
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. - the role renounced can't be `DEFAULT_ADMIN`",
        "params": {
          "account": "The address of the account",
          "role": "The role to renounce"
        }
      },
      "revokeRole(bytes32,address)": {
        "details": "If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be the `owner` or have ``role``'s admin role. - the role revoked can't be `DEFAULT_ADMIN`",
        "params": {
          "account": "The address of the account",
          "role": "The role to revoke"
        }
      },
      "royaltyInfo(uint256,uint256)": {
        "details": "Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of exchange. The royalty amount is denominated and should be payed in that same unit of exchange."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "seedAllowlist(address[],uint256[])": {
        "params": {
          "_addresses": "List of addresses allowed to mint during the allowlist phase",
          "_numNfts": "List of NFT quantities mintable per address"
        }
      },
      "setAllowlistStartTime(uint256)": {
        "details": "Only callable by owner",
        "params": {
          "_allowlistStartTime": "New allowlist start time"
        }
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "setBaseURI(string)": {
        "details": "This sets the URI for revealed tokens Only callable by project owner",
        "params": {
          "_baseURI": "Base URI to be set"
        }
      },
      "setBatchReveal(address)": {
        "details": "Can be set to zero address to disable batch reveal"
      },
      "setPreMintStartTime(uint256)": {
        "details": "Only callable by owner",
        "params": {
          "_preMintStartTime": "New pre-mint start time"
        }
      },
      "setPublicSaleEndTime(uint256)": {
        "details": "Only callable by owner",
        "params": {
          "_publicSaleEndTime": "New public sale end time"
        }
      },
      "setPublicSaleStartTime(uint256)": {
        "details": "Only callable by owner",
        "params": {
          "_publicSaleStartTime": "New public sale start time"
        }
      },
      "setRoyaltyInfo(address,uint96)": {
        "params": {
          "_feePercent": "Royalty fee percent in basis point",
          "_receiver": "Royalty fee collector"
        }
      },
      "setUnrevealedURI(string)": {
        "details": "Only callable by project owner",
        "params": {
          "_unrevealedURI": "Unrevealed URI to be set"
        }
      },
      "setWithdrawAVAXStartTime(uint256)": {
        "params": {
          "_withdrawAVAXStartTime": "New public sale end time"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these IDs are created. This function call must use less than 30 000 gas.",
        "params": {
          "_interfaceId": "InterfaceId to consider. Comes from type(Interface).interfaceId"
        },
        "returns": {
          "_0": "isInterfaceSupported True if the considered interface is supported"
        }
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "params": {
          "_id": "Token id"
        },
        "returns": {
          "_0": "URI Token URI"
        }
      },
      "totalSupply()": {
        "details": "Burned tokens are calculated here, use _totalMinted() if you want to count just minted tokens."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "unpause()": {
        "details": "Sensible part of a contract might be pausable for security reasons. Requirements: - the caller must be the `owner` or have the ``role`` role. - the contrat needs to be unpaused."
      },
      "withdrawAVAX(address)": {
        "params": {
          "_to": "Recipient of the earned AVAX"
        }
      }
    },
    "stateVariables": {
      "allowlistPrice": {
        "details": "allowlistPrice is scaled to 1e18"
      },
      "salePrice": {
        "details": "salePrice is scaled to 1e18"
      }
    },
    "title": "FlatLaunchpeg",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "BASIS_POINT_PRECISION()": {
        "notice": "Percentage base point"
      },
      "PROJECT_OWNER_ROLE()": {
        "notice": "Role granted to project owners"
      },
      "allowlist(address)": {
        "notice": "The amount of NFTs each allowed address can mint during the pre-mint or allowlist mint"
      },
      "allowlistMint(uint256)": {
        "notice": "Mint NFTs during the allowlist mint"
      },
      "allowlistPrice()": {
        "notice": "Price of one NFT for people on the mint list"
      },
      "allowlistStartTime()": {
        "notice": "Start time of the allowlist mint in seconds"
      },
      "amountBatchMinted()": {
        "notice": "Tracks the amount of NFTs batch minted"
      },
      "amountForAllowlist()": {
        "notice": "Amount of NFTs available for the allowlist mint (e.g 1000)"
      },
      "amountForDevs()": {
        "notice": "Amount of NFTs reserved for the project owner (e.g 200)"
      },
      "amountMintedByDevs()": {
        "notice": "Tracks the amount of NFTs minted by `projectOwner`"
      },
      "amountMintedDuringAllowlist()": {
        "notice": "Tracks the amount of NFTs minted on Allowlist phase"
      },
      "amountMintedDuringPreMint()": {
        "notice": "Tracks the amount of NFTs minted in the Pre-Mint phase"
      },
      "amountMintedDuringPublicSale()": {
        "notice": "Tracks the amount of NFTs minted on Public Sale phase"
      },
      "baseURI()": {
        "notice": "Token URI after collection reveal"
      },
      "batchMintPreMintedNFTs(uint256)": {
        "notice": "Batch mint NFTs requested during the pre-mint"
      },
      "becomeOwner()": {
        "notice": "Transfers the ownership to the new owner (`pendingOwner`). Can only be called by the pending owner"
      },
      "collectionSize()": {
        "notice": "The collection size (e.g 10000)"
      },
      "currentPhase()": {
        "notice": "Returns the current phase"
      },
      "devMint(uint256)": {
        "notice": "Mint NFTs to the project owner"
      },
      "getOwnershipData(uint256)": {
        "notice": "Returns the ownership data of a specific token ID"
      },
      "grantRole(bytes32,address)": {
        "notice": "Grants `role` to `account`."
      },
      "hasBatchToReveal()": {
        "notice": "Tells you if a batch can be revealed"
      },
      "initialize(string,string,address,address,uint256,uint256,uint256,uint256)": {
        "notice": "FlatLaunchpeg initialization Can only be called once"
      },
      "initializeJoeFee(uint256,address)": {
        "notice": "Initialize the sales fee percent taken by Joepegs and address that collects the fees"
      },
      "initializePhases(uint256,uint256,uint256,uint256,uint256,uint256)": {
        "notice": "Initialize the two phases of the sale"
      },
      "joeFeeCollector()": {
        "notice": "The address to which the fees on the sale will be sent"
      },
      "joeFeePercent()": {
        "notice": "The fees collected by Joepegs on the sale benefits"
      },
      "maxBatchSize()": {
        "notice": "Max amount of NFTs that can be minted at once"
      },
      "maxPerAddressDuringMint()": {
        "notice": "Max amount of NFTs an address can mint"
      },
      "numberMinted(address)": {
        "notice": "Returns the number of NFTs minted by a specific address"
      },
      "owner()": {
        "notice": "Returns the address of the current owner"
      },
      "pause()": {
        "notice": "Pauses the contract."
      },
      "pendingOwner()": {
        "notice": "Returns the address of the current pending owner"
      },
      "preMint(uint256)": {
        "notice": "Mint NFTs during the pre-mint"
      },
      "preMintStartTime()": {
        "notice": "Start time of the pre-mint in seconds"
      },
      "publicSaleEndTime()": {
        "notice": "End time of the public sale in seconds"
      },
      "publicSaleMint(uint256)": {
        "notice": "Mint NFTs during the public sale"
      },
      "publicSaleStartTime()": {
        "notice": "Start time of the public sale in seconds"
      },
      "renounceOwnership()": {
        "notice": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "renounceRole(bytes32,address)": {
        "notice": "Revokes `role` from the calling account."
      },
      "revealNextBatch()": {
        "notice": "Reveals the next batch if the reveal conditions are met"
      },
      "revokePendingOwner()": {
        "notice": "Revoke the pending owner address. This address will not be able to call {becomeOwner} to become the owner anymore. Can only be called by the owner"
      },
      "revokeRole(bytes32,address)": {
        "notice": "Revokes `role` from `account`."
      },
      "salePrice()": {
        "notice": "Price of one NFT during the public sale"
      },
      "seedAllowlist(address[],uint256[])": {
        "notice": "Set amount of NFTs mintable per address during the allowlist phase"
      },
      "setAllowlistStartTime(uint256)": {
        "notice": "Set the allowlist start time. Can only be set after phases have been initialized."
      },
      "setBaseURI(string)": {
        "notice": "Set the base URI"
      },
      "setBatchReveal(address)": {
        "notice": "Update batch reveal"
      },
      "setPendingOwner(address)": {
        "notice": "Sets the pending owner address. This address will be able to become the owner of this contract by calling {becomeOwner}"
      },
      "setPreMintStartTime(uint256)": {
        "notice": "Set the pre-mint start time. Can only be set after phases have been initialized."
      },
      "setPublicSaleEndTime(uint256)": {
        "notice": "Set the public sale end time. Can only be set after phases have been initialized."
      },
      "setPublicSaleStartTime(uint256)": {
        "notice": "Set the public sale start time. Can only be set after phases have been initialized."
      },
      "setRoyaltyInfo(address,uint96)": {
        "notice": "Set the royalty fee"
      },
      "setUnrevealedURI(string)": {
        "notice": "Set the unrevealed URI"
      },
      "setWithdrawAVAXStartTime(uint256)": {
        "notice": "Set the withdraw AVAX start time."
      },
      "tokenURI(uint256)": {
        "notice": "Returns the Uniform Resource Identifier (URI) for `tokenId` token."
      },
      "unpause()": {
        "notice": "Unpauses the contract."
      },
      "unrevealedURI()": {
        "notice": "Token URI before the collection reveal"
      },
      "withdrawAVAX(address)": {
        "notice": "Withdraw AVAX to the given recipient"
      },
      "withdrawAVAXStartTime()": {
        "notice": "Start time when funds can be withdrawn"
      }
    },
    "notice": "Implements a simple minting NFT contract with an allowlist and public sale phase.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 810,
        "contract": "contracts/FlatLaunchpeg.sol:FlatLaunchpeg",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 813,
        "contract": "contracts/FlatLaunchpeg.sol:FlatLaunchpeg",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1710,
        "contract": "contracts/FlatLaunchpeg.sol:FlatLaunchpeg",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1957,
        "contract": "contracts/FlatLaunchpeg.sol:FlatLaunchpeg",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 11862,
        "contract": "contracts/FlatLaunchpeg.sol:FlatLaunchpeg",
        "label": "_currentIndex",
        "offset": 0,
        "slot": "101",
        "type": "t_uint256"
      },
      {
        "astId": 11864,
        "contract": "contracts/FlatLaunchpeg.sol:FlatLaunchpeg",
        "label": "_burnCounter",
        "offset": 0,
        "slot": "102",
        "type": "t_uint256"
      },
      {
        "astId": 11866,
        "contract": "contracts/FlatLaunchpeg.sol:FlatLaunchpeg",
        "label": "_name",
        "offset": 0,
        "slot": "103",
        "type": "t_string_storage"
      },
      {
        "astId": 11868,
        "contract": "contracts/FlatLaunchpeg.sol:FlatLaunchpeg",
        "label": "_symbol",
        "offset": 0,
        "slot": "104",
        "type": "t_string_storage"
      },
      {
        "astId": 11873,
        "contract": "contracts/FlatLaunchpeg.sol:FlatLaunchpeg",
        "label": "_ownerships",
        "offset": 0,
        "slot": "105",
        "type": "t_mapping(t_uint256,t_struct(TokenOwnership)11851_storage)"
      },
      {
        "astId": 11878,
        "contract": "contracts/FlatLaunchpeg.sol:FlatLaunchpeg",
        "label": "_addressData",
        "offset": 0,
        "slot": "106",
        "type": "t_mapping(t_address,t_struct(AddressData)11860_storage)"
      },
      {
        "astId": 11882,
        "contract": "contracts/FlatLaunchpeg.sol:FlatLaunchpeg",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "107",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 11888,
        "contract": "contracts/FlatLaunchpeg.sol:FlatLaunchpeg",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "108",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 13136,
        "contract": "contracts/FlatLaunchpeg.sol:FlatLaunchpeg",
        "label": "__gap",
        "offset": 0,
        "slot": "109",
        "type": "t_array(t_uint256)42_storage"
      },
      {
        "astId": 11240,
        "contract": "contracts/FlatLaunchpeg.sol:FlatLaunchpeg",
        "label": "_owner",
        "offset": 0,
        "slot": "151",
        "type": "t_address"
      },
      {
        "astId": 11242,
        "contract": "contracts/FlatLaunchpeg.sol:FlatLaunchpeg",
        "label": "_pendingOwner",
        "offset": 0,
        "slot": "152",
        "type": "t_address"
      },
      {
        "astId": 273,
        "contract": "contracts/FlatLaunchpeg.sol:FlatLaunchpeg",
        "label": "_roles",
        "offset": 0,
        "slot": "153",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)268_storage)"
      },
      {
        "astId": 561,
        "contract": "contracts/FlatLaunchpeg.sol:FlatLaunchpeg",
        "label": "__gap",
        "offset": 0,
        "slot": "154",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 122,
        "contract": "contracts/FlatLaunchpeg.sol:FlatLaunchpeg",
        "label": "_roleMembers",
        "offset": 0,
        "slot": "203",
        "type": "t_mapping(t_bytes32,t_struct(AddressSet)2282_storage)"
      },
      {
        "astId": 232,
        "contract": "contracts/FlatLaunchpeg.sol:FlatLaunchpeg",
        "label": "__gap",
        "offset": 0,
        "slot": "204",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 898,
        "contract": "contracts/FlatLaunchpeg.sol:FlatLaunchpeg",
        "label": "_paused",
        "offset": 0,
        "slot": "253",
        "type": "t_bool"
      },
      {
        "astId": 987,
        "contract": "contracts/FlatLaunchpeg.sol:FlatLaunchpeg",
        "label": "__gap",
        "offset": 0,
        "slot": "254",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 1002,
        "contract": "contracts/FlatLaunchpeg.sol:FlatLaunchpeg",
        "label": "_status",
        "offset": 0,
        "slot": "303",
        "type": "t_uint256"
      },
      {
        "astId": 1046,
        "contract": "contracts/FlatLaunchpeg.sol:FlatLaunchpeg",
        "label": "__gap",
        "offset": 0,
        "slot": "304",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 1240,
        "contract": "contracts/FlatLaunchpeg.sol:FlatLaunchpeg",
        "label": "_defaultRoyaltyInfo",
        "offset": 0,
        "slot": "353",
        "type": "t_struct(RoyaltyInfo)1237_storage"
      },
      {
        "astId": 1245,
        "contract": "contracts/FlatLaunchpeg.sol:FlatLaunchpeg",
        "label": "_tokenRoyaltyInfo",
        "offset": 0,
        "slot": "354",
        "type": "t_mapping(t_uint256,t_struct(RoyaltyInfo)1237_storage)"
      },
      {
        "astId": 1425,
        "contract": "contracts/FlatLaunchpeg.sol:FlatLaunchpeg",
        "label": "__gap",
        "offset": 0,
        "slot": "355",
        "type": "t_array(t_uint256)48_storage"
      },
      {
        "astId": 3275,
        "contract": "contracts/FlatLaunchpeg.sol:FlatLaunchpeg",
        "label": "batchReveal",
        "offset": 0,
        "slot": "403",
        "type": "t_contract(IBatchReveal)10759"
      },
      {
        "astId": 3286,
        "contract": "contracts/FlatLaunchpeg.sol:FlatLaunchpeg",
        "label": "collectionSize",
        "offset": 0,
        "slot": "404",
        "type": "t_uint256"
      },
      {
        "astId": 3290,
        "contract": "contracts/FlatLaunchpeg.sol:FlatLaunchpeg",
        "label": "amountForDevs",
        "offset": 0,
        "slot": "405",
        "type": "t_uint256"
      },
      {
        "astId": 3294,
        "contract": "contracts/FlatLaunchpeg.sol:FlatLaunchpeg",
        "label": "amountForAllowlist",
        "offset": 0,
        "slot": "406",
        "type": "t_uint256"
      },
      {
        "astId": 3298,
        "contract": "contracts/FlatLaunchpeg.sol:FlatLaunchpeg",
        "label": "maxBatchSize",
        "offset": 0,
        "slot": "407",
        "type": "t_uint256"
      },
      {
        "astId": 3302,
        "contract": "contracts/FlatLaunchpeg.sol:FlatLaunchpeg",
        "label": "maxPerAddressDuringMint",
        "offset": 0,
        "slot": "408",
        "type": "t_uint256"
      },
      {
        "astId": 3306,
        "contract": "contracts/FlatLaunchpeg.sol:FlatLaunchpeg",
        "label": "joeFeePercent",
        "offset": 0,
        "slot": "409",
        "type": "t_uint256"
      },
      {
        "astId": 3310,
        "contract": "contracts/FlatLaunchpeg.sol:FlatLaunchpeg",
        "label": "joeFeeCollector",
        "offset": 0,
        "slot": "410",
        "type": "t_address"
      },
      {
        "astId": 3318,
        "contract": "contracts/FlatLaunchpeg.sol:FlatLaunchpeg",
        "label": "baseURI",
        "offset": 0,
        "slot": "411",
        "type": "t_string_storage"
      },
      {
        "astId": 3322,
        "contract": "contracts/FlatLaunchpeg.sol:FlatLaunchpeg",
        "label": "unrevealedURI",
        "offset": 0,
        "slot": "412",
        "type": "t_string_storage"
      },
      {
        "astId": 3328,
        "contract": "contracts/FlatLaunchpeg.sol:FlatLaunchpeg",
        "label": "allowlist",
        "offset": 0,
        "slot": "413",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3333,
        "contract": "contracts/FlatLaunchpeg.sol:FlatLaunchpeg",
        "label": "userAddressToPreMintAmount",
        "offset": 0,
        "slot": "414",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3337,
        "contract": "contracts/FlatLaunchpeg.sol:FlatLaunchpeg",
        "label": "amountMintedByDevs",
        "offset": 0,
        "slot": "415",
        "type": "t_uint256"
      },
      {
        "astId": 3341,
        "contract": "contracts/FlatLaunchpeg.sol:FlatLaunchpeg",
        "label": "amountMintedDuringPreMint",
        "offset": 0,
        "slot": "416",
        "type": "t_uint256"
      },
      {
        "astId": 3345,
        "contract": "contracts/FlatLaunchpeg.sol:FlatLaunchpeg",
        "label": "amountBatchMinted",
        "offset": 0,
        "slot": "417",
        "type": "t_uint256"
      },
      {
        "astId": 3349,
        "contract": "contracts/FlatLaunchpeg.sol:FlatLaunchpeg",
        "label": "amountMintedDuringAllowlist",
        "offset": 0,
        "slot": "418",
        "type": "t_uint256"
      },
      {
        "astId": 3353,
        "contract": "contracts/FlatLaunchpeg.sol:FlatLaunchpeg",
        "label": "amountMintedDuringPublicSale",
        "offset": 0,
        "slot": "419",
        "type": "t_uint256"
      },
      {
        "astId": 3357,
        "contract": "contracts/FlatLaunchpeg.sol:FlatLaunchpeg",
        "label": "preMintStartTime",
        "offset": 0,
        "slot": "420",
        "type": "t_uint256"
      },
      {
        "astId": 3361,
        "contract": "contracts/FlatLaunchpeg.sol:FlatLaunchpeg",
        "label": "allowlistStartTime",
        "offset": 0,
        "slot": "421",
        "type": "t_uint256"
      },
      {
        "astId": 3365,
        "contract": "contracts/FlatLaunchpeg.sol:FlatLaunchpeg",
        "label": "publicSaleStartTime",
        "offset": 0,
        "slot": "422",
        "type": "t_uint256"
      },
      {
        "astId": 3369,
        "contract": "contracts/FlatLaunchpeg.sol:FlatLaunchpeg",
        "label": "publicSaleEndTime",
        "offset": 0,
        "slot": "423",
        "type": "t_uint256"
      },
      {
        "astId": 3373,
        "contract": "contracts/FlatLaunchpeg.sol:FlatLaunchpeg",
        "label": "withdrawAVAXStartTime",
        "offset": 0,
        "slot": "424",
        "type": "t_uint256"
      },
      {
        "astId": 3378,
        "contract": "contracts/FlatLaunchpeg.sol:FlatLaunchpeg",
        "label": "preMintQueue",
        "offset": 0,
        "slot": "425",
        "type": "t_array(t_struct(PreMintData)3386_storage)dyn_storage"
      },
      {
        "astId": 3381,
        "contract": "contracts/FlatLaunchpeg.sol:FlatLaunchpeg",
        "label": "preMintQueueIdx",
        "offset": 0,
        "slot": "426",
        "type": "t_uint256"
      },
      {
        "astId": 6173,
        "contract": "contracts/FlatLaunchpeg.sol:FlatLaunchpeg",
        "label": "allowlistPrice",
        "offset": 0,
        "slot": "427",
        "type": "t_uint256"
      },
      {
        "astId": 6177,
        "contract": "contracts/FlatLaunchpeg.sol:FlatLaunchpeg",
        "label": "salePrice",
        "offset": 0,
        "slot": "428",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(PreMintData)3386_storage)dyn_storage": {
        "base": "t_struct(PreMintData)3386_storage",
        "encoding": "dynamic_array",
        "label": "struct BaseLaunchpeg.PreMintData[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)42_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[42]",
        "numberOfBytes": "1344"
      },
      "t_array(t_uint256)48_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[48]",
        "numberOfBytes": "1536"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IBatchReveal)10759": {
        "encoding": "inplace",
        "label": "contract IBatchReveal",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_struct(AddressData)11860_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ERC721AUpgradeable.AddressData)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressData)11860_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(AddressSet)2282_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)2282_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)268_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)268_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(RoyaltyInfo)1237_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ERC2981Upgradeable.RoyaltyInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(RoyaltyInfo)1237_storage"
      },
      "t_mapping(t_uint256,t_struct(TokenOwnership)11851_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ERC721AUpgradeable.TokenOwnership)",
        "numberOfBytes": "32",
        "value": "t_struct(TokenOwnership)11851_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressData)11860_storage": {
        "encoding": "inplace",
        "label": "struct ERC721AUpgradeable.AddressData",
        "members": [
          {
            "astId": 11853,
            "contract": "contracts/FlatLaunchpeg.sol:FlatLaunchpeg",
            "label": "balance",
            "offset": 0,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 11855,
            "contract": "contracts/FlatLaunchpeg.sol:FlatLaunchpeg",
            "label": "numberMinted",
            "offset": 8,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 11857,
            "contract": "contracts/FlatLaunchpeg.sol:FlatLaunchpeg",
            "label": "numberBurned",
            "offset": 16,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 11859,
            "contract": "contracts/FlatLaunchpeg.sol:FlatLaunchpeg",
            "label": "aux",
            "offset": 24,
            "slot": "0",
            "type": "t_uint64"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(AddressSet)2282_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSetUpgradeable.AddressSet",
        "members": [
          {
            "astId": 2281,
            "contract": "contracts/FlatLaunchpeg.sol:FlatLaunchpeg",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)1981_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(PreMintData)3386_storage": {
        "encoding": "inplace",
        "label": "struct BaseLaunchpeg.PreMintData",
        "members": [
          {
            "astId": 3383,
            "contract": "contracts/FlatLaunchpeg.sol:FlatLaunchpeg",
            "label": "sender",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 3385,
            "contract": "contracts/FlatLaunchpeg.sol:FlatLaunchpeg",
            "label": "quantity",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoleData)268_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 265,
            "contract": "contracts/FlatLaunchpeg.sol:FlatLaunchpeg",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 267,
            "contract": "contracts/FlatLaunchpeg.sol:FlatLaunchpeg",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoyaltyInfo)1237_storage": {
        "encoding": "inplace",
        "label": "struct ERC2981Upgradeable.RoyaltyInfo",
        "members": [
          {
            "astId": 1234,
            "contract": "contracts/FlatLaunchpeg.sol:FlatLaunchpeg",
            "label": "receiver",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1236,
            "contract": "contracts/FlatLaunchpeg.sol:FlatLaunchpeg",
            "label": "royaltyFraction",
            "offset": 20,
            "slot": "0",
            "type": "t_uint96"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Set)1981_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSetUpgradeable.Set",
        "members": [
          {
            "astId": 1976,
            "contract": "contracts/FlatLaunchpeg.sol:FlatLaunchpeg",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 1980,
            "contract": "contracts/FlatLaunchpeg.sol:FlatLaunchpeg",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(TokenOwnership)11851_storage": {
        "encoding": "inplace",
        "label": "struct ERC721AUpgradeable.TokenOwnership",
        "members": [
          {
            "astId": 11846,
            "contract": "contracts/FlatLaunchpeg.sol:FlatLaunchpeg",
            "label": "addr",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 11848,
            "contract": "contracts/FlatLaunchpeg.sol:FlatLaunchpeg",
            "label": "startTimestamp",
            "offset": 20,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 11850,
            "contract": "contracts/FlatLaunchpeg.sol:FlatLaunchpeg",
            "label": "burned",
            "offset": 28,
            "slot": "0",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint96": {
        "encoding": "inplace",
        "label": "uint96",
        "numberOfBytes": "12"
      }
    }
  }
}